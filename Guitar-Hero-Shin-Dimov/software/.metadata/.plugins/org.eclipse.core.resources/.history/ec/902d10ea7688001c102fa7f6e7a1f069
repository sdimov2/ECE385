
GuitarHero.elf:     file format elf32-littlenios2
GuitarHero.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000e258 memsz 0x0000e258 flags r-x
    LOAD off    0x0000f278 vaddr 0x0800e278 paddr 0x08010048 align 2**12
         filesz 0x00001dd0 memsz 0x00001dd0 flags rw-
    LOAD off    0x00011e18 vaddr 0x08011e18 paddr 0x08011e18 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dd28  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000320  0800df58  0800df58  0000ef58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dd0  0800e278  08010048  0000f278  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  08011e18  08011e18  00011e18  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00011048  2**0
                  CONTENTS
  7 .sdram        00000000  08011f78  08011f78  00011048  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b80  00000000  00000000  00011070  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000166bd  00000000  00000000  00011bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000635e  00000000  00000000  000282ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008434  00000000  00000000  0002e60b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000181c  00000000  00000000  00036a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032da  00000000  00000000  0003825c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015095  00000000  00000000  0003b536  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000505cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  00050610  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005447e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00054481  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005448d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005448e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005448f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00054493  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00054497  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0005449b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000544a6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000544b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  000544bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003e  00000000  00000000  000544c6  2**0
                  CONTENTS, READONLY
 30 .jdi          00006873  00000000  00000000  00054504  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008629a  00000000  00000000  0005ad77  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0800df58 l    d  .rodata	00000000 .rodata
0800e278 l    d  .rwdata	00000000 .rwdata
08011e18 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08011f78 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../GuitarHero_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08010004 l     O .rwdata	00000004 vga_ctrl
0800e278 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
08010008 l     O .rwdata	00000004 vga_ctrl
0800e3e8 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800dfbe l     O .rodata	00000010 zeroes.4389
0800dfce l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
08002da4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
0800e558 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800e99c l     O .rwdata	00000020 lc_ctype_charset
0800e97c l     O .rwdata	00000020 lc_message_charset
0800e9bc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0800e000 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e124 l     O .rodata	00000010 zeroes.4333
0800e134 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0800bb9c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08010020 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800be2c l     F .text	00000034 alt_dev_reg
0800edfc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800c120 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800c32c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800c964 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0800ccdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800ce10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800ce3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800d29c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800d3fc l     F .text	0000003c alt_get_errno
0800d438 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08011e4c g     O .bss	00000004 alt_instruction_exception_handler
080060a8 g     F .text	00000074 _mprec_log10
08006194 g     F .text	0000008c __any_on
0800e00c g     O .rodata	00000028 __mprec_tinytens
0800bc88 g     F .text	0000007c alt_main
08011e78 g     O .bss	00000100 alt_irq
08010048 g       *ABS*	00000000 __flash_rwdata_start
0800a574 g     F .text	00000088 .hidden __eqdf2
08011f78 g       *ABS*	00000000 __alt_heap_start
08004654 g     F .text	0000007c _setlocale_r
0800bd28 g     F .text	00000024 __malloc_unlock
08000594 g     F .text	000001a0 textVGAColorScreenSaver
08007e44 g     F .text	0000015c memmove
08005168 g     F .text	000000a8 _Balloc
0800a5fc g     F .text	000000dc .hidden __gtdf2
0800d8a8 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08011e30 g     O .bss	00000004 errno
08006594 g     F .text	000013a0 ___svfiprintf_internal_r
08011e38 g     O .bss	00000004 alt_argv
08018004 g       *ABS*	00000000 _gp
0800bdfc g     F .text	00000030 usleep
08000430 g     F .text	00000050 textVGAColorClr
0800fe84 g     O .rwdata	00000180 alt_fd_list
0800d8cc g     F .text	00000090 alt_find_dev
08005020 g     F .text	00000148 memcpy
0800b9b4 g     F .text	000000dc .hidden __floatsidf
0800d380 g     F .text	0000007c alt_io_redirect
0800a6d8 g     F .text	000000f4 .hidden __ltdf2
0800df58 g       *ABS*	00000000 __DTOR_END__
0800db28 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08006220 g     F .text	00000074 __fpclassifyd
08006004 g     F .text	000000a4 __ratio
0800c524 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800082c g     F .text	00000064 .hidden __udivsi3
0800e05c g     O .rodata	000000c8 __mprec_tens
080046d0 g     F .text	0000000c __locale_charset
08011e2c g     O .bss	00000004 __malloc_top_pad
08010014 g     O .rwdata	00000004 __mb_cur_max
08004700 g     F .text	0000000c _localeconv_r
0800559c g     F .text	0000003c __i2b
08006294 g     F .text	00000054 _sbrk_r
08010034 g     O .rwdata	00000004 alt_max_fd
08011e28 g     O .bss	00000004 __malloc_max_sbrked_mem
080092f8 g     F .text	000008ac .hidden __adddf3
08005dac g     F .text	0000010c __b2d
08008d34 g     F .text	000005c4 .hidden __umoddi3
0801000c g     O .rwdata	00000004 _global_impure_ptr
080080c8 g     F .text	00000564 _realloc_r
08011f78 g       *ABS*	00000000 __bss_end
0800d1ac g     F .text	000000f0 alt_iic_isr_register
0800d7a0 g     F .text	00000108 alt_tick
08008738 g     F .text	000005fc .hidden __udivdi3
0800e034 g     O .rodata	00000028 __mprec_bigtens
08005380 g     F .text	00000104 __s2b
0800ba90 g     F .text	000000a8 .hidden __floatunsidf
08005aec g     F .text	00000060 __mcmp
0800d160 g     F .text	0000004c alt_ic_irq_enabled
0800d704 g     F .text	0000009c alt_alarm_stop
08011e40 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
0800fe5c g     O .rwdata	00000028 alt_dev_null
0800cdf0 g     F .text	00000020 alt_dcache_flush_all
08005484 g     F .text	00000068 __hi0bits
0800b934 g     F .text	00000080 .hidden __fixdfsi
08010048 g       *ABS*	00000000 __ram_rwdata_end
0801002c g     O .rwdata	00000008 alt_dev_list
0800e278 g       *ABS*	00000000 __ram_rodata_end
0800a6d8 g     F .text	000000f4 .hidden __ledf2
08005864 g     F .text	00000140 __pow5mult
08011e20 g     O .bss	00000004 __nlocale_changed
08000890 g     F .text	00000058 .hidden __umodsi3
08011f78 g       *ABS*	00000000 end
0800c060 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0800df58 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800c9dc g     F .text	0000007c alt_avalon_timer_sc_init
0800bb38 g     F .text	00000064 .hidden __clzsi2
0800c740 g     F .text	00000224 altera_avalon_jtag_uart_write
08004f3c g     F .text	000000e4 memchr
0800098c g     F .text	00000058 _sprintf_r
08007b34 g     F .text	00000310 _free_r
080046dc g     F .text	00000010 __locale_mb_cur_max
0800dda4 g     F .text	00000180 __call_exitprocs
08011e1c g     O .bss	00000004 __mlocale_changed
08010018 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08011e44 g     O .bss	00000004 _alt_tick_rate
08000928 g     F .text	00000064 rand
080059a4 g     F .text	00000148 __lshift
08011e48 g     O .bss	00000004 _alt_nticks
0800be98 g     F .text	00000064 alt_sys_init
080063c4 g     F .text	000001d0 __ssprint_r
0800dc8c g     F .text	00000118 __register_exitproc
080055d8 g     F .text	0000028c __multiply
0800c3cc g     F .text	00000068 altera_avalon_jtag_uart_close
080008e8 g     F .text	00000028 .hidden __mulsi3
0800e278 g       *ABS*	00000000 __ram_rwdata_start
0800df58 g       *ABS*	00000000 __ram_rodata_start
08011e50 g     O .bss	00000028 __malloc_current_mallinfo
08005eb8 g     F .text	0000014c __d2b
0800befc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800da64 g     F .text	000000c4 alt_get_fd
0800cb84 g     F .text	00000158 alt_busy_sleep
0800dc10 g     F .text	0000007c memcmp
0800bfbc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08011f78 g       *ABS*	00000000 __alt_stack_base
0800c00c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009ba4 g     F .text	000009d0 .hidden __divdf3
0800611c g     F .text	00000078 __copybits
0800e9f4 g     O .rwdata	00000408 __malloc_av_
0800a7cc g     F .text	0000086c .hidden __muldf3
0800d95c g     F .text	00000108 alt_find_file
0800ce78 g     F .text	000000a4 alt_dev_llist_insert
0800bd04 g     F .text	00000024 __malloc_lock
0800bd4c g     F .text	000000b0 sbrk
08000ae8 g     F .text	000022bc ___svfprintf_internal_r
08007934 g     F .text	000000dc _calloc_r
08011e18 g       *ABS*	00000000 __bss_start
08007fa0 g     F .text	00000128 memset
0800026c g     F .text	000001c4 main
08011e3c g     O .bss	00000004 alt_envp
08011e24 g     O .bss	00000004 __malloc_max_total_mem
0800bf5c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08000910 g     F .text	00000018 srand
0c000000 g       *ABS*	00000000 __alt_heap_limit
08002fcc g     F .text	00001688 _dtoa_r
08004730 g     F .text	0000080c _malloc_r
08010038 g     O .rwdata	00000004 alt_errno
08000734 g     F .text	00000084 .hidden __divsi3
08007a10 g     F .text	00000124 _malloc_trim_r
0800df58 g       *ABS*	00000000 __CTOR_END__
080062e8 g     F .text	000000dc strcmp
0800df58 g       *ABS*	00000000 __flash_rodata_start
0800df58 g       *ABS*	00000000 __DTOR_LIST__
0800a574 g     F .text	00000088 .hidden __nedf2
0800be60 g     F .text	00000038 alt_irq_init
0800d680 g     F .text	00000084 alt_release_fd
080009e4 g     F .text	0000006c sprintf
0800e144 g     O .rodata	00000100 .hidden __clz_tab
08011e18 g     O .bss	00000004 _PathLocale
0800dbc4 g     F .text	00000014 atexit
0800470c g     F .text	00000018 setlocale
08010010 g     O .rwdata	00000004 _impure_ptr
08011e34 g     O .bss	00000004 alt_argc
0800cf7c g     F .text	00000060 _do_dtors
080046f8 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08005d48 g     F .text	00000064 __ulp
08010024 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004724 g     F .text	0000000c localeconv
0800cffc g     F .text	00000050 alt_ic_isr_register
08010048 g       *ABS*	00000000 _edata
08011f78 g       *ABS*	00000000 _end
08000230 g       *ABS*	00000000 __ram_exceptions_end
0800c434 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000480 g     F .text	00000114 textVGADrawColorText
0800d0d4 g     F .text	0000008c alt_ic_irq_disable
0801001c g     O .rwdata	00000004 __malloc_trim_threshold
080046ec g     F .text	0000000c __locale_msgcharset
0800dbd8 g     F .text	00000038 exit
08005b4c g     F .text	000001fc __mdiff
080007b8 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800df24 g     F .text	00000034 _exit
0800ca58 g     F .text	0000012c alt_alarm_start
0800862c g     F .text	0000010c .hidden __muldi3
08000a50 g     F .text	00000098 strlen
0800d524 g     F .text	0000015c open
0800a5fc g     F .text	000000dc .hidden __gedf2
0800cfdc g     F .text	00000020 alt_icache_flush_all
0801003c g     O .rwdata	00000004 alt_priority_mask
0800d04c g     F .text	00000088 alt_ic_irq_enable
0800b038 g     F .text	000008fc .hidden __subdf3
080054ec g     F .text	000000b0 __lo0bits
08010040 g     O .rwdata	00000008 alt_alarm_list
0800cf1c g     F .text	00000060 _do_ctors
0800cd18 g     F .text	000000d8 close
0800bc04 g     F .text	00000084 alt_load
08005238 g     F .text	00000148 __multadd
08005210 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10879e04 	addi	r2,r2,7800
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10879e04 	addi	r2,r2,7800
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a79217 	ldw	r2,-25016(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a79217 	ldw	r2,-25016(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6a00114 	ori	gp,gp,32772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10878614 	ori	r2,r2,7704

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18c7de14 	ori	r3,r3,8056

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800bc040 	call	800bc04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800bc880 	call	800bc88 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <main>:
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

#include "text_mode_vga_color.h"

int main(){
 800026c:	deffe404 	addi	sp,sp,-112
 8000270:	dfc01b15 	stw	ra,108(sp)
 8000274:	df001a15 	stw	fp,104(sp)
 8000278:	df001a04 	addi	fp,sp,104

	textVGAColorClr();
 800027c:	80004300 	call	8000430 <textVGAColorClr>

	char color_string[80] = "The Last Man -- Abridged Version";
 8000280:	00881974 	movhi	r2,8293
 8000284:	109a1504 	addi	r2,r2,26708
 8000288:	e0bfeb15 	stw	r2,-84(fp)
 800028c:	009d1cf4 	movhi	r2,29811
 8000290:	10985304 	addi	r2,r2,24908
 8000294:	e0bfec15 	stw	r2,-80(fp)
 8000298:	009b9874 	movhi	r2,28257
 800029c:	10934804 	addi	r2,r2,19744
 80002a0:	e0bfed15 	stw	r2,-76(fp)
 80002a4:	00880b74 	movhi	r2,8237
 80002a8:	108b4804 	addi	r2,r2,11552
 80002ac:	e0bfee15 	stw	r2,-72(fp)
 80002b0:	009a5cb4 	movhi	r2,26994
 80002b4:	10989044 	addi	r2,r2,25153
 80002b8:	e0bfef15 	stw	r2,-68(fp)
 80002bc:	00991974 	movhi	r2,25701
 80002c0:	1099d904 	addi	r2,r2,26468
 80002c4:	e0bff015 	stw	r2,-64(fp)
 80002c8:	009c9974 	movhi	r2,29285
 80002cc:	10958804 	addi	r2,r2,22048
 80002d0:	e0bff115 	stw	r2,-60(fp)
 80002d4:	009b9bf4 	movhi	r2,28271
 80002d8:	109a5cc4 	addi	r2,r2,26995
 80002dc:	e0bff215 	stw	r2,-56(fp)
 80002e0:	e03ff315 	stw	zero,-52(fp)
 80002e4:	e03ff415 	stw	zero,-48(fp)
 80002e8:	e03ff515 	stw	zero,-44(fp)
 80002ec:	e03ff615 	stw	zero,-40(fp)
 80002f0:	e03ff715 	stw	zero,-36(fp)
 80002f4:	e03ff815 	stw	zero,-32(fp)
 80002f8:	e03ff915 	stw	zero,-28(fp)
 80002fc:	e03ffa15 	stw	zero,-24(fp)
 8000300:	e03ffb15 	stw	zero,-20(fp)
 8000304:	e03ffc15 	stw	zero,-16(fp)
 8000308:	e03ffd15 	stw	zero,-12(fp)
 800030c:	e03ffe15 	stw	zero,-8(fp)
    int fg, bg, x, y;
    fg = 0x01;
 8000310:	00800044 	movi	r2,1
 8000314:	e0bfe915 	stw	r2,-92(fp)
	bg = 0x00;
 8000318:	e03fea15 	stw	zero,-88(fp)

	for (y = 0; y < 31; y++){
 800031c:	e03fe815 	stw	zero,-96(fp)
 8000320:	00001706 	br	8000380 <main+0x114>
		//textVGADrawColorText (color_string, x, y, bg, fg);
		textVGADrawColorText (color_string, 0, y, 0x00, 0x01);
 8000324:	e0ffeb04 	addi	r3,fp,-84
 8000328:	00800044 	movi	r2,1
 800032c:	d8800015 	stw	r2,0(sp)
 8000330:	000f883a 	mov	r7,zero
 8000334:	e1bfe817 	ldw	r6,-96(fp)
 8000338:	000b883a 	mov	r5,zero
 800033c:	1809883a 	mov	r4,r3
 8000340:	80004800 	call	8000480 <textVGADrawColorText>
		usleep (5000);
 8000344:	0104e204 	movi	r4,5000
 8000348:	800bdfc0 	call	800bdfc <usleep>

		textVGADrawColorText (color_string, 40, y, 0x00, 0x01);
 800034c:	e0ffeb04 	addi	r3,fp,-84
 8000350:	00800044 	movi	r2,1
 8000354:	d8800015 	stw	r2,0(sp)
 8000358:	000f883a 	mov	r7,zero
 800035c:	e1bfe817 	ldw	r6,-96(fp)
 8000360:	01400a04 	movi	r5,40
 8000364:	1809883a 	mov	r4,r3
 8000368:	80004800 	call	8000480 <textVGADrawColorText>
		usleep (5000);
 800036c:	0104e204 	movi	r4,5000
 8000370:	800bdfc0 	call	800bdfc <usleep>
	char color_string[80] = "The Last Man -- Abridged Version";
    int fg, bg, x, y;
    fg = 0x01;
	bg = 0x00;

	for (y = 0; y < 31; y++){
 8000374:	e0bfe817 	ldw	r2,-96(fp)
 8000378:	10800044 	addi	r2,r2,1
 800037c:	e0bfe815 	stw	r2,-96(fp)
 8000380:	e0bfe817 	ldw	r2,-96(fp)
 8000384:	108007d0 	cmplti	r2,r2,31
 8000388:	103fe61e 	bne	r2,zero,8000324 <__alt_data_end+0xfc000324>
		usleep (5000);

		textVGADrawColorText (color_string, 40, y, 0x00, 0x01);
		usleep (5000);
	}
	char mystring1[2] = "A";
 800038c:	00801044 	movi	r2,65
 8000390:	e0bfff0d 	sth	r2,-4(fp)
	char mystring2[2] = "H";
 8000394:	00801204 	movi	r2,72
 8000398:	e0bfff8d 	sth	r2,-2(fp)

	for (x = 0; x < 3; x++){
 800039c:	e03fe715 	stw	zero,-100(fp)
 80003a0:	00000c06 	br	80003d4 <main+0x168>
		textVGADrawColorText (mystring1, x, 29, 0x01, 0x00);
 80003a4:	e0bfff04 	addi	r2,fp,-4
 80003a8:	d8000015 	stw	zero,0(sp)
 80003ac:	01c00044 	movi	r7,1
 80003b0:	01800744 	movi	r6,29
 80003b4:	e17fe717 	ldw	r5,-100(fp)
 80003b8:	1009883a 	mov	r4,r2
 80003bc:	80004800 	call	8000480 <textVGADrawColorText>
		usleep (5000);
 80003c0:	0104e204 	movi	r4,5000
 80003c4:	800bdfc0 	call	800bdfc <usleep>
		usleep (5000);
	}
	char mystring1[2] = "A";
	char mystring2[2] = "H";

	for (x = 0; x < 3; x++){
 80003c8:	e0bfe717 	ldw	r2,-100(fp)
 80003cc:	10800044 	addi	r2,r2,1
 80003d0:	e0bfe715 	stw	r2,-100(fp)
 80003d4:	e0bfe717 	ldw	r2,-100(fp)
 80003d8:	108000d0 	cmplti	r2,r2,3
 80003dc:	103ff11e 	bne	r2,zero,80003a4 <__alt_data_end+0xfc0003a4>
		textVGADrawColorText (mystring1, x, 29, 0x01, 0x00);
		usleep (5000);
	}
	for (x = 3; x < 80; x++){
 80003e0:	008000c4 	movi	r2,3
 80003e4:	e0bfe715 	stw	r2,-100(fp)
 80003e8:	00000c06 	br	800041c <main+0x1b0>
		textVGADrawColorText (mystring2, x, 29, 0x01, 0x00);
 80003ec:	e0bfff84 	addi	r2,fp,-2
 80003f0:	d8000015 	stw	zero,0(sp)
 80003f4:	01c00044 	movi	r7,1
 80003f8:	01800744 	movi	r6,29
 80003fc:	e17fe717 	ldw	r5,-100(fp)
 8000400:	1009883a 	mov	r4,r2
 8000404:	80004800 	call	8000480 <textVGADrawColorText>
		usleep (5000);
 8000408:	0104e204 	movi	r4,5000
 800040c:	800bdfc0 	call	800bdfc <usleep>

	for (x = 0; x < 3; x++){
		textVGADrawColorText (mystring1, x, 29, 0x01, 0x00);
		usleep (5000);
	}
	for (x = 3; x < 80; x++){
 8000410:	e0bfe717 	ldw	r2,-100(fp)
 8000414:	10800044 	addi	r2,r2,1
 8000418:	e0bfe715 	stw	r2,-100(fp)
 800041c:	e0bfe717 	ldw	r2,-100(fp)
 8000420:	10801410 	cmplti	r2,r2,80
 8000424:	103ff11e 	bne	r2,zero,80003ec <__alt_data_end+0xfc0003ec>
		textVGADrawColorText (mystring2, x, 29, 0x01, 0x00);
		usleep (5000);
	}

	textVGAColorScreenSaver();
 8000428:	80005940 	call	8000594 <textVGAColorScreenSaver>

	while(1);
 800042c:	003fff06 	br	800042c <__alt_data_end+0xfc00042c>

08000430 <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
 8000430:	defffe04 	addi	sp,sp,-8
 8000434:	df000115 	stw	fp,4(sp)
 8000438:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 800043c:	e03fff15 	stw	zero,-4(fp)
 8000440:	00000706 	br	8000460 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 8000444:	d0e00117 	ldw	r3,-32764(gp)
 8000448:	e0bfff17 	ldw	r2,-4(fp)
 800044c:	1885883a 	add	r2,r3,r2
 8000450:	10000005 	stb	zero,0(r2)
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000454:	e0bfff17 	ldw	r2,-4(fp)
 8000458:	10800044 	addi	r2,r2,1
 800045c:	e0bfff15 	stw	r2,-4(fp)
 8000460:	e0bfff17 	ldw	r2,-4(fp)
 8000464:	1084b010 	cmplti	r2,r2,4800
 8000468:	103ff61e 	bne	r2,zero,8000444 <__alt_data_end+0xfc000444>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 800046c:	0001883a 	nop
 8000470:	e037883a 	mov	sp,fp
 8000474:	df000017 	ldw	fp,0(sp)
 8000478:	dec00104 	addi	sp,sp,4
 800047c:	f800283a 	ret

08000480 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 8000480:	defff704 	addi	sp,sp,-36
 8000484:	dfc00815 	stw	ra,32(sp)
 8000488:	df000715 	stw	fp,28(sp)
 800048c:	dc000615 	stw	r16,24(sp)
 8000490:	df000704 	addi	fp,sp,28
 8000494:	e13ffa15 	stw	r4,-24(fp)
 8000498:	e17ffb15 	stw	r5,-20(fp)
 800049c:	e1bffc15 	stw	r6,-16(fp)
 80004a0:	3807883a 	mov	r3,r7
 80004a4:	e0800217 	ldw	r2,8(fp)
 80004a8:	e0fffd05 	stb	r3,-12(fp)
 80004ac:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 80004b0:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 80004b4:	00002806 	br	8000558 <textVGADrawColorText+0xd8>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 80004b8:	d4200117 	ldw	r16,-32764(gp)
 80004bc:	01401404 	movi	r5,80
 80004c0:	e13ffc17 	ldw	r4,-16(fp)
 80004c4:	80008e80 	call	80008e8 <__mulsi3>
 80004c8:	1007883a 	mov	r3,r2
 80004cc:	e0bffb17 	ldw	r2,-20(fp)
 80004d0:	1887883a 	add	r3,r3,r2
 80004d4:	e0bff917 	ldw	r2,-28(fp)
 80004d8:	1885883a 	add	r2,r3,r2
 80004dc:	1085883a 	add	r2,r2,r2
 80004e0:	1009883a 	mov	r4,r2
 80004e4:	e0bffe03 	ldbu	r2,-8(fp)
 80004e8:	1004913a 	slli	r2,r2,4
 80004ec:	1007883a 	mov	r3,r2
 80004f0:	e0bffd03 	ldbu	r2,-12(fp)
 80004f4:	1884b03a 	or	r2,r3,r2
 80004f8:	1007883a 	mov	r3,r2
 80004fc:	8105883a 	add	r2,r16,r4
 8000500:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i] & ~(0x80); // turn off LSB
 8000504:	d4200117 	ldw	r16,-32764(gp)
 8000508:	01401404 	movi	r5,80
 800050c:	e13ffc17 	ldw	r4,-16(fp)
 8000510:	80008e80 	call	80008e8 <__mulsi3>
 8000514:	1007883a 	mov	r3,r2
 8000518:	e0bffb17 	ldw	r2,-20(fp)
 800051c:	1887883a 	add	r3,r3,r2
 8000520:	e0bff917 	ldw	r2,-28(fp)
 8000524:	1885883a 	add	r2,r3,r2
 8000528:	1085883a 	add	r2,r2,r2
 800052c:	10800044 	addi	r2,r2,1
 8000530:	e0fff917 	ldw	r3,-28(fp)
 8000534:	e13ffa17 	ldw	r4,-24(fp)
 8000538:	20c7883a 	add	r3,r4,r3
 800053c:	18c00003 	ldbu	r3,0(r3)
 8000540:	18c01fcc 	andi	r3,r3,127
 8000544:	8085883a 	add	r2,r16,r2
 8000548:	10c00005 	stb	r3,0(r2)
		i++;
 800054c:	e0bff917 	ldw	r2,-28(fp)
 8000550:	10800044 	addi	r2,r2,1
 8000554:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 8000558:	e0bff917 	ldw	r2,-28(fp)
 800055c:	e0fffa17 	ldw	r3,-24(fp)
 8000560:	1885883a 	add	r2,r3,r2
 8000564:	10800003 	ldbu	r2,0(r2)
 8000568:	10803fcc 	andi	r2,r2,255
 800056c:	1080201c 	xori	r2,r2,128
 8000570:	10bfe004 	addi	r2,r2,-128
 8000574:	103fd01e 	bne	r2,zero,80004b8 <__alt_data_end+0xfc0004b8>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i] & ~(0x80); // turn off LSB
		i++;
	}
}
 8000578:	0001883a 	nop
 800057c:	e6ffff04 	addi	sp,fp,-4
 8000580:	dfc00217 	ldw	ra,8(sp)
 8000584:	df000117 	ldw	fp,4(sp)
 8000588:	dc000017 	ldw	r16,0(sp)
 800058c:	dec00304 	addi	sp,sp,12
 8000590:	f800283a 	ret

08000594 <textVGAColorScreenSaver>:
	// HDL will take it in as 12 LSB
}
*/

void textVGAColorScreenSaver()
{
 8000594:	deffe404 	addi	sp,sp,-112
 8000598:	dfc01b15 	stw	ra,108(sp)
 800059c:	df001a15 	stw	fp,104(sp)
 80005a0:	dc001915 	stw	r16,100(sp)
 80005a4:	df001a04 	addi	fp,sp,104
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 80005a8:	80004300 	call	8000430 <textVGAColorClr>
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	*/
	while (1)
	{
		fg = rand() % 16;
 80005ac:	80009280 	call	8000928 <rand>
 80005b0:	1007883a 	mov	r3,r2
 80005b4:	00a00034 	movhi	r2,32768
 80005b8:	108003c4 	addi	r2,r2,15
 80005bc:	1884703a 	and	r2,r3,r2
 80005c0:	1000040e 	bge	r2,zero,80005d4 <textVGAColorScreenSaver+0x40>
 80005c4:	10bfffc4 	addi	r2,r2,-1
 80005c8:	00fffc04 	movi	r3,-16
 80005cc:	10c4b03a 	or	r2,r2,r3
 80005d0:	10800044 	addi	r2,r2,1
 80005d4:	e0bfe715 	stw	r2,-100(fp)
		bg = rand() % 16;
 80005d8:	80009280 	call	8000928 <rand>
 80005dc:	1007883a 	mov	r3,r2
 80005e0:	00a00034 	movhi	r2,32768
 80005e4:	108003c4 	addi	r2,r2,15
 80005e8:	1884703a 	and	r2,r3,r2
 80005ec:	1000040e 	bge	r2,zero,8000600 <textVGAColorScreenSaver+0x6c>
 80005f0:	10bfffc4 	addi	r2,r2,-1
 80005f4:	00fffc04 	movi	r3,-16
 80005f8:	10c4b03a 	or	r2,r2,r3
 80005fc:	10800044 	addi	r2,r2,1
 8000600:	e0bfe815 	stw	r2,-96(fp)
		while (fg == bg)
 8000604:	00001606 	br	8000660 <textVGAColorScreenSaver+0xcc>
		{
			fg = rand() % 16;
 8000608:	80009280 	call	8000928 <rand>
 800060c:	1007883a 	mov	r3,r2
 8000610:	00a00034 	movhi	r2,32768
 8000614:	108003c4 	addi	r2,r2,15
 8000618:	1884703a 	and	r2,r3,r2
 800061c:	1000040e 	bge	r2,zero,8000630 <textVGAColorScreenSaver+0x9c>
 8000620:	10bfffc4 	addi	r2,r2,-1
 8000624:	00fffc04 	movi	r3,-16
 8000628:	10c4b03a 	or	r2,r2,r3
 800062c:	10800044 	addi	r2,r2,1
 8000630:	e0bfe715 	stw	r2,-100(fp)
			bg = rand() % 16;
 8000634:	80009280 	call	8000928 <rand>
 8000638:	1007883a 	mov	r3,r2
 800063c:	00a00034 	movhi	r2,32768
 8000640:	108003c4 	addi	r2,r2,15
 8000644:	1884703a 	and	r2,r3,r2
 8000648:	1000040e 	bge	r2,zero,800065c <textVGAColorScreenSaver+0xc8>
 800064c:	10bfffc4 	addi	r2,r2,-1
 8000650:	00fffc04 	movi	r3,-16
 8000654:	10c4b03a 	or	r2,r2,r3
 8000658:	10800044 	addi	r2,r2,1
 800065c:	e0bfe815 	stw	r2,-96(fp)
	*/
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 8000660:	e0ffe717 	ldw	r3,-100(fp)
 8000664:	e0bfe817 	ldw	r2,-96(fp)
 8000668:	18bfe726 	beq	r3,r2,8000608 <__alt_data_end+0xfc000608>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 800066c:	014005c4 	movi	r5,23
 8000670:	e13fe717 	ldw	r4,-100(fp)
 8000674:	80008e80 	call	80008e8 <__mulsi3>
 8000678:	1007883a 	mov	r3,r2
 800067c:	00820074 	movhi	r2,2049
 8000680:	10b8fa04 	addi	r2,r2,-7192
 8000684:	18a1883a 	add	r16,r3,r2
 8000688:	014005c4 	movi	r5,23
 800068c:	e13fe817 	ldw	r4,-96(fp)
 8000690:	80008e80 	call	80008e8 <__mulsi3>
 8000694:	1007883a 	mov	r3,r2
 8000698:	00820074 	movhi	r2,2049
 800069c:	10b8fa04 	addi	r2,r2,-7192
 80006a0:	1887883a 	add	r3,r3,r2
 80006a4:	e0bfeb04 	addi	r2,fp,-84
 80006a8:	180f883a 	mov	r7,r3
 80006ac:	800d883a 	mov	r6,r16
 80006b0:	01420074 	movhi	r5,2049
 80006b4:	2977d604 	addi	r5,r5,-8360
 80006b8:	1009883a 	mov	r4,r2
 80006bc:	80009e40 	call	80009e4 <sprintf>
		x = rand() % (80-strlen(color_string));
 80006c0:	80009280 	call	8000928 <rand>
 80006c4:	1021883a 	mov	r16,r2
 80006c8:	e0bfeb04 	addi	r2,fp,-84
 80006cc:	1009883a 	mov	r4,r2
 80006d0:	8000a500 	call	8000a50 <strlen>
 80006d4:	1007883a 	mov	r3,r2
 80006d8:	00801404 	movi	r2,80
 80006dc:	10c5c83a 	sub	r2,r2,r3
 80006e0:	100b883a 	mov	r5,r2
 80006e4:	8009883a 	mov	r4,r16
 80006e8:	80008900 	call	8000890 <__umodsi3>
 80006ec:	e0bfe915 	stw	r2,-92(fp)
		y = rand() % 30;
 80006f0:	80009280 	call	8000928 <rand>
 80006f4:	01400784 	movi	r5,30
 80006f8:	1009883a 	mov	r4,r2
 80006fc:	80007b80 	call	80007b8 <__modsi3>
 8000700:	e0bfea15 	stw	r2,-88(fp)
		//textVGADrawColorText (color_string, x, y, bg, fg);
		textVGADrawColorText (color_string, x, y, 0x00, 0x01);
 8000704:	e0ffeb04 	addi	r3,fp,-84
 8000708:	00800044 	movi	r2,1
 800070c:	d8800015 	stw	r2,0(sp)
 8000710:	000f883a 	mov	r7,zero
 8000714:	e1bfea17 	ldw	r6,-88(fp)
 8000718:	e17fe917 	ldw	r5,-92(fp)
 800071c:	1809883a 	mov	r4,r3
 8000720:	80004800 	call	8000480 <textVGADrawColorText>
		usleep (100000);
 8000724:	010000b4 	movhi	r4,2
 8000728:	2121a804 	addi	r4,r4,-31072
 800072c:	800bdfc0 	call	800bdfc <usleep>
	}
 8000730:	003f9e06 	br	80005ac <__alt_data_end+0xfc0005ac>

08000734 <__divsi3>:
 8000734:	20001b16 	blt	r4,zero,80007a4 <__divsi3+0x70>
 8000738:	000f883a 	mov	r7,zero
 800073c:	28001616 	blt	r5,zero,8000798 <__divsi3+0x64>
 8000740:	200d883a 	mov	r6,r4
 8000744:	29001a2e 	bgeu	r5,r4,80007b0 <__divsi3+0x7c>
 8000748:	00800804 	movi	r2,32
 800074c:	00c00044 	movi	r3,1
 8000750:	00000106 	br	8000758 <__divsi3+0x24>
 8000754:	10000d26 	beq	r2,zero,800078c <__divsi3+0x58>
 8000758:	294b883a 	add	r5,r5,r5
 800075c:	10bfffc4 	addi	r2,r2,-1
 8000760:	18c7883a 	add	r3,r3,r3
 8000764:	293ffb36 	bltu	r5,r4,8000754 <__alt_data_end+0xfc000754>
 8000768:	0005883a 	mov	r2,zero
 800076c:	18000726 	beq	r3,zero,800078c <__divsi3+0x58>
 8000770:	0005883a 	mov	r2,zero
 8000774:	31400236 	bltu	r6,r5,8000780 <__divsi3+0x4c>
 8000778:	314dc83a 	sub	r6,r6,r5
 800077c:	10c4b03a 	or	r2,r2,r3
 8000780:	1806d07a 	srli	r3,r3,1
 8000784:	280ad07a 	srli	r5,r5,1
 8000788:	183ffa1e 	bne	r3,zero,8000774 <__alt_data_end+0xfc000774>
 800078c:	38000126 	beq	r7,zero,8000794 <__divsi3+0x60>
 8000790:	0085c83a 	sub	r2,zero,r2
 8000794:	f800283a 	ret
 8000798:	014bc83a 	sub	r5,zero,r5
 800079c:	39c0005c 	xori	r7,r7,1
 80007a0:	003fe706 	br	8000740 <__alt_data_end+0xfc000740>
 80007a4:	0109c83a 	sub	r4,zero,r4
 80007a8:	01c00044 	movi	r7,1
 80007ac:	003fe306 	br	800073c <__alt_data_end+0xfc00073c>
 80007b0:	00c00044 	movi	r3,1
 80007b4:	003fee06 	br	8000770 <__alt_data_end+0xfc000770>

080007b8 <__modsi3>:
 80007b8:	20001716 	blt	r4,zero,8000818 <__modsi3+0x60>
 80007bc:	000f883a 	mov	r7,zero
 80007c0:	2005883a 	mov	r2,r4
 80007c4:	28001216 	blt	r5,zero,8000810 <__modsi3+0x58>
 80007c8:	2900162e 	bgeu	r5,r4,8000824 <__modsi3+0x6c>
 80007cc:	01800804 	movi	r6,32
 80007d0:	00c00044 	movi	r3,1
 80007d4:	00000106 	br	80007dc <__modsi3+0x24>
 80007d8:	30000a26 	beq	r6,zero,8000804 <__modsi3+0x4c>
 80007dc:	294b883a 	add	r5,r5,r5
 80007e0:	31bfffc4 	addi	r6,r6,-1
 80007e4:	18c7883a 	add	r3,r3,r3
 80007e8:	293ffb36 	bltu	r5,r4,80007d8 <__alt_data_end+0xfc0007d8>
 80007ec:	18000526 	beq	r3,zero,8000804 <__modsi3+0x4c>
 80007f0:	1806d07a 	srli	r3,r3,1
 80007f4:	11400136 	bltu	r2,r5,80007fc <__modsi3+0x44>
 80007f8:	1145c83a 	sub	r2,r2,r5
 80007fc:	280ad07a 	srli	r5,r5,1
 8000800:	183ffb1e 	bne	r3,zero,80007f0 <__alt_data_end+0xfc0007f0>
 8000804:	38000126 	beq	r7,zero,800080c <__modsi3+0x54>
 8000808:	0085c83a 	sub	r2,zero,r2
 800080c:	f800283a 	ret
 8000810:	014bc83a 	sub	r5,zero,r5
 8000814:	003fec06 	br	80007c8 <__alt_data_end+0xfc0007c8>
 8000818:	0109c83a 	sub	r4,zero,r4
 800081c:	01c00044 	movi	r7,1
 8000820:	003fe706 	br	80007c0 <__alt_data_end+0xfc0007c0>
 8000824:	00c00044 	movi	r3,1
 8000828:	003ff106 	br	80007f0 <__alt_data_end+0xfc0007f0>

0800082c <__udivsi3>:
 800082c:	200d883a 	mov	r6,r4
 8000830:	2900152e 	bgeu	r5,r4,8000888 <__udivsi3+0x5c>
 8000834:	28001416 	blt	r5,zero,8000888 <__udivsi3+0x5c>
 8000838:	00800804 	movi	r2,32
 800083c:	00c00044 	movi	r3,1
 8000840:	00000206 	br	800084c <__udivsi3+0x20>
 8000844:	10000e26 	beq	r2,zero,8000880 <__udivsi3+0x54>
 8000848:	28000516 	blt	r5,zero,8000860 <__udivsi3+0x34>
 800084c:	294b883a 	add	r5,r5,r5
 8000850:	10bfffc4 	addi	r2,r2,-1
 8000854:	18c7883a 	add	r3,r3,r3
 8000858:	293ffa36 	bltu	r5,r4,8000844 <__alt_data_end+0xfc000844>
 800085c:	18000826 	beq	r3,zero,8000880 <__udivsi3+0x54>
 8000860:	0005883a 	mov	r2,zero
 8000864:	31400236 	bltu	r6,r5,8000870 <__udivsi3+0x44>
 8000868:	314dc83a 	sub	r6,r6,r5
 800086c:	10c4b03a 	or	r2,r2,r3
 8000870:	1806d07a 	srli	r3,r3,1
 8000874:	280ad07a 	srli	r5,r5,1
 8000878:	183ffa1e 	bne	r3,zero,8000864 <__alt_data_end+0xfc000864>
 800087c:	f800283a 	ret
 8000880:	0005883a 	mov	r2,zero
 8000884:	f800283a 	ret
 8000888:	00c00044 	movi	r3,1
 800088c:	003ff406 	br	8000860 <__alt_data_end+0xfc000860>

08000890 <__umodsi3>:
 8000890:	2005883a 	mov	r2,r4
 8000894:	2900122e 	bgeu	r5,r4,80008e0 <__umodsi3+0x50>
 8000898:	28001116 	blt	r5,zero,80008e0 <__umodsi3+0x50>
 800089c:	01800804 	movi	r6,32
 80008a0:	00c00044 	movi	r3,1
 80008a4:	00000206 	br	80008b0 <__umodsi3+0x20>
 80008a8:	30000c26 	beq	r6,zero,80008dc <__umodsi3+0x4c>
 80008ac:	28000516 	blt	r5,zero,80008c4 <__umodsi3+0x34>
 80008b0:	294b883a 	add	r5,r5,r5
 80008b4:	31bfffc4 	addi	r6,r6,-1
 80008b8:	18c7883a 	add	r3,r3,r3
 80008bc:	293ffa36 	bltu	r5,r4,80008a8 <__alt_data_end+0xfc0008a8>
 80008c0:	18000626 	beq	r3,zero,80008dc <__umodsi3+0x4c>
 80008c4:	1806d07a 	srli	r3,r3,1
 80008c8:	11400136 	bltu	r2,r5,80008d0 <__umodsi3+0x40>
 80008cc:	1145c83a 	sub	r2,r2,r5
 80008d0:	280ad07a 	srli	r5,r5,1
 80008d4:	183ffb1e 	bne	r3,zero,80008c4 <__alt_data_end+0xfc0008c4>
 80008d8:	f800283a 	ret
 80008dc:	f800283a 	ret
 80008e0:	00c00044 	movi	r3,1
 80008e4:	003ff706 	br	80008c4 <__alt_data_end+0xfc0008c4>

080008e8 <__mulsi3>:
 80008e8:	0005883a 	mov	r2,zero
 80008ec:	20000726 	beq	r4,zero,800090c <__mulsi3+0x24>
 80008f0:	20c0004c 	andi	r3,r4,1
 80008f4:	2008d07a 	srli	r4,r4,1
 80008f8:	18000126 	beq	r3,zero,8000900 <__mulsi3+0x18>
 80008fc:	1145883a 	add	r2,r2,r5
 8000900:	294b883a 	add	r5,r5,r5
 8000904:	203ffa1e 	bne	r4,zero,80008f0 <__alt_data_end+0xfc0008f0>
 8000908:	f800283a 	ret
 800090c:	f800283a 	ret

08000910 <srand>:
 8000910:	00820074 	movhi	r2,2049
 8000914:	10800404 	addi	r2,r2,16
 8000918:	10800017 	ldw	r2,0(r2)
 800091c:	11002915 	stw	r4,164(r2)
 8000920:	10002a15 	stw	zero,168(r2)
 8000924:	f800283a 	ret

08000928 <rand>:
 8000928:	00820074 	movhi	r2,2049
 800092c:	defffe04 	addi	sp,sp,-8
 8000930:	10800404 	addi	r2,r2,16
 8000934:	dc000015 	stw	r16,0(sp)
 8000938:	14000017 	ldw	r16,0(r2)
 800093c:	dfc00115 	stw	ra,4(sp)
 8000940:	01932574 	movhi	r6,19605
 8000944:	81002917 	ldw	r4,164(r16)
 8000948:	81402a17 	ldw	r5,168(r16)
 800094c:	01d614b4 	movhi	r7,22610
 8000950:	319fcb44 	addi	r6,r6,32557
 8000954:	39fd0b44 	addi	r7,r7,-3027
 8000958:	800862c0 	call	800862c <__muldi3>
 800095c:	11000044 	addi	r4,r2,1
 8000960:	2085803a 	cmpltu	r2,r4,r2
 8000964:	10c7883a 	add	r3,r2,r3
 8000968:	00a00034 	movhi	r2,32768
 800096c:	10bfffc4 	addi	r2,r2,-1
 8000970:	1884703a 	and	r2,r3,r2
 8000974:	81002915 	stw	r4,164(r16)
 8000978:	80c02a15 	stw	r3,168(r16)
 800097c:	dfc00117 	ldw	ra,4(sp)
 8000980:	dc000017 	ldw	r16,0(sp)
 8000984:	dec00204 	addi	sp,sp,8
 8000988:	f800283a 	ret

0800098c <_sprintf_r>:
 800098c:	deffe404 	addi	sp,sp,-112
 8000990:	2807883a 	mov	r3,r5
 8000994:	dfc01a15 	stw	ra,104(sp)
 8000998:	d9c01b15 	stw	r7,108(sp)
 800099c:	00a00034 	movhi	r2,32768
 80009a0:	10bfffc4 	addi	r2,r2,-1
 80009a4:	02008204 	movi	r8,520
 80009a8:	d8800215 	stw	r2,8(sp)
 80009ac:	d8800515 	stw	r2,20(sp)
 80009b0:	d9c01b04 	addi	r7,sp,108
 80009b4:	d80b883a 	mov	r5,sp
 80009b8:	00bfffc4 	movi	r2,-1
 80009bc:	d8c00015 	stw	r3,0(sp)
 80009c0:	d8c00415 	stw	r3,16(sp)
 80009c4:	da00030d 	sth	r8,12(sp)
 80009c8:	d880038d 	sth	r2,14(sp)
 80009cc:	8000ae80 	call	8000ae8 <___svfprintf_internal_r>
 80009d0:	d8c00017 	ldw	r3,0(sp)
 80009d4:	18000005 	stb	zero,0(r3)
 80009d8:	dfc01a17 	ldw	ra,104(sp)
 80009dc:	dec01c04 	addi	sp,sp,112
 80009e0:	f800283a 	ret

080009e4 <sprintf>:
 80009e4:	deffe304 	addi	sp,sp,-116
 80009e8:	2007883a 	mov	r3,r4
 80009ec:	dfc01a15 	stw	ra,104(sp)
 80009f0:	d9801b15 	stw	r6,108(sp)
 80009f4:	d9c01c15 	stw	r7,112(sp)
 80009f8:	01020074 	movhi	r4,2049
 80009fc:	21000404 	addi	r4,r4,16
 8000a00:	21000017 	ldw	r4,0(r4)
 8000a04:	00a00034 	movhi	r2,32768
 8000a08:	10bfffc4 	addi	r2,r2,-1
 8000a0c:	280d883a 	mov	r6,r5
 8000a10:	02008204 	movi	r8,520
 8000a14:	d8800215 	stw	r2,8(sp)
 8000a18:	d8800515 	stw	r2,20(sp)
 8000a1c:	d9c01b04 	addi	r7,sp,108
 8000a20:	d80b883a 	mov	r5,sp
 8000a24:	00bfffc4 	movi	r2,-1
 8000a28:	d8c00015 	stw	r3,0(sp)
 8000a2c:	d8c00415 	stw	r3,16(sp)
 8000a30:	da00030d 	sth	r8,12(sp)
 8000a34:	d880038d 	sth	r2,14(sp)
 8000a38:	8000ae80 	call	8000ae8 <___svfprintf_internal_r>
 8000a3c:	d8c00017 	ldw	r3,0(sp)
 8000a40:	18000005 	stb	zero,0(r3)
 8000a44:	dfc01a17 	ldw	ra,104(sp)
 8000a48:	dec01d04 	addi	sp,sp,116
 8000a4c:	f800283a 	ret

08000a50 <strlen>:
 8000a50:	208000cc 	andi	r2,r4,3
 8000a54:	10002026 	beq	r2,zero,8000ad8 <strlen+0x88>
 8000a58:	20800007 	ldb	r2,0(r4)
 8000a5c:	10002026 	beq	r2,zero,8000ae0 <strlen+0x90>
 8000a60:	2005883a 	mov	r2,r4
 8000a64:	00000206 	br	8000a70 <strlen+0x20>
 8000a68:	10c00007 	ldb	r3,0(r2)
 8000a6c:	18001826 	beq	r3,zero,8000ad0 <strlen+0x80>
 8000a70:	10800044 	addi	r2,r2,1
 8000a74:	10c000cc 	andi	r3,r2,3
 8000a78:	183ffb1e 	bne	r3,zero,8000a68 <__alt_data_end+0xfc000a68>
 8000a7c:	10c00017 	ldw	r3,0(r2)
 8000a80:	01ffbff4 	movhi	r7,65279
 8000a84:	39ffbfc4 	addi	r7,r7,-257
 8000a88:	00ca303a 	nor	r5,zero,r3
 8000a8c:	01a02074 	movhi	r6,32897
 8000a90:	19c7883a 	add	r3,r3,r7
 8000a94:	31a02004 	addi	r6,r6,-32640
 8000a98:	1946703a 	and	r3,r3,r5
 8000a9c:	1986703a 	and	r3,r3,r6
 8000aa0:	1800091e 	bne	r3,zero,8000ac8 <strlen+0x78>
 8000aa4:	10800104 	addi	r2,r2,4
 8000aa8:	10c00017 	ldw	r3,0(r2)
 8000aac:	19cb883a 	add	r5,r3,r7
 8000ab0:	00c6303a 	nor	r3,zero,r3
 8000ab4:	28c6703a 	and	r3,r5,r3
 8000ab8:	1986703a 	and	r3,r3,r6
 8000abc:	183ff926 	beq	r3,zero,8000aa4 <__alt_data_end+0xfc000aa4>
 8000ac0:	00000106 	br	8000ac8 <strlen+0x78>
 8000ac4:	10800044 	addi	r2,r2,1
 8000ac8:	10c00007 	ldb	r3,0(r2)
 8000acc:	183ffd1e 	bne	r3,zero,8000ac4 <__alt_data_end+0xfc000ac4>
 8000ad0:	1105c83a 	sub	r2,r2,r4
 8000ad4:	f800283a 	ret
 8000ad8:	2005883a 	mov	r2,r4
 8000adc:	003fe706 	br	8000a7c <__alt_data_end+0xfc000a7c>
 8000ae0:	0005883a 	mov	r2,zero
 8000ae4:	f800283a 	ret

08000ae8 <___svfprintf_internal_r>:
 8000ae8:	deffb704 	addi	sp,sp,-292
 8000aec:	dfc04815 	stw	ra,288(sp)
 8000af0:	ddc04615 	stw	r23,280(sp)
 8000af4:	d9402d15 	stw	r5,180(sp)
 8000af8:	d9003915 	stw	r4,228(sp)
 8000afc:	302f883a 	mov	r23,r6
 8000b00:	d9c02e15 	stw	r7,184(sp)
 8000b04:	df004715 	stw	fp,284(sp)
 8000b08:	dd804515 	stw	r22,276(sp)
 8000b0c:	dd404415 	stw	r21,272(sp)
 8000b10:	dd004315 	stw	r20,268(sp)
 8000b14:	dcc04215 	stw	r19,264(sp)
 8000b18:	dc804115 	stw	r18,260(sp)
 8000b1c:	dc404015 	stw	r17,256(sp)
 8000b20:	dc003f15 	stw	r16,252(sp)
 8000b24:	80047000 	call	8004700 <_localeconv_r>
 8000b28:	10800017 	ldw	r2,0(r2)
 8000b2c:	1009883a 	mov	r4,r2
 8000b30:	d8803415 	stw	r2,208(sp)
 8000b34:	8000a500 	call	8000a50 <strlen>
 8000b38:	d8c02d17 	ldw	r3,180(sp)
 8000b3c:	d8803815 	stw	r2,224(sp)
 8000b40:	1880030b 	ldhu	r2,12(r3)
 8000b44:	1080200c 	andi	r2,r2,128
 8000b48:	10000226 	beq	r2,zero,8000b54 <___svfprintf_internal_r+0x6c>
 8000b4c:	18800417 	ldw	r2,16(r3)
 8000b50:	1006b126 	beq	r2,zero,8002618 <___svfprintf_internal_r+0x1b30>
 8000b54:	dcc03917 	ldw	r19,228(sp)
 8000b58:	d8c00404 	addi	r3,sp,16
 8000b5c:	05420074 	movhi	r21,2049
 8000b60:	d9001e04 	addi	r4,sp,120
 8000b64:	ad77ef84 	addi	r21,r21,-8258
 8000b68:	d8c01e15 	stw	r3,120(sp)
 8000b6c:	d8002015 	stw	zero,128(sp)
 8000b70:	d8001f15 	stw	zero,124(sp)
 8000b74:	d8003315 	stw	zero,204(sp)
 8000b78:	d8003615 	stw	zero,216(sp)
 8000b7c:	d8003715 	stw	zero,220(sp)
 8000b80:	1811883a 	mov	r8,r3
 8000b84:	d8003a15 	stw	zero,232(sp)
 8000b88:	d8003b15 	stw	zero,236(sp)
 8000b8c:	d8002f15 	stw	zero,188(sp)
 8000b90:	d9002815 	stw	r4,160(sp)
 8000b94:	b8800007 	ldb	r2,0(r23)
 8000b98:	10027726 	beq	r2,zero,8001578 <___svfprintf_internal_r+0xa90>
 8000b9c:	00c00944 	movi	r3,37
 8000ba0:	b823883a 	mov	r17,r23
 8000ba4:	10c0021e 	bne	r2,r3,8000bb0 <___svfprintf_internal_r+0xc8>
 8000ba8:	00001406 	br	8000bfc <___svfprintf_internal_r+0x114>
 8000bac:	10c00326 	beq	r2,r3,8000bbc <___svfprintf_internal_r+0xd4>
 8000bb0:	8c400044 	addi	r17,r17,1
 8000bb4:	88800007 	ldb	r2,0(r17)
 8000bb8:	103ffc1e 	bne	r2,zero,8000bac <__alt_data_end+0xfc000bac>
 8000bbc:	8de1c83a 	sub	r16,r17,r23
 8000bc0:	80000e26 	beq	r16,zero,8000bfc <___svfprintf_internal_r+0x114>
 8000bc4:	d8c02017 	ldw	r3,128(sp)
 8000bc8:	d8801f17 	ldw	r2,124(sp)
 8000bcc:	45c00015 	stw	r23,0(r8)
 8000bd0:	1c07883a 	add	r3,r3,r16
 8000bd4:	10800044 	addi	r2,r2,1
 8000bd8:	d8c02015 	stw	r3,128(sp)
 8000bdc:	44000115 	stw	r16,4(r8)
 8000be0:	d8801f15 	stw	r2,124(sp)
 8000be4:	00c001c4 	movi	r3,7
 8000be8:	18809916 	blt	r3,r2,8000e50 <___svfprintf_internal_r+0x368>
 8000bec:	42000204 	addi	r8,r8,8
 8000bf0:	d9402f17 	ldw	r5,188(sp)
 8000bf4:	2c0b883a 	add	r5,r5,r16
 8000bf8:	d9402f15 	stw	r5,188(sp)
 8000bfc:	88800007 	ldb	r2,0(r17)
 8000c00:	10009a26 	beq	r2,zero,8000e6c <___svfprintf_internal_r+0x384>
 8000c04:	8dc00044 	addi	r23,r17,1
 8000c08:	8c400047 	ldb	r17,1(r17)
 8000c0c:	0021883a 	mov	r16,zero
 8000c10:	00bfffc4 	movi	r2,-1
 8000c14:	0025883a 	mov	r18,zero
 8000c18:	dc002905 	stb	r16,164(sp)
 8000c1c:	d8002785 	stb	zero,158(sp)
 8000c20:	d8002b05 	stb	zero,172(sp)
 8000c24:	d8802a15 	stw	r2,168(sp)
 8000c28:	d8003115 	stw	zero,196(sp)
 8000c2c:	05001604 	movi	r20,88
 8000c30:	05800244 	movi	r22,9
 8000c34:	4039883a 	mov	fp,r8
 8000c38:	9021883a 	mov	r16,r18
 8000c3c:	bdc00044 	addi	r23,r23,1
 8000c40:	88bff804 	addi	r2,r17,-32
 8000c44:	a0831e36 	bltu	r20,r2,80018c0 <___svfprintf_internal_r+0xdd8>
 8000c48:	100490ba 	slli	r2,r2,2
 8000c4c:	00c20034 	movhi	r3,2048
 8000c50:	18c31804 	addi	r3,r3,3168
 8000c54:	10c5883a 	add	r2,r2,r3
 8000c58:	10800017 	ldw	r2,0(r2)
 8000c5c:	1000683a 	jmp	r2
 8000c60:	08001808 	cmpgei	zero,at,96
 8000c64:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c68:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c6c:	080017fc 	xorhi	zero,at,95
 8000c70:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c74:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c78:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c7c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c80:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c84:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c88:	08000ec8 	cmpgei	zero,at,59
 8000c8c:	0800170c 	andi	zero,at,92
 8000c90:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000c94:	08000dd4 	ori	zero,at,55
 8000c98:	08000eec 	andhi	zero,at,59
 8000c9c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000ca0:	08000f78 	rdprs	zero,at,61
 8000ca4:	08000f3c 	xorhi	zero,at,60
 8000ca8:	08000f3c 	xorhi	zero,at,60
 8000cac:	08000f3c 	xorhi	zero,at,60
 8000cb0:	08000f3c 	xorhi	zero,at,60
 8000cb4:	08000f3c 	xorhi	zero,at,60
 8000cb8:	08000f3c 	xorhi	zero,at,60
 8000cbc:	08000f3c 	xorhi	zero,at,60
 8000cc0:	08000f3c 	xorhi	zero,at,60
 8000cc4:	08000f3c 	xorhi	zero,at,60
 8000cc8:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000ccc:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000cd0:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000cd4:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000cd8:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000cdc:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000ce0:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000ce4:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000ce8:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000cec:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000cf0:	0800103c 	xorhi	zero,at,64
 8000cf4:	08000f84 	addi	zero,at,62
 8000cf8:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000cfc:	08000f84 	addi	zero,at,62
 8000d00:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d04:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d08:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d0c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d10:	08001030 	cmpltui	zero,at,64
 8000d14:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d18:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d1c:	08001104 	addi	zero,at,68
 8000d20:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d24:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d28:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d2c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d30:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d34:	08001580 	call	800158 <__alt_mem_onchip_memory2_0+0x800158>
 8000d38:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d3c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d40:	080015ec 	andhi	zero,at,87
 8000d44:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d48:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d4c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d50:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d54:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d58:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d5c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d60:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d64:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d68:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d6c:	080016a8 	cmpgeui	zero,at,90
 8000d70:	08001828 	cmpgeui	zero,at,96
 8000d74:	08000f84 	addi	zero,at,62
 8000d78:	08000f84 	addi	zero,at,62
 8000d7c:	08000f84 	addi	zero,at,62
 8000d80:	0800189c 	xori	zero,at,98
 8000d84:	08001828 	cmpgeui	zero,at,96
 8000d88:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d8c:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d90:	08001848 	cmpgei	zero,at,97
 8000d94:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000d98:	0800185c 	xori	zero,at,97
 8000d9c:	080016ec 	andhi	zero,at,91
 8000da0:	08000de0 	cmpeqi	zero,at,55
 8000da4:	08001724 	muli	zero,at,92
 8000da8:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000dac:	08001730 	cmpltui	zero,at,92
 8000db0:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000db4:	08001794 	ori	zero,at,94
 8000db8:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000dbc:	080018c0 	call	80018c <__alt_mem_onchip_memory2_0+0x80018c>
 8000dc0:	080017b4 	orhi	zero,at,94
 8000dc4:	d8c03117 	ldw	r3,196(sp)
 8000dc8:	d8802e15 	stw	r2,184(sp)
 8000dcc:	00c7c83a 	sub	r3,zero,r3
 8000dd0:	d8c03115 	stw	r3,196(sp)
 8000dd4:	84000114 	ori	r16,r16,4
 8000dd8:	bc400007 	ldb	r17,0(r23)
 8000ddc:	003f9706 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8000de0:	00800c04 	movi	r2,48
 8000de4:	d8802705 	stb	r2,156(sp)
 8000de8:	00801e04 	movi	r2,120
 8000dec:	d8802745 	stb	r2,157(sp)
 8000df0:	d9002a17 	ldw	r4,168(sp)
 8000df4:	d8802e17 	ldw	r2,184(sp)
 8000df8:	d8002785 	stb	zero,158(sp)
 8000dfc:	e011883a 	mov	r8,fp
 8000e00:	10c00104 	addi	r3,r2,4
 8000e04:	15000017 	ldw	r20,0(r2)
 8000e08:	002d883a 	mov	r22,zero
 8000e0c:	80800094 	ori	r2,r16,2
 8000e10:	2002b616 	blt	r4,zero,80018ec <___svfprintf_internal_r+0xe04>
 8000e14:	00bfdfc4 	movi	r2,-129
 8000e18:	80a4703a 	and	r18,r16,r2
 8000e1c:	d8c02e15 	stw	r3,184(sp)
 8000e20:	94800094 	ori	r18,r18,2
 8000e24:	a002a01e 	bne	r20,zero,80018a8 <___svfprintf_internal_r+0xdc0>
 8000e28:	01420074 	movhi	r5,2049
 8000e2c:	2977e804 	addi	r5,r5,-8288
 8000e30:	d9403a15 	stw	r5,232(sp)
 8000e34:	04401e04 	movi	r17,120
 8000e38:	d8c02a17 	ldw	r3,168(sp)
 8000e3c:	0039883a 	mov	fp,zero
 8000e40:	1801e626 	beq	r3,zero,80015dc <___svfprintf_internal_r+0xaf4>
 8000e44:	0029883a 	mov	r20,zero
 8000e48:	002d883a 	mov	r22,zero
 8000e4c:	00020506 	br	8001664 <___svfprintf_internal_r+0xb7c>
 8000e50:	d9402d17 	ldw	r5,180(sp)
 8000e54:	d9801e04 	addi	r6,sp,120
 8000e58:	9809883a 	mov	r4,r19
 8000e5c:	80063c40 	call	80063c4 <__ssprint_r>
 8000e60:	1000081e 	bne	r2,zero,8000e84 <___svfprintf_internal_r+0x39c>
 8000e64:	da000404 	addi	r8,sp,16
 8000e68:	003f6106 	br	8000bf0 <__alt_data_end+0xfc000bf0>
 8000e6c:	d8802017 	ldw	r2,128(sp)
 8000e70:	10000426 	beq	r2,zero,8000e84 <___svfprintf_internal_r+0x39c>
 8000e74:	d9402d17 	ldw	r5,180(sp)
 8000e78:	d9003917 	ldw	r4,228(sp)
 8000e7c:	d9801e04 	addi	r6,sp,120
 8000e80:	80063c40 	call	80063c4 <__ssprint_r>
 8000e84:	d8802d17 	ldw	r2,180(sp)
 8000e88:	10c0030b 	ldhu	r3,12(r2)
 8000e8c:	d8802f17 	ldw	r2,188(sp)
 8000e90:	18c0100c 	andi	r3,r3,64
 8000e94:	1806251e 	bne	r3,zero,800272c <___svfprintf_internal_r+0x1c44>
 8000e98:	dfc04817 	ldw	ra,288(sp)
 8000e9c:	df004717 	ldw	fp,284(sp)
 8000ea0:	ddc04617 	ldw	r23,280(sp)
 8000ea4:	dd804517 	ldw	r22,276(sp)
 8000ea8:	dd404417 	ldw	r21,272(sp)
 8000eac:	dd004317 	ldw	r20,268(sp)
 8000eb0:	dcc04217 	ldw	r19,264(sp)
 8000eb4:	dc804117 	ldw	r18,260(sp)
 8000eb8:	dc404017 	ldw	r17,256(sp)
 8000ebc:	dc003f17 	ldw	r16,252(sp)
 8000ec0:	dec04904 	addi	sp,sp,292
 8000ec4:	f800283a 	ret
 8000ec8:	d9002e17 	ldw	r4,184(sp)
 8000ecc:	d9402e17 	ldw	r5,184(sp)
 8000ed0:	21000017 	ldw	r4,0(r4)
 8000ed4:	28800104 	addi	r2,r5,4
 8000ed8:	d9003115 	stw	r4,196(sp)
 8000edc:	203fb916 	blt	r4,zero,8000dc4 <__alt_data_end+0xfc000dc4>
 8000ee0:	d8802e15 	stw	r2,184(sp)
 8000ee4:	bc400007 	ldb	r17,0(r23)
 8000ee8:	003f5406 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8000eec:	bc400007 	ldb	r17,0(r23)
 8000ef0:	01000a84 	movi	r4,42
 8000ef4:	b8c00044 	addi	r3,r23,1
 8000ef8:	89076926 	beq	r17,r4,8002ca0 <___svfprintf_internal_r+0x21b8>
 8000efc:	8cbff404 	addi	r18,r17,-48
 8000f00:	b486b936 	bltu	r22,r18,80029e8 <___svfprintf_internal_r+0x1f00>
 8000f04:	0009883a 	mov	r4,zero
 8000f08:	1823883a 	mov	r17,r3
 8000f0c:	01400284 	movi	r5,10
 8000f10:	80008e80 	call	80008e8 <__mulsi3>
 8000f14:	88c00007 	ldb	r3,0(r17)
 8000f18:	1489883a 	add	r4,r2,r18
 8000f1c:	8dc00044 	addi	r23,r17,1
 8000f20:	1cbff404 	addi	r18,r3,-48
 8000f24:	b823883a 	mov	r17,r23
 8000f28:	b4bff82e 	bgeu	r22,r18,8000f0c <__alt_data_end+0xfc000f0c>
 8000f2c:	1823883a 	mov	r17,r3
 8000f30:	20060416 	blt	r4,zero,8002744 <___svfprintf_internal_r+0x1c5c>
 8000f34:	d9002a15 	stw	r4,168(sp)
 8000f38:	003f4106 	br	8000c40 <__alt_data_end+0xfc000c40>
 8000f3c:	8cbff404 	addi	r18,r17,-48
 8000f40:	d8003115 	stw	zero,196(sp)
 8000f44:	0009883a 	mov	r4,zero
 8000f48:	b823883a 	mov	r17,r23
 8000f4c:	01400284 	movi	r5,10
 8000f50:	80008e80 	call	80008e8 <__mulsi3>
 8000f54:	88c00007 	ldb	r3,0(r17)
 8000f58:	9089883a 	add	r4,r18,r2
 8000f5c:	bdc00044 	addi	r23,r23,1
 8000f60:	1cbff404 	addi	r18,r3,-48
 8000f64:	b823883a 	mov	r17,r23
 8000f68:	b4bff82e 	bgeu	r22,r18,8000f4c <__alt_data_end+0xfc000f4c>
 8000f6c:	1823883a 	mov	r17,r3
 8000f70:	d9003115 	stw	r4,196(sp)
 8000f74:	003f3206 	br	8000c40 <__alt_data_end+0xfc000c40>
 8000f78:	84002014 	ori	r16,r16,128
 8000f7c:	bc400007 	ldb	r17,0(r23)
 8000f80:	003f2e06 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8000f84:	8025883a 	mov	r18,r16
 8000f88:	dc002903 	ldbu	r16,164(sp)
 8000f8c:	e011883a 	mov	r8,fp
 8000f90:	84003fcc 	andi	r16,r16,255
 8000f94:	8007721e 	bne	r16,zero,8002d60 <___svfprintf_internal_r+0x2278>
 8000f98:	9080020c 	andi	r2,r18,8
 8000f9c:	1004a526 	beq	r2,zero,8002234 <___svfprintf_internal_r+0x174c>
 8000fa0:	d9002e17 	ldw	r4,184(sp)
 8000fa4:	d9402e17 	ldw	r5,184(sp)
 8000fa8:	d8802e17 	ldw	r2,184(sp)
 8000fac:	21000017 	ldw	r4,0(r4)
 8000fb0:	29400117 	ldw	r5,4(r5)
 8000fb4:	10800204 	addi	r2,r2,8
 8000fb8:	d9003615 	stw	r4,216(sp)
 8000fbc:	d9403715 	stw	r5,220(sp)
 8000fc0:	d8802e15 	stw	r2,184(sp)
 8000fc4:	d9003617 	ldw	r4,216(sp)
 8000fc8:	d9403717 	ldw	r5,220(sp)
 8000fcc:	da003e15 	stw	r8,248(sp)
 8000fd0:	04000044 	movi	r16,1
 8000fd4:	80062200 	call	8006220 <__fpclassifyd>
 8000fd8:	da003e17 	ldw	r8,248(sp)
 8000fdc:	1404731e 	bne	r2,r16,80021ac <___svfprintf_internal_r+0x16c4>
 8000fe0:	d9003617 	ldw	r4,216(sp)
 8000fe4:	d9403717 	ldw	r5,220(sp)
 8000fe8:	000d883a 	mov	r6,zero
 8000fec:	000f883a 	mov	r7,zero
 8000ff0:	800a6d80 	call	800a6d8 <__ledf2>
 8000ff4:	da003e17 	ldw	r8,248(sp)
 8000ff8:	10061b16 	blt	r2,zero,8002868 <___svfprintf_internal_r+0x1d80>
 8000ffc:	df002783 	ldbu	fp,158(sp)
 8001000:	008011c4 	movi	r2,71
 8001004:	1445810e 	bge	r2,r17,800260c <___svfprintf_internal_r+0x1b24>
 8001008:	04020074 	movhi	r16,2049
 800100c:	8437e004 	addi	r16,r16,-8320
 8001010:	00c000c4 	movi	r3,3
 8001014:	00bfdfc4 	movi	r2,-129
 8001018:	d8c02915 	stw	r3,164(sp)
 800101c:	90a4703a 	and	r18,r18,r2
 8001020:	d8c02b15 	stw	r3,172(sp)
 8001024:	d8002a15 	stw	zero,168(sp)
 8001028:	d8003215 	stw	zero,200(sp)
 800102c:	00006c06 	br	80011e0 <___svfprintf_internal_r+0x6f8>
 8001030:	84000214 	ori	r16,r16,8
 8001034:	bc400007 	ldb	r17,0(r23)
 8001038:	003f0006 	br	8000c3c <__alt_data_end+0xfc000c3c>
 800103c:	8025883a 	mov	r18,r16
 8001040:	dc002903 	ldbu	r16,164(sp)
 8001044:	e011883a 	mov	r8,fp
 8001048:	84003fcc 	andi	r16,r16,255
 800104c:	80073f1e 	bne	r16,zero,8002d4c <___svfprintf_internal_r+0x2264>
 8001050:	94800414 	ori	r18,r18,16
 8001054:	9080080c 	andi	r2,r18,32
 8001058:	1003bb26 	beq	r2,zero,8001f48 <___svfprintf_internal_r+0x1460>
 800105c:	d9002e17 	ldw	r4,184(sp)
 8001060:	20800117 	ldw	r2,4(r4)
 8001064:	25000017 	ldw	r20,0(r4)
 8001068:	21000204 	addi	r4,r4,8
 800106c:	d9002e15 	stw	r4,184(sp)
 8001070:	102d883a 	mov	r22,r2
 8001074:	1003bd16 	blt	r2,zero,8001f6c <___svfprintf_internal_r+0x1484>
 8001078:	d9002a17 	ldw	r4,168(sp)
 800107c:	df002783 	ldbu	fp,158(sp)
 8001080:	2003d016 	blt	r4,zero,8001fc4 <___svfprintf_internal_r+0x14dc>
 8001084:	00ffdfc4 	movi	r3,-129
 8001088:	a584b03a 	or	r2,r20,r22
 800108c:	90e4703a 	and	r18,r18,r3
 8001090:	10015026 	beq	r2,zero,80015d4 <___svfprintf_internal_r+0xaec>
 8001094:	b0037026 	beq	r22,zero,8001e58 <___svfprintf_internal_r+0x1370>
 8001098:	dc402915 	stw	r17,164(sp)
 800109c:	dc001e04 	addi	r16,sp,120
 80010a0:	b023883a 	mov	r17,r22
 80010a4:	402d883a 	mov	r22,r8
 80010a8:	a009883a 	mov	r4,r20
 80010ac:	880b883a 	mov	r5,r17
 80010b0:	01800284 	movi	r6,10
 80010b4:	000f883a 	mov	r7,zero
 80010b8:	8008d340 	call	8008d34 <__umoddi3>
 80010bc:	10800c04 	addi	r2,r2,48
 80010c0:	843fffc4 	addi	r16,r16,-1
 80010c4:	a009883a 	mov	r4,r20
 80010c8:	880b883a 	mov	r5,r17
 80010cc:	80800005 	stb	r2,0(r16)
 80010d0:	01800284 	movi	r6,10
 80010d4:	000f883a 	mov	r7,zero
 80010d8:	80087380 	call	8008738 <__udivdi3>
 80010dc:	1029883a 	mov	r20,r2
 80010e0:	10c4b03a 	or	r2,r2,r3
 80010e4:	1823883a 	mov	r17,r3
 80010e8:	103fef1e 	bne	r2,zero,80010a8 <__alt_data_end+0xfc0010a8>
 80010ec:	d8c02817 	ldw	r3,160(sp)
 80010f0:	dc402917 	ldw	r17,164(sp)
 80010f4:	b011883a 	mov	r8,r22
 80010f8:	1c07c83a 	sub	r3,r3,r16
 80010fc:	d8c02b15 	stw	r3,172(sp)
 8001100:	00003106 	br	80011c8 <___svfprintf_internal_r+0x6e0>
 8001104:	8025883a 	mov	r18,r16
 8001108:	dc002903 	ldbu	r16,164(sp)
 800110c:	e011883a 	mov	r8,fp
 8001110:	84003fcc 	andi	r16,r16,255
 8001114:	80070a1e 	bne	r16,zero,8002d40 <___svfprintf_internal_r+0x2258>
 8001118:	94800414 	ori	r18,r18,16
 800111c:	9080080c 	andi	r2,r18,32
 8001120:	1002f626 	beq	r2,zero,8001cfc <___svfprintf_internal_r+0x1214>
 8001124:	d9002e17 	ldw	r4,184(sp)
 8001128:	d9402a17 	ldw	r5,168(sp)
 800112c:	d8002785 	stb	zero,158(sp)
 8001130:	20800204 	addi	r2,r4,8
 8001134:	25000017 	ldw	r20,0(r4)
 8001138:	25800117 	ldw	r22,4(r4)
 800113c:	28043716 	blt	r5,zero,800221c <___svfprintf_internal_r+0x1734>
 8001140:	013fdfc4 	movi	r4,-129
 8001144:	a586b03a 	or	r3,r20,r22
 8001148:	d8802e15 	stw	r2,184(sp)
 800114c:	9124703a 	and	r18,r18,r4
 8001150:	1802f71e 	bne	r3,zero,8001d30 <___svfprintf_internal_r+0x1248>
 8001154:	d9402a17 	ldw	r5,168(sp)
 8001158:	0039883a 	mov	fp,zero
 800115c:	2806df26 	beq	r5,zero,8002cdc <___svfprintf_internal_r+0x21f4>
 8001160:	0029883a 	mov	r20,zero
 8001164:	002d883a 	mov	r22,zero
 8001168:	dc001e04 	addi	r16,sp,120
 800116c:	a006d0fa 	srli	r3,r20,3
 8001170:	b008977a 	slli	r4,r22,29
 8001174:	b02cd0fa 	srli	r22,r22,3
 8001178:	a50001cc 	andi	r20,r20,7
 800117c:	a0800c04 	addi	r2,r20,48
 8001180:	843fffc4 	addi	r16,r16,-1
 8001184:	20e8b03a 	or	r20,r4,r3
 8001188:	80800005 	stb	r2,0(r16)
 800118c:	a586b03a 	or	r3,r20,r22
 8001190:	183ff61e 	bne	r3,zero,800116c <__alt_data_end+0xfc00116c>
 8001194:	90c0004c 	andi	r3,r18,1
 8001198:	18013f26 	beq	r3,zero,8001698 <___svfprintf_internal_r+0xbb0>
 800119c:	10803fcc 	andi	r2,r2,255
 80011a0:	1080201c 	xori	r2,r2,128
 80011a4:	10bfe004 	addi	r2,r2,-128
 80011a8:	00c00c04 	movi	r3,48
 80011ac:	10c13a26 	beq	r2,r3,8001698 <___svfprintf_internal_r+0xbb0>
 80011b0:	80ffffc5 	stb	r3,-1(r16)
 80011b4:	d8c02817 	ldw	r3,160(sp)
 80011b8:	80bfffc4 	addi	r2,r16,-1
 80011bc:	1021883a 	mov	r16,r2
 80011c0:	1887c83a 	sub	r3,r3,r2
 80011c4:	d8c02b15 	stw	r3,172(sp)
 80011c8:	d8802b17 	ldw	r2,172(sp)
 80011cc:	d9002a17 	ldw	r4,168(sp)
 80011d0:	1100010e 	bge	r2,r4,80011d8 <___svfprintf_internal_r+0x6f0>
 80011d4:	2005883a 	mov	r2,r4
 80011d8:	d8802915 	stw	r2,164(sp)
 80011dc:	d8003215 	stw	zero,200(sp)
 80011e0:	e7003fcc 	andi	fp,fp,255
 80011e4:	e700201c 	xori	fp,fp,128
 80011e8:	e73fe004 	addi	fp,fp,-128
 80011ec:	e0000326 	beq	fp,zero,80011fc <___svfprintf_internal_r+0x714>
 80011f0:	d8c02917 	ldw	r3,164(sp)
 80011f4:	18c00044 	addi	r3,r3,1
 80011f8:	d8c02915 	stw	r3,164(sp)
 80011fc:	90c0008c 	andi	r3,r18,2
 8001200:	d8c02c15 	stw	r3,176(sp)
 8001204:	18000326 	beq	r3,zero,8001214 <___svfprintf_internal_r+0x72c>
 8001208:	d8c02917 	ldw	r3,164(sp)
 800120c:	18c00084 	addi	r3,r3,2
 8001210:	d8c02915 	stw	r3,164(sp)
 8001214:	90c0210c 	andi	r3,r18,132
 8001218:	d8c03015 	stw	r3,192(sp)
 800121c:	1801c31e 	bne	r3,zero,800192c <___svfprintf_internal_r+0xe44>
 8001220:	d9003117 	ldw	r4,196(sp)
 8001224:	d8c02917 	ldw	r3,164(sp)
 8001228:	20e9c83a 	sub	r20,r4,r3
 800122c:	0501bf0e 	bge	zero,r20,800192c <___svfprintf_internal_r+0xe44>
 8001230:	02400404 	movi	r9,16
 8001234:	d8c02017 	ldw	r3,128(sp)
 8001238:	d8801f17 	ldw	r2,124(sp)
 800123c:	4d053d0e 	bge	r9,r20,8002734 <___svfprintf_internal_r+0x1c4c>
 8001240:	01420074 	movhi	r5,2049
 8001244:	2977f384 	addi	r5,r5,-8242
 8001248:	dc403c15 	stw	r17,240(sp)
 800124c:	d9403515 	stw	r5,212(sp)
 8001250:	a023883a 	mov	r17,r20
 8001254:	482d883a 	mov	r22,r9
 8001258:	9029883a 	mov	r20,r18
 800125c:	070001c4 	movi	fp,7
 8001260:	8025883a 	mov	r18,r16
 8001264:	dc002d17 	ldw	r16,180(sp)
 8001268:	00000306 	br	8001278 <___svfprintf_internal_r+0x790>
 800126c:	8c7ffc04 	addi	r17,r17,-16
 8001270:	42000204 	addi	r8,r8,8
 8001274:	b440130e 	bge	r22,r17,80012c4 <___svfprintf_internal_r+0x7dc>
 8001278:	01020074 	movhi	r4,2049
 800127c:	18c00404 	addi	r3,r3,16
 8001280:	10800044 	addi	r2,r2,1
 8001284:	2137f384 	addi	r4,r4,-8242
 8001288:	41000015 	stw	r4,0(r8)
 800128c:	45800115 	stw	r22,4(r8)
 8001290:	d8c02015 	stw	r3,128(sp)
 8001294:	d8801f15 	stw	r2,124(sp)
 8001298:	e0bff40e 	bge	fp,r2,800126c <__alt_data_end+0xfc00126c>
 800129c:	d9801e04 	addi	r6,sp,120
 80012a0:	800b883a 	mov	r5,r16
 80012a4:	9809883a 	mov	r4,r19
 80012a8:	80063c40 	call	80063c4 <__ssprint_r>
 80012ac:	103ef51e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80012b0:	8c7ffc04 	addi	r17,r17,-16
 80012b4:	d8c02017 	ldw	r3,128(sp)
 80012b8:	d8801f17 	ldw	r2,124(sp)
 80012bc:	da000404 	addi	r8,sp,16
 80012c0:	b47fed16 	blt	r22,r17,8001278 <__alt_data_end+0xfc001278>
 80012c4:	9021883a 	mov	r16,r18
 80012c8:	a025883a 	mov	r18,r20
 80012cc:	8829883a 	mov	r20,r17
 80012d0:	dc403c17 	ldw	r17,240(sp)
 80012d4:	d9403517 	ldw	r5,212(sp)
 80012d8:	a0c7883a 	add	r3,r20,r3
 80012dc:	10800044 	addi	r2,r2,1
 80012e0:	41400015 	stw	r5,0(r8)
 80012e4:	45000115 	stw	r20,4(r8)
 80012e8:	d8c02015 	stw	r3,128(sp)
 80012ec:	d8801f15 	stw	r2,124(sp)
 80012f0:	010001c4 	movi	r4,7
 80012f4:	2082c116 	blt	r4,r2,8001dfc <___svfprintf_internal_r+0x1314>
 80012f8:	df002787 	ldb	fp,158(sp)
 80012fc:	42000204 	addi	r8,r8,8
 8001300:	e0000c26 	beq	fp,zero,8001334 <___svfprintf_internal_r+0x84c>
 8001304:	d8801f17 	ldw	r2,124(sp)
 8001308:	d9002784 	addi	r4,sp,158
 800130c:	18c00044 	addi	r3,r3,1
 8001310:	10800044 	addi	r2,r2,1
 8001314:	41000015 	stw	r4,0(r8)
 8001318:	01000044 	movi	r4,1
 800131c:	41000115 	stw	r4,4(r8)
 8001320:	d8c02015 	stw	r3,128(sp)
 8001324:	d8801f15 	stw	r2,124(sp)
 8001328:	010001c4 	movi	r4,7
 800132c:	20825a16 	blt	r4,r2,8001c98 <___svfprintf_internal_r+0x11b0>
 8001330:	42000204 	addi	r8,r8,8
 8001334:	d8802c17 	ldw	r2,176(sp)
 8001338:	10000c26 	beq	r2,zero,800136c <___svfprintf_internal_r+0x884>
 800133c:	d8801f17 	ldw	r2,124(sp)
 8001340:	d9002704 	addi	r4,sp,156
 8001344:	18c00084 	addi	r3,r3,2
 8001348:	10800044 	addi	r2,r2,1
 800134c:	41000015 	stw	r4,0(r8)
 8001350:	01000084 	movi	r4,2
 8001354:	41000115 	stw	r4,4(r8)
 8001358:	d8c02015 	stw	r3,128(sp)
 800135c:	d8801f15 	stw	r2,124(sp)
 8001360:	010001c4 	movi	r4,7
 8001364:	20825416 	blt	r4,r2,8001cb8 <___svfprintf_internal_r+0x11d0>
 8001368:	42000204 	addi	r8,r8,8
 800136c:	d9003017 	ldw	r4,192(sp)
 8001370:	00802004 	movi	r2,128
 8001374:	2081b926 	beq	r4,r2,8001a5c <___svfprintf_internal_r+0xf74>
 8001378:	d9402a17 	ldw	r5,168(sp)
 800137c:	d8802b17 	ldw	r2,172(sp)
 8001380:	28adc83a 	sub	r22,r5,r2
 8001384:	05802f0e 	bge	zero,r22,8001444 <___svfprintf_internal_r+0x95c>
 8001388:	07000404 	movi	fp,16
 800138c:	d8801f17 	ldw	r2,124(sp)
 8001390:	e583e20e 	bge	fp,r22,800231c <___svfprintf_internal_r+0x1834>
 8001394:	01420074 	movhi	r5,2049
 8001398:	2977ef84 	addi	r5,r5,-8258
 800139c:	dc402a15 	stw	r17,168(sp)
 80013a0:	d9402c15 	stw	r5,176(sp)
 80013a4:	b023883a 	mov	r17,r22
 80013a8:	050001c4 	movi	r20,7
 80013ac:	902d883a 	mov	r22,r18
 80013b0:	8025883a 	mov	r18,r16
 80013b4:	dc002d17 	ldw	r16,180(sp)
 80013b8:	00000306 	br	80013c8 <___svfprintf_internal_r+0x8e0>
 80013bc:	8c7ffc04 	addi	r17,r17,-16
 80013c0:	42000204 	addi	r8,r8,8
 80013c4:	e440110e 	bge	fp,r17,800140c <___svfprintf_internal_r+0x924>
 80013c8:	18c00404 	addi	r3,r3,16
 80013cc:	10800044 	addi	r2,r2,1
 80013d0:	45400015 	stw	r21,0(r8)
 80013d4:	47000115 	stw	fp,4(r8)
 80013d8:	d8c02015 	stw	r3,128(sp)
 80013dc:	d8801f15 	stw	r2,124(sp)
 80013e0:	a0bff60e 	bge	r20,r2,80013bc <__alt_data_end+0xfc0013bc>
 80013e4:	d9801e04 	addi	r6,sp,120
 80013e8:	800b883a 	mov	r5,r16
 80013ec:	9809883a 	mov	r4,r19
 80013f0:	80063c40 	call	80063c4 <__ssprint_r>
 80013f4:	103ea31e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80013f8:	8c7ffc04 	addi	r17,r17,-16
 80013fc:	d8c02017 	ldw	r3,128(sp)
 8001400:	d8801f17 	ldw	r2,124(sp)
 8001404:	da000404 	addi	r8,sp,16
 8001408:	e47fef16 	blt	fp,r17,80013c8 <__alt_data_end+0xfc0013c8>
 800140c:	9021883a 	mov	r16,r18
 8001410:	b025883a 	mov	r18,r22
 8001414:	882d883a 	mov	r22,r17
 8001418:	dc402a17 	ldw	r17,168(sp)
 800141c:	d9002c17 	ldw	r4,176(sp)
 8001420:	1d87883a 	add	r3,r3,r22
 8001424:	10800044 	addi	r2,r2,1
 8001428:	41000015 	stw	r4,0(r8)
 800142c:	45800115 	stw	r22,4(r8)
 8001430:	d8c02015 	stw	r3,128(sp)
 8001434:	d8801f15 	stw	r2,124(sp)
 8001438:	010001c4 	movi	r4,7
 800143c:	20820e16 	blt	r4,r2,8001c78 <___svfprintf_internal_r+0x1190>
 8001440:	42000204 	addi	r8,r8,8
 8001444:	9080400c 	andi	r2,r18,256
 8001448:	10013a1e 	bne	r2,zero,8001934 <___svfprintf_internal_r+0xe4c>
 800144c:	d9402b17 	ldw	r5,172(sp)
 8001450:	d8801f17 	ldw	r2,124(sp)
 8001454:	44000015 	stw	r16,0(r8)
 8001458:	1947883a 	add	r3,r3,r5
 800145c:	10800044 	addi	r2,r2,1
 8001460:	41400115 	stw	r5,4(r8)
 8001464:	d8c02015 	stw	r3,128(sp)
 8001468:	d8801f15 	stw	r2,124(sp)
 800146c:	010001c4 	movi	r4,7
 8001470:	2081f316 	blt	r4,r2,8001c40 <___svfprintf_internal_r+0x1158>
 8001474:	42000204 	addi	r8,r8,8
 8001478:	9480010c 	andi	r18,r18,4
 800147c:	90003226 	beq	r18,zero,8001548 <___svfprintf_internal_r+0xa60>
 8001480:	d9403117 	ldw	r5,196(sp)
 8001484:	d8802917 	ldw	r2,164(sp)
 8001488:	28a1c83a 	sub	r16,r5,r2
 800148c:	04002e0e 	bge	zero,r16,8001548 <___svfprintf_internal_r+0xa60>
 8001490:	04400404 	movi	r17,16
 8001494:	d8801f17 	ldw	r2,124(sp)
 8001498:	8c04db0e 	bge	r17,r16,8002808 <___svfprintf_internal_r+0x1d20>
 800149c:	01420074 	movhi	r5,2049
 80014a0:	2977f384 	addi	r5,r5,-8242
 80014a4:	d9403515 	stw	r5,212(sp)
 80014a8:	048001c4 	movi	r18,7
 80014ac:	dd002d17 	ldw	r20,180(sp)
 80014b0:	00000306 	br	80014c0 <___svfprintf_internal_r+0x9d8>
 80014b4:	843ffc04 	addi	r16,r16,-16
 80014b8:	42000204 	addi	r8,r8,8
 80014bc:	8c00130e 	bge	r17,r16,800150c <___svfprintf_internal_r+0xa24>
 80014c0:	01020074 	movhi	r4,2049
 80014c4:	18c00404 	addi	r3,r3,16
 80014c8:	10800044 	addi	r2,r2,1
 80014cc:	2137f384 	addi	r4,r4,-8242
 80014d0:	41000015 	stw	r4,0(r8)
 80014d4:	44400115 	stw	r17,4(r8)
 80014d8:	d8c02015 	stw	r3,128(sp)
 80014dc:	d8801f15 	stw	r2,124(sp)
 80014e0:	90bff40e 	bge	r18,r2,80014b4 <__alt_data_end+0xfc0014b4>
 80014e4:	d9801e04 	addi	r6,sp,120
 80014e8:	a00b883a 	mov	r5,r20
 80014ec:	9809883a 	mov	r4,r19
 80014f0:	80063c40 	call	80063c4 <__ssprint_r>
 80014f4:	103e631e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80014f8:	843ffc04 	addi	r16,r16,-16
 80014fc:	d8c02017 	ldw	r3,128(sp)
 8001500:	d8801f17 	ldw	r2,124(sp)
 8001504:	da000404 	addi	r8,sp,16
 8001508:	8c3fed16 	blt	r17,r16,80014c0 <__alt_data_end+0xfc0014c0>
 800150c:	d9403517 	ldw	r5,212(sp)
 8001510:	1c07883a 	add	r3,r3,r16
 8001514:	10800044 	addi	r2,r2,1
 8001518:	41400015 	stw	r5,0(r8)
 800151c:	44000115 	stw	r16,4(r8)
 8001520:	d8c02015 	stw	r3,128(sp)
 8001524:	d8801f15 	stw	r2,124(sp)
 8001528:	010001c4 	movi	r4,7
 800152c:	2080060e 	bge	r4,r2,8001548 <___svfprintf_internal_r+0xa60>
 8001530:	d9402d17 	ldw	r5,180(sp)
 8001534:	d9801e04 	addi	r6,sp,120
 8001538:	9809883a 	mov	r4,r19
 800153c:	80063c40 	call	80063c4 <__ssprint_r>
 8001540:	103e501e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001544:	d8c02017 	ldw	r3,128(sp)
 8001548:	d8803117 	ldw	r2,196(sp)
 800154c:	d9002917 	ldw	r4,164(sp)
 8001550:	1100010e 	bge	r2,r4,8001558 <___svfprintf_internal_r+0xa70>
 8001554:	2005883a 	mov	r2,r4
 8001558:	d9402f17 	ldw	r5,188(sp)
 800155c:	288b883a 	add	r5,r5,r2
 8001560:	d9402f15 	stw	r5,188(sp)
 8001564:	1801be1e 	bne	r3,zero,8001c60 <___svfprintf_internal_r+0x1178>
 8001568:	b8800007 	ldb	r2,0(r23)
 800156c:	d8001f15 	stw	zero,124(sp)
 8001570:	da000404 	addi	r8,sp,16
 8001574:	103d891e 	bne	r2,zero,8000b9c <__alt_data_end+0xfc000b9c>
 8001578:	b823883a 	mov	r17,r23
 800157c:	003d9f06 	br	8000bfc <__alt_data_end+0xfc000bfc>
 8001580:	8025883a 	mov	r18,r16
 8001584:	dc002903 	ldbu	r16,164(sp)
 8001588:	e011883a 	mov	r8,fp
 800158c:	84003fcc 	andi	r16,r16,255
 8001590:	8005e61e 	bne	r16,zero,8002d2c <___svfprintf_internal_r+0x2244>
 8001594:	94800414 	ori	r18,r18,16
 8001598:	9080080c 	andi	r2,r18,32
 800159c:	10022026 	beq	r2,zero,8001e20 <___svfprintf_internal_r+0x1338>
 80015a0:	d9002e17 	ldw	r4,184(sp)
 80015a4:	d9402a17 	ldw	r5,168(sp)
 80015a8:	d8002785 	stb	zero,158(sp)
 80015ac:	20c00204 	addi	r3,r4,8
 80015b0:	25000017 	ldw	r20,0(r4)
 80015b4:	25800117 	ldw	r22,4(r4)
 80015b8:	2803ad16 	blt	r5,zero,8002470 <___svfprintf_internal_r+0x1988>
 80015bc:	013fdfc4 	movi	r4,-129
 80015c0:	a584b03a 	or	r2,r20,r22
 80015c4:	d8c02e15 	stw	r3,184(sp)
 80015c8:	9124703a 	and	r18,r18,r4
 80015cc:	0039883a 	mov	fp,zero
 80015d0:	103eb01e 	bne	r2,zero,8001094 <__alt_data_end+0xfc001094>
 80015d4:	d8802a17 	ldw	r2,168(sp)
 80015d8:	1002e71e 	bne	r2,zero,8002178 <___svfprintf_internal_r+0x1690>
 80015dc:	d8002a15 	stw	zero,168(sp)
 80015e0:	d8002b15 	stw	zero,172(sp)
 80015e4:	dc001e04 	addi	r16,sp,120
 80015e8:	003ef706 	br	80011c8 <__alt_data_end+0xfc0011c8>
 80015ec:	8025883a 	mov	r18,r16
 80015f0:	dc002903 	ldbu	r16,164(sp)
 80015f4:	e011883a 	mov	r8,fp
 80015f8:	84003fcc 	andi	r16,r16,255
 80015fc:	8005c81e 	bne	r16,zero,8002d20 <___svfprintf_internal_r+0x2238>
 8001600:	01020074 	movhi	r4,2049
 8001604:	2137e304 	addi	r4,r4,-8308
 8001608:	d9003a15 	stw	r4,232(sp)
 800160c:	9080080c 	andi	r2,r18,32
 8001610:	10007226 	beq	r2,zero,80017dc <___svfprintf_internal_r+0xcf4>
 8001614:	d9402e17 	ldw	r5,184(sp)
 8001618:	2d000017 	ldw	r20,0(r5)
 800161c:	2d800117 	ldw	r22,4(r5)
 8001620:	29400204 	addi	r5,r5,8
 8001624:	d9402e15 	stw	r5,184(sp)
 8001628:	9080004c 	andi	r2,r18,1
 800162c:	1001aa26 	beq	r2,zero,8001cd8 <___svfprintf_internal_r+0x11f0>
 8001630:	a584b03a 	or	r2,r20,r22
 8001634:	10032526 	beq	r2,zero,80022cc <___svfprintf_internal_r+0x17e4>
 8001638:	d8c02a17 	ldw	r3,168(sp)
 800163c:	00800c04 	movi	r2,48
 8001640:	d8802705 	stb	r2,156(sp)
 8001644:	dc402745 	stb	r17,157(sp)
 8001648:	d8002785 	stb	zero,158(sp)
 800164c:	90800094 	ori	r2,r18,2
 8001650:	1804a316 	blt	r3,zero,80028e0 <___svfprintf_internal_r+0x1df8>
 8001654:	00bfdfc4 	movi	r2,-129
 8001658:	90a4703a 	and	r18,r18,r2
 800165c:	94800094 	ori	r18,r18,2
 8001660:	0039883a 	mov	fp,zero
 8001664:	d9003a17 	ldw	r4,232(sp)
 8001668:	dc001e04 	addi	r16,sp,120
 800166c:	a08003cc 	andi	r2,r20,15
 8001670:	b006973a 	slli	r3,r22,28
 8001674:	2085883a 	add	r2,r4,r2
 8001678:	a028d13a 	srli	r20,r20,4
 800167c:	10800003 	ldbu	r2,0(r2)
 8001680:	b02cd13a 	srli	r22,r22,4
 8001684:	843fffc4 	addi	r16,r16,-1
 8001688:	1d28b03a 	or	r20,r3,r20
 800168c:	80800005 	stb	r2,0(r16)
 8001690:	a584b03a 	or	r2,r20,r22
 8001694:	103ff51e 	bne	r2,zero,800166c <__alt_data_end+0xfc00166c>
 8001698:	d8c02817 	ldw	r3,160(sp)
 800169c:	1c07c83a 	sub	r3,r3,r16
 80016a0:	d8c02b15 	stw	r3,172(sp)
 80016a4:	003ec806 	br	80011c8 <__alt_data_end+0xfc0011c8>
 80016a8:	d8c02e17 	ldw	r3,184(sp)
 80016ac:	d9002e17 	ldw	r4,184(sp)
 80016b0:	8025883a 	mov	r18,r16
 80016b4:	18800017 	ldw	r2,0(r3)
 80016b8:	21000104 	addi	r4,r4,4
 80016bc:	00c00044 	movi	r3,1
 80016c0:	e011883a 	mov	r8,fp
 80016c4:	d8c02915 	stw	r3,164(sp)
 80016c8:	d8002785 	stb	zero,158(sp)
 80016cc:	d8801405 	stb	r2,80(sp)
 80016d0:	d9002e15 	stw	r4,184(sp)
 80016d4:	d8c02b15 	stw	r3,172(sp)
 80016d8:	d8002a15 	stw	zero,168(sp)
 80016dc:	d8003215 	stw	zero,200(sp)
 80016e0:	dc001404 	addi	r16,sp,80
 80016e4:	0039883a 	mov	fp,zero
 80016e8:	003ec406 	br	80011fc <__alt_data_end+0xfc0011fc>
 80016ec:	8025883a 	mov	r18,r16
 80016f0:	dc002903 	ldbu	r16,164(sp)
 80016f4:	e011883a 	mov	r8,fp
 80016f8:	84003fcc 	andi	r16,r16,255
 80016fc:	803e8726 	beq	r16,zero,800111c <__alt_data_end+0xfc00111c>
 8001700:	d8c02b03 	ldbu	r3,172(sp)
 8001704:	d8c02785 	stb	r3,158(sp)
 8001708:	003e8406 	br	800111c <__alt_data_end+0xfc00111c>
 800170c:	00c00044 	movi	r3,1
 8001710:	d8c02905 	stb	r3,164(sp)
 8001714:	00c00ac4 	movi	r3,43
 8001718:	d8c02b05 	stb	r3,172(sp)
 800171c:	bc400007 	ldb	r17,0(r23)
 8001720:	003d4606 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8001724:	84000814 	ori	r16,r16,32
 8001728:	bc400007 	ldb	r17,0(r23)
 800172c:	003d4306 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8001730:	d8802e17 	ldw	r2,184(sp)
 8001734:	8025883a 	mov	r18,r16
 8001738:	d8002785 	stb	zero,158(sp)
 800173c:	14000017 	ldw	r16,0(r2)
 8001740:	e011883a 	mov	r8,fp
 8001744:	15000104 	addi	r20,r2,4
 8001748:	80042126 	beq	r16,zero,80027d0 <___svfprintf_internal_r+0x1ce8>
 800174c:	d8c02a17 	ldw	r3,168(sp)
 8001750:	1803ee16 	blt	r3,zero,800270c <___svfprintf_internal_r+0x1c24>
 8001754:	180d883a 	mov	r6,r3
 8001758:	000b883a 	mov	r5,zero
 800175c:	8009883a 	mov	r4,r16
 8001760:	df003e15 	stw	fp,248(sp)
 8001764:	8004f3c0 	call	8004f3c <memchr>
 8001768:	da003e17 	ldw	r8,248(sp)
 800176c:	10046a26 	beq	r2,zero,8002918 <___svfprintf_internal_r+0x1e30>
 8001770:	1405c83a 	sub	r2,r2,r16
 8001774:	d8802b15 	stw	r2,172(sp)
 8001778:	1003ea16 	blt	r2,zero,8002724 <___svfprintf_internal_r+0x1c3c>
 800177c:	df002783 	ldbu	fp,158(sp)
 8001780:	d8802915 	stw	r2,164(sp)
 8001784:	dd002e15 	stw	r20,184(sp)
 8001788:	d8002a15 	stw	zero,168(sp)
 800178c:	d8003215 	stw	zero,200(sp)
 8001790:	003e9306 	br	80011e0 <__alt_data_end+0xfc0011e0>
 8001794:	8025883a 	mov	r18,r16
 8001798:	dc002903 	ldbu	r16,164(sp)
 800179c:	e011883a 	mov	r8,fp
 80017a0:	84003fcc 	andi	r16,r16,255
 80017a4:	803f7c26 	beq	r16,zero,8001598 <__alt_data_end+0xfc001598>
 80017a8:	d8c02b03 	ldbu	r3,172(sp)
 80017ac:	d8c02785 	stb	r3,158(sp)
 80017b0:	003f7906 	br	8001598 <__alt_data_end+0xfc001598>
 80017b4:	8025883a 	mov	r18,r16
 80017b8:	dc002903 	ldbu	r16,164(sp)
 80017bc:	e011883a 	mov	r8,fp
 80017c0:	84003fcc 	andi	r16,r16,255
 80017c4:	8005741e 	bne	r16,zero,8002d98 <___svfprintf_internal_r+0x22b0>
 80017c8:	01020074 	movhi	r4,2049
 80017cc:	2137e804 	addi	r4,r4,-8288
 80017d0:	d9003a15 	stw	r4,232(sp)
 80017d4:	9080080c 	andi	r2,r18,32
 80017d8:	103f8e1e 	bne	r2,zero,8001614 <__alt_data_end+0xfc001614>
 80017dc:	9080040c 	andi	r2,r18,16
 80017e0:	1002a726 	beq	r2,zero,8002280 <___svfprintf_internal_r+0x1798>
 80017e4:	d8802e17 	ldw	r2,184(sp)
 80017e8:	002d883a 	mov	r22,zero
 80017ec:	15000017 	ldw	r20,0(r2)
 80017f0:	10800104 	addi	r2,r2,4
 80017f4:	d8802e15 	stw	r2,184(sp)
 80017f8:	003f8b06 	br	8001628 <__alt_data_end+0xfc001628>
 80017fc:	84000054 	ori	r16,r16,1
 8001800:	bc400007 	ldb	r17,0(r23)
 8001804:	003d0d06 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8001808:	d8802b07 	ldb	r2,172(sp)
 800180c:	1002a41e 	bne	r2,zero,80022a0 <___svfprintf_internal_r+0x17b8>
 8001810:	00c00044 	movi	r3,1
 8001814:	d8c02905 	stb	r3,164(sp)
 8001818:	00c00804 	movi	r3,32
 800181c:	d8c02b05 	stb	r3,172(sp)
 8001820:	bc400007 	ldb	r17,0(r23)
 8001824:	003d0506 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8001828:	8025883a 	mov	r18,r16
 800182c:	dc002903 	ldbu	r16,164(sp)
 8001830:	e011883a 	mov	r8,fp
 8001834:	84003fcc 	andi	r16,r16,255
 8001838:	803e0626 	beq	r16,zero,8001054 <__alt_data_end+0xfc001054>
 800183c:	d8c02b03 	ldbu	r3,172(sp)
 8001840:	d8c02785 	stb	r3,158(sp)
 8001844:	003e0306 	br	8001054 <__alt_data_end+0xfc001054>
 8001848:	bc400007 	ldb	r17,0(r23)
 800184c:	00801b04 	movi	r2,108
 8001850:	88830a26 	beq	r17,r2,800247c <___svfprintf_internal_r+0x1994>
 8001854:	84000414 	ori	r16,r16,16
 8001858:	003cf806 	br	8000c3c <__alt_data_end+0xfc000c3c>
 800185c:	8025883a 	mov	r18,r16
 8001860:	dc002903 	ldbu	r16,164(sp)
 8001864:	e011883a 	mov	r8,fp
 8001868:	84003fcc 	andi	r16,r16,255
 800186c:	8005471e 	bne	r16,zero,8002d8c <___svfprintf_internal_r+0x22a4>
 8001870:	9080080c 	andi	r2,r18,32
 8001874:	10028c26 	beq	r2,zero,80022a8 <___svfprintf_internal_r+0x17c0>
 8001878:	d9002e17 	ldw	r4,184(sp)
 800187c:	d9402f17 	ldw	r5,188(sp)
 8001880:	20800017 	ldw	r2,0(r4)
 8001884:	2807d7fa 	srai	r3,r5,31
 8001888:	21000104 	addi	r4,r4,4
 800188c:	d9002e15 	stw	r4,184(sp)
 8001890:	11400015 	stw	r5,0(r2)
 8001894:	10c00115 	stw	r3,4(r2)
 8001898:	003cbe06 	br	8000b94 <__alt_data_end+0xfc000b94>
 800189c:	84001014 	ori	r16,r16,64
 80018a0:	bc400007 	ldb	r17,0(r23)
 80018a4:	003ce506 	br	8000c3c <__alt_data_end+0xfc000c3c>
 80018a8:	01020074 	movhi	r4,2049
 80018ac:	2137e804 	addi	r4,r4,-8288
 80018b0:	0039883a 	mov	fp,zero
 80018b4:	d9003a15 	stw	r4,232(sp)
 80018b8:	04401e04 	movi	r17,120
 80018bc:	003f6906 	br	8001664 <__alt_data_end+0xfc001664>
 80018c0:	8025883a 	mov	r18,r16
 80018c4:	dc002903 	ldbu	r16,164(sp)
 80018c8:	e011883a 	mov	r8,fp
 80018cc:	84003fcc 	andi	r16,r16,255
 80018d0:	8005261e 	bne	r16,zero,8002d6c <___svfprintf_internal_r+0x2284>
 80018d4:	883d6526 	beq	r17,zero,8000e6c <__alt_data_end+0xfc000e6c>
 80018d8:	00c00044 	movi	r3,1
 80018dc:	d8c02915 	stw	r3,164(sp)
 80018e0:	dc401405 	stb	r17,80(sp)
 80018e4:	d8002785 	stb	zero,158(sp)
 80018e8:	003f7a06 	br	80016d4 <__alt_data_end+0xfc0016d4>
 80018ec:	01020074 	movhi	r4,2049
 80018f0:	2137e804 	addi	r4,r4,-8288
 80018f4:	d9003a15 	stw	r4,232(sp)
 80018f8:	d8c02e15 	stw	r3,184(sp)
 80018fc:	1025883a 	mov	r18,r2
 8001900:	04401e04 	movi	r17,120
 8001904:	a584b03a 	or	r2,r20,r22
 8001908:	1000fa1e 	bne	r2,zero,8001cf4 <___svfprintf_internal_r+0x120c>
 800190c:	0039883a 	mov	fp,zero
 8001910:	00800084 	movi	r2,2
 8001914:	10803fcc 	andi	r2,r2,255
 8001918:	00c00044 	movi	r3,1
 800191c:	10c21626 	beq	r2,r3,8002178 <___svfprintf_internal_r+0x1690>
 8001920:	00c00084 	movi	r3,2
 8001924:	10fe0e1e 	bne	r2,r3,8001160 <__alt_data_end+0xfc001160>
 8001928:	003d4606 	br	8000e44 <__alt_data_end+0xfc000e44>
 800192c:	d8c02017 	ldw	r3,128(sp)
 8001930:	003e7306 	br	8001300 <__alt_data_end+0xfc001300>
 8001934:	00801944 	movi	r2,101
 8001938:	14407c0e 	bge	r2,r17,8001b2c <___svfprintf_internal_r+0x1044>
 800193c:	d9003617 	ldw	r4,216(sp)
 8001940:	d9403717 	ldw	r5,220(sp)
 8001944:	000d883a 	mov	r6,zero
 8001948:	000f883a 	mov	r7,zero
 800194c:	d8c03d15 	stw	r3,244(sp)
 8001950:	da003e15 	stw	r8,248(sp)
 8001954:	800a5740 	call	800a574 <__eqdf2>
 8001958:	d8c03d17 	ldw	r3,244(sp)
 800195c:	da003e17 	ldw	r8,248(sp)
 8001960:	1000f51e 	bne	r2,zero,8001d38 <___svfprintf_internal_r+0x1250>
 8001964:	d8801f17 	ldw	r2,124(sp)
 8001968:	01020074 	movhi	r4,2049
 800196c:	2137ef04 	addi	r4,r4,-8260
 8001970:	18c00044 	addi	r3,r3,1
 8001974:	10800044 	addi	r2,r2,1
 8001978:	41000015 	stw	r4,0(r8)
 800197c:	01000044 	movi	r4,1
 8001980:	41000115 	stw	r4,4(r8)
 8001984:	d8c02015 	stw	r3,128(sp)
 8001988:	d8801f15 	stw	r2,124(sp)
 800198c:	010001c4 	movi	r4,7
 8001990:	20826616 	blt	r4,r2,800232c <___svfprintf_internal_r+0x1844>
 8001994:	42000204 	addi	r8,r8,8
 8001998:	d8802617 	ldw	r2,152(sp)
 800199c:	d9403317 	ldw	r5,204(sp)
 80019a0:	11400216 	blt	r2,r5,80019ac <___svfprintf_internal_r+0xec4>
 80019a4:	9080004c 	andi	r2,r18,1
 80019a8:	103eb326 	beq	r2,zero,8001478 <__alt_data_end+0xfc001478>
 80019ac:	d8803817 	ldw	r2,224(sp)
 80019b0:	d9003417 	ldw	r4,208(sp)
 80019b4:	d9403817 	ldw	r5,224(sp)
 80019b8:	1887883a 	add	r3,r3,r2
 80019bc:	d8801f17 	ldw	r2,124(sp)
 80019c0:	41000015 	stw	r4,0(r8)
 80019c4:	41400115 	stw	r5,4(r8)
 80019c8:	10800044 	addi	r2,r2,1
 80019cc:	d8c02015 	stw	r3,128(sp)
 80019d0:	d8801f15 	stw	r2,124(sp)
 80019d4:	010001c4 	movi	r4,7
 80019d8:	2082af16 	blt	r4,r2,8002498 <___svfprintf_internal_r+0x19b0>
 80019dc:	42000204 	addi	r8,r8,8
 80019e0:	d8803317 	ldw	r2,204(sp)
 80019e4:	143fffc4 	addi	r16,r2,-1
 80019e8:	043ea30e 	bge	zero,r16,8001478 <__alt_data_end+0xfc001478>
 80019ec:	04400404 	movi	r17,16
 80019f0:	d8801f17 	ldw	r2,124(sp)
 80019f4:	8c00860e 	bge	r17,r16,8001c10 <___svfprintf_internal_r+0x1128>
 80019f8:	01420074 	movhi	r5,2049
 80019fc:	2977ef84 	addi	r5,r5,-8258
 8001a00:	d9402c15 	stw	r5,176(sp)
 8001a04:	058001c4 	movi	r22,7
 8001a08:	dd002d17 	ldw	r20,180(sp)
 8001a0c:	00000306 	br	8001a1c <___svfprintf_internal_r+0xf34>
 8001a10:	42000204 	addi	r8,r8,8
 8001a14:	843ffc04 	addi	r16,r16,-16
 8001a18:	8c00800e 	bge	r17,r16,8001c1c <___svfprintf_internal_r+0x1134>
 8001a1c:	18c00404 	addi	r3,r3,16
 8001a20:	10800044 	addi	r2,r2,1
 8001a24:	45400015 	stw	r21,0(r8)
 8001a28:	44400115 	stw	r17,4(r8)
 8001a2c:	d8c02015 	stw	r3,128(sp)
 8001a30:	d8801f15 	stw	r2,124(sp)
 8001a34:	b0bff60e 	bge	r22,r2,8001a10 <__alt_data_end+0xfc001a10>
 8001a38:	d9801e04 	addi	r6,sp,120
 8001a3c:	a00b883a 	mov	r5,r20
 8001a40:	9809883a 	mov	r4,r19
 8001a44:	80063c40 	call	80063c4 <__ssprint_r>
 8001a48:	103d0e1e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001a4c:	d8c02017 	ldw	r3,128(sp)
 8001a50:	d8801f17 	ldw	r2,124(sp)
 8001a54:	da000404 	addi	r8,sp,16
 8001a58:	003fee06 	br	8001a14 <__alt_data_end+0xfc001a14>
 8001a5c:	d9403117 	ldw	r5,196(sp)
 8001a60:	d8802917 	ldw	r2,164(sp)
 8001a64:	28adc83a 	sub	r22,r5,r2
 8001a68:	05be430e 	bge	zero,r22,8001378 <__alt_data_end+0xfc001378>
 8001a6c:	07000404 	movi	fp,16
 8001a70:	d8801f17 	ldw	r2,124(sp)
 8001a74:	e583a20e 	bge	fp,r22,8002900 <___svfprintf_internal_r+0x1e18>
 8001a78:	01420074 	movhi	r5,2049
 8001a7c:	2977ef84 	addi	r5,r5,-8258
 8001a80:	dc403015 	stw	r17,192(sp)
 8001a84:	d9402c15 	stw	r5,176(sp)
 8001a88:	b023883a 	mov	r17,r22
 8001a8c:	050001c4 	movi	r20,7
 8001a90:	902d883a 	mov	r22,r18
 8001a94:	8025883a 	mov	r18,r16
 8001a98:	dc002d17 	ldw	r16,180(sp)
 8001a9c:	00000306 	br	8001aac <___svfprintf_internal_r+0xfc4>
 8001aa0:	8c7ffc04 	addi	r17,r17,-16
 8001aa4:	42000204 	addi	r8,r8,8
 8001aa8:	e440110e 	bge	fp,r17,8001af0 <___svfprintf_internal_r+0x1008>
 8001aac:	18c00404 	addi	r3,r3,16
 8001ab0:	10800044 	addi	r2,r2,1
 8001ab4:	45400015 	stw	r21,0(r8)
 8001ab8:	47000115 	stw	fp,4(r8)
 8001abc:	d8c02015 	stw	r3,128(sp)
 8001ac0:	d8801f15 	stw	r2,124(sp)
 8001ac4:	a0bff60e 	bge	r20,r2,8001aa0 <__alt_data_end+0xfc001aa0>
 8001ac8:	d9801e04 	addi	r6,sp,120
 8001acc:	800b883a 	mov	r5,r16
 8001ad0:	9809883a 	mov	r4,r19
 8001ad4:	80063c40 	call	80063c4 <__ssprint_r>
 8001ad8:	103cea1e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001adc:	8c7ffc04 	addi	r17,r17,-16
 8001ae0:	d8c02017 	ldw	r3,128(sp)
 8001ae4:	d8801f17 	ldw	r2,124(sp)
 8001ae8:	da000404 	addi	r8,sp,16
 8001aec:	e47fef16 	blt	fp,r17,8001aac <__alt_data_end+0xfc001aac>
 8001af0:	9021883a 	mov	r16,r18
 8001af4:	b025883a 	mov	r18,r22
 8001af8:	882d883a 	mov	r22,r17
 8001afc:	dc403017 	ldw	r17,192(sp)
 8001b00:	d9002c17 	ldw	r4,176(sp)
 8001b04:	1d87883a 	add	r3,r3,r22
 8001b08:	10800044 	addi	r2,r2,1
 8001b0c:	41000015 	stw	r4,0(r8)
 8001b10:	45800115 	stw	r22,4(r8)
 8001b14:	d8c02015 	stw	r3,128(sp)
 8001b18:	d8801f15 	stw	r2,124(sp)
 8001b1c:	010001c4 	movi	r4,7
 8001b20:	20819a16 	blt	r4,r2,800218c <___svfprintf_internal_r+0x16a4>
 8001b24:	42000204 	addi	r8,r8,8
 8001b28:	003e1306 	br	8001378 <__alt_data_end+0xfc001378>
 8001b2c:	d9403317 	ldw	r5,204(sp)
 8001b30:	00800044 	movi	r2,1
 8001b34:	18c00044 	addi	r3,r3,1
 8001b38:	1141710e 	bge	r2,r5,8002100 <___svfprintf_internal_r+0x1618>
 8001b3c:	dc401f17 	ldw	r17,124(sp)
 8001b40:	00800044 	movi	r2,1
 8001b44:	40800115 	stw	r2,4(r8)
 8001b48:	8c400044 	addi	r17,r17,1
 8001b4c:	44000015 	stw	r16,0(r8)
 8001b50:	d8c02015 	stw	r3,128(sp)
 8001b54:	dc401f15 	stw	r17,124(sp)
 8001b58:	008001c4 	movi	r2,7
 8001b5c:	14417416 	blt	r2,r17,8002130 <___svfprintf_internal_r+0x1648>
 8001b60:	42000204 	addi	r8,r8,8
 8001b64:	d8803817 	ldw	r2,224(sp)
 8001b68:	d9003417 	ldw	r4,208(sp)
 8001b6c:	8c400044 	addi	r17,r17,1
 8001b70:	10c7883a 	add	r3,r2,r3
 8001b74:	40800115 	stw	r2,4(r8)
 8001b78:	41000015 	stw	r4,0(r8)
 8001b7c:	d8c02015 	stw	r3,128(sp)
 8001b80:	dc401f15 	stw	r17,124(sp)
 8001b84:	008001c4 	movi	r2,7
 8001b88:	14417216 	blt	r2,r17,8002154 <___svfprintf_internal_r+0x166c>
 8001b8c:	45800204 	addi	r22,r8,8
 8001b90:	d9003617 	ldw	r4,216(sp)
 8001b94:	d9403717 	ldw	r5,220(sp)
 8001b98:	000d883a 	mov	r6,zero
 8001b9c:	000f883a 	mov	r7,zero
 8001ba0:	d8c03d15 	stw	r3,244(sp)
 8001ba4:	800a5740 	call	800a574 <__eqdf2>
 8001ba8:	d8c03d17 	ldw	r3,244(sp)
 8001bac:	1000b326 	beq	r2,zero,8001e7c <___svfprintf_internal_r+0x1394>
 8001bb0:	d9403317 	ldw	r5,204(sp)
 8001bb4:	84000044 	addi	r16,r16,1
 8001bb8:	8c400044 	addi	r17,r17,1
 8001bbc:	28bfffc4 	addi	r2,r5,-1
 8001bc0:	1887883a 	add	r3,r3,r2
 8001bc4:	b0800115 	stw	r2,4(r22)
 8001bc8:	b4000015 	stw	r16,0(r22)
 8001bcc:	d8c02015 	stw	r3,128(sp)
 8001bd0:	dc401f15 	stw	r17,124(sp)
 8001bd4:	008001c4 	movi	r2,7
 8001bd8:	1440d216 	blt	r2,r17,8001f24 <___svfprintf_internal_r+0x143c>
 8001bdc:	b5800204 	addi	r22,r22,8
 8001be0:	d9003b17 	ldw	r4,236(sp)
 8001be4:	df0022c4 	addi	fp,sp,139
 8001be8:	8c400044 	addi	r17,r17,1
 8001bec:	20c7883a 	add	r3,r4,r3
 8001bf0:	b7000015 	stw	fp,0(r22)
 8001bf4:	b1000115 	stw	r4,4(r22)
 8001bf8:	d8c02015 	stw	r3,128(sp)
 8001bfc:	dc401f15 	stw	r17,124(sp)
 8001c00:	008001c4 	movi	r2,7
 8001c04:	14400e16 	blt	r2,r17,8001c40 <___svfprintf_internal_r+0x1158>
 8001c08:	b2000204 	addi	r8,r22,8
 8001c0c:	003e1a06 	br	8001478 <__alt_data_end+0xfc001478>
 8001c10:	01020074 	movhi	r4,2049
 8001c14:	2137ef84 	addi	r4,r4,-8258
 8001c18:	d9002c15 	stw	r4,176(sp)
 8001c1c:	d9002c17 	ldw	r4,176(sp)
 8001c20:	1c07883a 	add	r3,r3,r16
 8001c24:	44000115 	stw	r16,4(r8)
 8001c28:	41000015 	stw	r4,0(r8)
 8001c2c:	10800044 	addi	r2,r2,1
 8001c30:	d8c02015 	stw	r3,128(sp)
 8001c34:	d8801f15 	stw	r2,124(sp)
 8001c38:	010001c4 	movi	r4,7
 8001c3c:	20be0d0e 	bge	r4,r2,8001474 <__alt_data_end+0xfc001474>
 8001c40:	d9402d17 	ldw	r5,180(sp)
 8001c44:	d9801e04 	addi	r6,sp,120
 8001c48:	9809883a 	mov	r4,r19
 8001c4c:	80063c40 	call	80063c4 <__ssprint_r>
 8001c50:	103c8c1e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001c54:	d8c02017 	ldw	r3,128(sp)
 8001c58:	da000404 	addi	r8,sp,16
 8001c5c:	003e0606 	br	8001478 <__alt_data_end+0xfc001478>
 8001c60:	d9402d17 	ldw	r5,180(sp)
 8001c64:	d9801e04 	addi	r6,sp,120
 8001c68:	9809883a 	mov	r4,r19
 8001c6c:	80063c40 	call	80063c4 <__ssprint_r>
 8001c70:	103e3d26 	beq	r2,zero,8001568 <__alt_data_end+0xfc001568>
 8001c74:	003c8306 	br	8000e84 <__alt_data_end+0xfc000e84>
 8001c78:	d9402d17 	ldw	r5,180(sp)
 8001c7c:	d9801e04 	addi	r6,sp,120
 8001c80:	9809883a 	mov	r4,r19
 8001c84:	80063c40 	call	80063c4 <__ssprint_r>
 8001c88:	103c7e1e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001c8c:	d8c02017 	ldw	r3,128(sp)
 8001c90:	da000404 	addi	r8,sp,16
 8001c94:	003deb06 	br	8001444 <__alt_data_end+0xfc001444>
 8001c98:	d9402d17 	ldw	r5,180(sp)
 8001c9c:	d9801e04 	addi	r6,sp,120
 8001ca0:	9809883a 	mov	r4,r19
 8001ca4:	80063c40 	call	80063c4 <__ssprint_r>
 8001ca8:	103c761e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001cac:	d8c02017 	ldw	r3,128(sp)
 8001cb0:	da000404 	addi	r8,sp,16
 8001cb4:	003d9f06 	br	8001334 <__alt_data_end+0xfc001334>
 8001cb8:	d9402d17 	ldw	r5,180(sp)
 8001cbc:	d9801e04 	addi	r6,sp,120
 8001cc0:	9809883a 	mov	r4,r19
 8001cc4:	80063c40 	call	80063c4 <__ssprint_r>
 8001cc8:	103c6e1e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001ccc:	d8c02017 	ldw	r3,128(sp)
 8001cd0:	da000404 	addi	r8,sp,16
 8001cd4:	003da506 	br	800136c <__alt_data_end+0xfc00136c>
 8001cd8:	d9402a17 	ldw	r5,168(sp)
 8001cdc:	d8002785 	stb	zero,158(sp)
 8001ce0:	283f0816 	blt	r5,zero,8001904 <__alt_data_end+0xfc001904>
 8001ce4:	00ffdfc4 	movi	r3,-129
 8001ce8:	a584b03a 	or	r2,r20,r22
 8001cec:	90e4703a 	and	r18,r18,r3
 8001cf0:	103c5126 	beq	r2,zero,8000e38 <__alt_data_end+0xfc000e38>
 8001cf4:	0039883a 	mov	fp,zero
 8001cf8:	003e5a06 	br	8001664 <__alt_data_end+0xfc001664>
 8001cfc:	9080040c 	andi	r2,r18,16
 8001d00:	10013d26 	beq	r2,zero,80021f8 <___svfprintf_internal_r+0x1710>
 8001d04:	d8c02e17 	ldw	r3,184(sp)
 8001d08:	d9002a17 	ldw	r4,168(sp)
 8001d0c:	d8002785 	stb	zero,158(sp)
 8001d10:	18800104 	addi	r2,r3,4
 8001d14:	1d000017 	ldw	r20,0(r3)
 8001d18:	002d883a 	mov	r22,zero
 8001d1c:	20013f16 	blt	r4,zero,800221c <___svfprintf_internal_r+0x1734>
 8001d20:	00ffdfc4 	movi	r3,-129
 8001d24:	d8802e15 	stw	r2,184(sp)
 8001d28:	90e4703a 	and	r18,r18,r3
 8001d2c:	a03d0926 	beq	r20,zero,8001154 <__alt_data_end+0xfc001154>
 8001d30:	0039883a 	mov	fp,zero
 8001d34:	003d0c06 	br	8001168 <__alt_data_end+0xfc001168>
 8001d38:	dc402617 	ldw	r17,152(sp)
 8001d3c:	0441830e 	bge	zero,r17,800234c <___svfprintf_internal_r+0x1864>
 8001d40:	dc403217 	ldw	r17,200(sp)
 8001d44:	d8803317 	ldw	r2,204(sp)
 8001d48:	1440010e 	bge	r2,r17,8001d50 <___svfprintf_internal_r+0x1268>
 8001d4c:	1023883a 	mov	r17,r2
 8001d50:	04400a0e 	bge	zero,r17,8001d7c <___svfprintf_internal_r+0x1294>
 8001d54:	d8801f17 	ldw	r2,124(sp)
 8001d58:	1c47883a 	add	r3,r3,r17
 8001d5c:	44000015 	stw	r16,0(r8)
 8001d60:	10800044 	addi	r2,r2,1
 8001d64:	44400115 	stw	r17,4(r8)
 8001d68:	d8c02015 	stw	r3,128(sp)
 8001d6c:	d8801f15 	stw	r2,124(sp)
 8001d70:	010001c4 	movi	r4,7
 8001d74:	20827516 	blt	r4,r2,800274c <___svfprintf_internal_r+0x1c64>
 8001d78:	42000204 	addi	r8,r8,8
 8001d7c:	88027b16 	blt	r17,zero,800276c <___svfprintf_internal_r+0x1c84>
 8001d80:	d9003217 	ldw	r4,200(sp)
 8001d84:	2463c83a 	sub	r17,r4,r17
 8001d88:	0440990e 	bge	zero,r17,8001ff0 <___svfprintf_internal_r+0x1508>
 8001d8c:	05800404 	movi	r22,16
 8001d90:	d8801f17 	ldw	r2,124(sp)
 8001d94:	b441530e 	bge	r22,r17,80022e4 <___svfprintf_internal_r+0x17fc>
 8001d98:	01020074 	movhi	r4,2049
 8001d9c:	2137ef84 	addi	r4,r4,-8258
 8001da0:	d9002c15 	stw	r4,176(sp)
 8001da4:	070001c4 	movi	fp,7
 8001da8:	dd002d17 	ldw	r20,180(sp)
 8001dac:	00000306 	br	8001dbc <___svfprintf_internal_r+0x12d4>
 8001db0:	42000204 	addi	r8,r8,8
 8001db4:	8c7ffc04 	addi	r17,r17,-16
 8001db8:	b4414d0e 	bge	r22,r17,80022f0 <___svfprintf_internal_r+0x1808>
 8001dbc:	18c00404 	addi	r3,r3,16
 8001dc0:	10800044 	addi	r2,r2,1
 8001dc4:	45400015 	stw	r21,0(r8)
 8001dc8:	45800115 	stw	r22,4(r8)
 8001dcc:	d8c02015 	stw	r3,128(sp)
 8001dd0:	d8801f15 	stw	r2,124(sp)
 8001dd4:	e0bff60e 	bge	fp,r2,8001db0 <__alt_data_end+0xfc001db0>
 8001dd8:	d9801e04 	addi	r6,sp,120
 8001ddc:	a00b883a 	mov	r5,r20
 8001de0:	9809883a 	mov	r4,r19
 8001de4:	80063c40 	call	80063c4 <__ssprint_r>
 8001de8:	103c261e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001dec:	d8c02017 	ldw	r3,128(sp)
 8001df0:	d8801f17 	ldw	r2,124(sp)
 8001df4:	da000404 	addi	r8,sp,16
 8001df8:	003fee06 	br	8001db4 <__alt_data_end+0xfc001db4>
 8001dfc:	d9402d17 	ldw	r5,180(sp)
 8001e00:	d9801e04 	addi	r6,sp,120
 8001e04:	9809883a 	mov	r4,r19
 8001e08:	80063c40 	call	80063c4 <__ssprint_r>
 8001e0c:	103c1d1e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001e10:	d8c02017 	ldw	r3,128(sp)
 8001e14:	df002787 	ldb	fp,158(sp)
 8001e18:	da000404 	addi	r8,sp,16
 8001e1c:	003d3806 	br	8001300 <__alt_data_end+0xfc001300>
 8001e20:	9080040c 	andi	r2,r18,16
 8001e24:	10005c26 	beq	r2,zero,8001f98 <___svfprintf_internal_r+0x14b0>
 8001e28:	d8c02e17 	ldw	r3,184(sp)
 8001e2c:	d9002a17 	ldw	r4,168(sp)
 8001e30:	d8002785 	stb	zero,158(sp)
 8001e34:	18800104 	addi	r2,r3,4
 8001e38:	1d000017 	ldw	r20,0(r3)
 8001e3c:	002d883a 	mov	r22,zero
 8001e40:	20005e16 	blt	r4,zero,8001fbc <___svfprintf_internal_r+0x14d4>
 8001e44:	00ffdfc4 	movi	r3,-129
 8001e48:	d8802e15 	stw	r2,184(sp)
 8001e4c:	90e4703a 	and	r18,r18,r3
 8001e50:	0039883a 	mov	fp,zero
 8001e54:	a03ddf26 	beq	r20,zero,80015d4 <__alt_data_end+0xfc0015d4>
 8001e58:	00800244 	movi	r2,9
 8001e5c:	153c8e36 	bltu	r2,r20,8001098 <__alt_data_end+0xfc001098>
 8001e60:	a5000c04 	addi	r20,r20,48
 8001e64:	dc001dc4 	addi	r16,sp,119
 8001e68:	dd001dc5 	stb	r20,119(sp)
 8001e6c:	d8c02817 	ldw	r3,160(sp)
 8001e70:	1c07c83a 	sub	r3,r3,r16
 8001e74:	d8c02b15 	stw	r3,172(sp)
 8001e78:	003cd306 	br	80011c8 <__alt_data_end+0xfc0011c8>
 8001e7c:	d8803317 	ldw	r2,204(sp)
 8001e80:	143fffc4 	addi	r16,r2,-1
 8001e84:	043f560e 	bge	zero,r16,8001be0 <__alt_data_end+0xfc001be0>
 8001e88:	07000404 	movi	fp,16
 8001e8c:	e403530e 	bge	fp,r16,8002bdc <___svfprintf_internal_r+0x20f4>
 8001e90:	01420074 	movhi	r5,2049
 8001e94:	2977ef84 	addi	r5,r5,-8258
 8001e98:	d9402c15 	stw	r5,176(sp)
 8001e9c:	01c001c4 	movi	r7,7
 8001ea0:	dd002d17 	ldw	r20,180(sp)
 8001ea4:	00000306 	br	8001eb4 <___svfprintf_internal_r+0x13cc>
 8001ea8:	843ffc04 	addi	r16,r16,-16
 8001eac:	b5800204 	addi	r22,r22,8
 8001eb0:	e400130e 	bge	fp,r16,8001f00 <___svfprintf_internal_r+0x1418>
 8001eb4:	18c00404 	addi	r3,r3,16
 8001eb8:	8c400044 	addi	r17,r17,1
 8001ebc:	b5400015 	stw	r21,0(r22)
 8001ec0:	b7000115 	stw	fp,4(r22)
 8001ec4:	d8c02015 	stw	r3,128(sp)
 8001ec8:	dc401f15 	stw	r17,124(sp)
 8001ecc:	3c7ff60e 	bge	r7,r17,8001ea8 <__alt_data_end+0xfc001ea8>
 8001ed0:	d9801e04 	addi	r6,sp,120
 8001ed4:	a00b883a 	mov	r5,r20
 8001ed8:	9809883a 	mov	r4,r19
 8001edc:	d9c03d15 	stw	r7,244(sp)
 8001ee0:	80063c40 	call	80063c4 <__ssprint_r>
 8001ee4:	d9c03d17 	ldw	r7,244(sp)
 8001ee8:	103be61e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001eec:	843ffc04 	addi	r16,r16,-16
 8001ef0:	d8c02017 	ldw	r3,128(sp)
 8001ef4:	dc401f17 	ldw	r17,124(sp)
 8001ef8:	dd800404 	addi	r22,sp,16
 8001efc:	e43fed16 	blt	fp,r16,8001eb4 <__alt_data_end+0xfc001eb4>
 8001f00:	d8802c17 	ldw	r2,176(sp)
 8001f04:	1c07883a 	add	r3,r3,r16
 8001f08:	8c400044 	addi	r17,r17,1
 8001f0c:	b0800015 	stw	r2,0(r22)
 8001f10:	b4000115 	stw	r16,4(r22)
 8001f14:	d8c02015 	stw	r3,128(sp)
 8001f18:	dc401f15 	stw	r17,124(sp)
 8001f1c:	008001c4 	movi	r2,7
 8001f20:	147f2e0e 	bge	r2,r17,8001bdc <__alt_data_end+0xfc001bdc>
 8001f24:	d9402d17 	ldw	r5,180(sp)
 8001f28:	d9801e04 	addi	r6,sp,120
 8001f2c:	9809883a 	mov	r4,r19
 8001f30:	80063c40 	call	80063c4 <__ssprint_r>
 8001f34:	103bd31e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001f38:	d8c02017 	ldw	r3,128(sp)
 8001f3c:	dc401f17 	ldw	r17,124(sp)
 8001f40:	dd800404 	addi	r22,sp,16
 8001f44:	003f2606 	br	8001be0 <__alt_data_end+0xfc001be0>
 8001f48:	9080040c 	andi	r2,r18,16
 8001f4c:	1000c326 	beq	r2,zero,800225c <___svfprintf_internal_r+0x1774>
 8001f50:	d9402e17 	ldw	r5,184(sp)
 8001f54:	2d000017 	ldw	r20,0(r5)
 8001f58:	29400104 	addi	r5,r5,4
 8001f5c:	d9402e15 	stw	r5,184(sp)
 8001f60:	a02dd7fa 	srai	r22,r20,31
 8001f64:	b005883a 	mov	r2,r22
 8001f68:	103c430e 	bge	r2,zero,8001078 <__alt_data_end+0xfc001078>
 8001f6c:	d9402a17 	ldw	r5,168(sp)
 8001f70:	0529c83a 	sub	r20,zero,r20
 8001f74:	07000b44 	movi	fp,45
 8001f78:	a004c03a 	cmpne	r2,r20,zero
 8001f7c:	05adc83a 	sub	r22,zero,r22
 8001f80:	df002785 	stb	fp,158(sp)
 8001f84:	b0adc83a 	sub	r22,r22,r2
 8001f88:	28022e16 	blt	r5,zero,8002844 <___svfprintf_internal_r+0x1d5c>
 8001f8c:	00bfdfc4 	movi	r2,-129
 8001f90:	90a4703a 	and	r18,r18,r2
 8001f94:	003c3f06 	br	8001094 <__alt_data_end+0xfc001094>
 8001f98:	9080100c 	andi	r2,r18,64
 8001f9c:	d8002785 	stb	zero,158(sp)
 8001fa0:	10012526 	beq	r2,zero,8002438 <___svfprintf_internal_r+0x1950>
 8001fa4:	d9402e17 	ldw	r5,184(sp)
 8001fa8:	d8c02a17 	ldw	r3,168(sp)
 8001fac:	002d883a 	mov	r22,zero
 8001fb0:	28800104 	addi	r2,r5,4
 8001fb4:	2d00000b 	ldhu	r20,0(r5)
 8001fb8:	183fa20e 	bge	r3,zero,8001e44 <__alt_data_end+0xfc001e44>
 8001fbc:	d8802e15 	stw	r2,184(sp)
 8001fc0:	0039883a 	mov	fp,zero
 8001fc4:	a584b03a 	or	r2,r20,r22
 8001fc8:	103c321e 	bne	r2,zero,8001094 <__alt_data_end+0xfc001094>
 8001fcc:	00800044 	movi	r2,1
 8001fd0:	003e5006 	br	8001914 <__alt_data_end+0xfc001914>
 8001fd4:	d9402d17 	ldw	r5,180(sp)
 8001fd8:	d9801e04 	addi	r6,sp,120
 8001fdc:	9809883a 	mov	r4,r19
 8001fe0:	80063c40 	call	80063c4 <__ssprint_r>
 8001fe4:	103ba71e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8001fe8:	d8c02017 	ldw	r3,128(sp)
 8001fec:	da000404 	addi	r8,sp,16
 8001ff0:	d9003217 	ldw	r4,200(sp)
 8001ff4:	d8802617 	ldw	r2,152(sp)
 8001ff8:	d9403317 	ldw	r5,204(sp)
 8001ffc:	8123883a 	add	r17,r16,r4
 8002000:	11400216 	blt	r2,r5,800200c <___svfprintf_internal_r+0x1524>
 8002004:	9100004c 	andi	r4,r18,1
 8002008:	20000d26 	beq	r4,zero,8002040 <___svfprintf_internal_r+0x1558>
 800200c:	d9003817 	ldw	r4,224(sp)
 8002010:	d9403417 	ldw	r5,208(sp)
 8002014:	1907883a 	add	r3,r3,r4
 8002018:	d9001f17 	ldw	r4,124(sp)
 800201c:	41400015 	stw	r5,0(r8)
 8002020:	d9403817 	ldw	r5,224(sp)
 8002024:	21000044 	addi	r4,r4,1
 8002028:	d8c02015 	stw	r3,128(sp)
 800202c:	41400115 	stw	r5,4(r8)
 8002030:	d9001f15 	stw	r4,124(sp)
 8002034:	014001c4 	movi	r5,7
 8002038:	2901dc16 	blt	r5,r4,80027ac <___svfprintf_internal_r+0x1cc4>
 800203c:	42000204 	addi	r8,r8,8
 8002040:	d9003317 	ldw	r4,204(sp)
 8002044:	8121883a 	add	r16,r16,r4
 8002048:	2085c83a 	sub	r2,r4,r2
 800204c:	8461c83a 	sub	r16,r16,r17
 8002050:	1400010e 	bge	r2,r16,8002058 <___svfprintf_internal_r+0x1570>
 8002054:	1021883a 	mov	r16,r2
 8002058:	04000a0e 	bge	zero,r16,8002084 <___svfprintf_internal_r+0x159c>
 800205c:	d9001f17 	ldw	r4,124(sp)
 8002060:	1c07883a 	add	r3,r3,r16
 8002064:	44400015 	stw	r17,0(r8)
 8002068:	21000044 	addi	r4,r4,1
 800206c:	44000115 	stw	r16,4(r8)
 8002070:	d8c02015 	stw	r3,128(sp)
 8002074:	d9001f15 	stw	r4,124(sp)
 8002078:	014001c4 	movi	r5,7
 800207c:	2901e616 	blt	r5,r4,8002818 <___svfprintf_internal_r+0x1d30>
 8002080:	42000204 	addi	r8,r8,8
 8002084:	8001f616 	blt	r16,zero,8002860 <___svfprintf_internal_r+0x1d78>
 8002088:	1421c83a 	sub	r16,r2,r16
 800208c:	043cfa0e 	bge	zero,r16,8001478 <__alt_data_end+0xfc001478>
 8002090:	04400404 	movi	r17,16
 8002094:	d8801f17 	ldw	r2,124(sp)
 8002098:	8c3edd0e 	bge	r17,r16,8001c10 <__alt_data_end+0xfc001c10>
 800209c:	01420074 	movhi	r5,2049
 80020a0:	2977ef84 	addi	r5,r5,-8258
 80020a4:	d9402c15 	stw	r5,176(sp)
 80020a8:	058001c4 	movi	r22,7
 80020ac:	dd002d17 	ldw	r20,180(sp)
 80020b0:	00000306 	br	80020c0 <___svfprintf_internal_r+0x15d8>
 80020b4:	42000204 	addi	r8,r8,8
 80020b8:	843ffc04 	addi	r16,r16,-16
 80020bc:	8c3ed70e 	bge	r17,r16,8001c1c <__alt_data_end+0xfc001c1c>
 80020c0:	18c00404 	addi	r3,r3,16
 80020c4:	10800044 	addi	r2,r2,1
 80020c8:	45400015 	stw	r21,0(r8)
 80020cc:	44400115 	stw	r17,4(r8)
 80020d0:	d8c02015 	stw	r3,128(sp)
 80020d4:	d8801f15 	stw	r2,124(sp)
 80020d8:	b0bff60e 	bge	r22,r2,80020b4 <__alt_data_end+0xfc0020b4>
 80020dc:	d9801e04 	addi	r6,sp,120
 80020e0:	a00b883a 	mov	r5,r20
 80020e4:	9809883a 	mov	r4,r19
 80020e8:	80063c40 	call	80063c4 <__ssprint_r>
 80020ec:	103b651e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80020f0:	d8c02017 	ldw	r3,128(sp)
 80020f4:	d8801f17 	ldw	r2,124(sp)
 80020f8:	da000404 	addi	r8,sp,16
 80020fc:	003fee06 	br	80020b8 <__alt_data_end+0xfc0020b8>
 8002100:	9088703a 	and	r4,r18,r2
 8002104:	203e8d1e 	bne	r4,zero,8001b3c <__alt_data_end+0xfc001b3c>
 8002108:	dc401f17 	ldw	r17,124(sp)
 800210c:	40800115 	stw	r2,4(r8)
 8002110:	44000015 	stw	r16,0(r8)
 8002114:	8c400044 	addi	r17,r17,1
 8002118:	d8c02015 	stw	r3,128(sp)
 800211c:	dc401f15 	stw	r17,124(sp)
 8002120:	008001c4 	movi	r2,7
 8002124:	147f7f16 	blt	r2,r17,8001f24 <__alt_data_end+0xfc001f24>
 8002128:	45800204 	addi	r22,r8,8
 800212c:	003eac06 	br	8001be0 <__alt_data_end+0xfc001be0>
 8002130:	d9402d17 	ldw	r5,180(sp)
 8002134:	d9801e04 	addi	r6,sp,120
 8002138:	9809883a 	mov	r4,r19
 800213c:	80063c40 	call	80063c4 <__ssprint_r>
 8002140:	103b501e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8002144:	d8c02017 	ldw	r3,128(sp)
 8002148:	dc401f17 	ldw	r17,124(sp)
 800214c:	da000404 	addi	r8,sp,16
 8002150:	003e8406 	br	8001b64 <__alt_data_end+0xfc001b64>
 8002154:	d9402d17 	ldw	r5,180(sp)
 8002158:	d9801e04 	addi	r6,sp,120
 800215c:	9809883a 	mov	r4,r19
 8002160:	80063c40 	call	80063c4 <__ssprint_r>
 8002164:	103b471e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8002168:	d8c02017 	ldw	r3,128(sp)
 800216c:	dc401f17 	ldw	r17,124(sp)
 8002170:	dd800404 	addi	r22,sp,16
 8002174:	003e8606 	br	8001b90 <__alt_data_end+0xfc001b90>
 8002178:	0029883a 	mov	r20,zero
 800217c:	a5000c04 	addi	r20,r20,48
 8002180:	dc001dc4 	addi	r16,sp,119
 8002184:	dd001dc5 	stb	r20,119(sp)
 8002188:	003f3806 	br	8001e6c <__alt_data_end+0xfc001e6c>
 800218c:	d9402d17 	ldw	r5,180(sp)
 8002190:	d9801e04 	addi	r6,sp,120
 8002194:	9809883a 	mov	r4,r19
 8002198:	80063c40 	call	80063c4 <__ssprint_r>
 800219c:	103b391e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80021a0:	d8c02017 	ldw	r3,128(sp)
 80021a4:	da000404 	addi	r8,sp,16
 80021a8:	003c7306 	br	8001378 <__alt_data_end+0xfc001378>
 80021ac:	d9003617 	ldw	r4,216(sp)
 80021b0:	d9403717 	ldw	r5,220(sp)
 80021b4:	da003e15 	stw	r8,248(sp)
 80021b8:	80062200 	call	8006220 <__fpclassifyd>
 80021bc:	da003e17 	ldw	r8,248(sp)
 80021c0:	1000bd1e 	bne	r2,zero,80024b8 <___svfprintf_internal_r+0x19d0>
 80021c4:	008011c4 	movi	r2,71
 80021c8:	14411e0e 	bge	r2,r17,8002644 <___svfprintf_internal_r+0x1b5c>
 80021cc:	04020074 	movhi	r16,2049
 80021d0:	8437e204 	addi	r16,r16,-8312
 80021d4:	00c000c4 	movi	r3,3
 80021d8:	00bfdfc4 	movi	r2,-129
 80021dc:	d8c02915 	stw	r3,164(sp)
 80021e0:	90a4703a 	and	r18,r18,r2
 80021e4:	df002783 	ldbu	fp,158(sp)
 80021e8:	d8c02b15 	stw	r3,172(sp)
 80021ec:	d8002a15 	stw	zero,168(sp)
 80021f0:	d8003215 	stw	zero,200(sp)
 80021f4:	003bfa06 	br	80011e0 <__alt_data_end+0xfc0011e0>
 80021f8:	9080100c 	andi	r2,r18,64
 80021fc:	d8002785 	stb	zero,158(sp)
 8002200:	10009426 	beq	r2,zero,8002454 <___svfprintf_internal_r+0x196c>
 8002204:	d9402e17 	ldw	r5,184(sp)
 8002208:	d8c02a17 	ldw	r3,168(sp)
 800220c:	002d883a 	mov	r22,zero
 8002210:	28800104 	addi	r2,r5,4
 8002214:	2d00000b 	ldhu	r20,0(r5)
 8002218:	183ec10e 	bge	r3,zero,8001d20 <__alt_data_end+0xfc001d20>
 800221c:	a586b03a 	or	r3,r20,r22
 8002220:	d8802e15 	stw	r2,184(sp)
 8002224:	183ec21e 	bne	r3,zero,8001d30 <__alt_data_end+0xfc001d30>
 8002228:	0039883a 	mov	fp,zero
 800222c:	0005883a 	mov	r2,zero
 8002230:	003db806 	br	8001914 <__alt_data_end+0xfc001914>
 8002234:	d8c02e17 	ldw	r3,184(sp)
 8002238:	d9002e17 	ldw	r4,184(sp)
 800223c:	d9402e17 	ldw	r5,184(sp)
 8002240:	18c00017 	ldw	r3,0(r3)
 8002244:	21000117 	ldw	r4,4(r4)
 8002248:	29400204 	addi	r5,r5,8
 800224c:	d8c03615 	stw	r3,216(sp)
 8002250:	d9003715 	stw	r4,220(sp)
 8002254:	d9402e15 	stw	r5,184(sp)
 8002258:	003b5a06 	br	8000fc4 <__alt_data_end+0xfc000fc4>
 800225c:	9080100c 	andi	r2,r18,64
 8002260:	10010726 	beq	r2,zero,8002680 <___svfprintf_internal_r+0x1b98>
 8002264:	d8802e17 	ldw	r2,184(sp)
 8002268:	1500000f 	ldh	r20,0(r2)
 800226c:	10800104 	addi	r2,r2,4
 8002270:	d8802e15 	stw	r2,184(sp)
 8002274:	a02dd7fa 	srai	r22,r20,31
 8002278:	b005883a 	mov	r2,r22
 800227c:	003b7d06 	br	8001074 <__alt_data_end+0xfc001074>
 8002280:	9080100c 	andi	r2,r18,64
 8002284:	10010526 	beq	r2,zero,800269c <___svfprintf_internal_r+0x1bb4>
 8002288:	d8c02e17 	ldw	r3,184(sp)
 800228c:	002d883a 	mov	r22,zero
 8002290:	1d00000b 	ldhu	r20,0(r3)
 8002294:	18c00104 	addi	r3,r3,4
 8002298:	d8c02e15 	stw	r3,184(sp)
 800229c:	003ce206 	br	8001628 <__alt_data_end+0xfc001628>
 80022a0:	bc400007 	ldb	r17,0(r23)
 80022a4:	003a6506 	br	8000c3c <__alt_data_end+0xfc000c3c>
 80022a8:	9080040c 	andi	r2,r18,16
 80022ac:	10010126 	beq	r2,zero,80026b4 <___svfprintf_internal_r+0x1bcc>
 80022b0:	d8c02e17 	ldw	r3,184(sp)
 80022b4:	d9002f17 	ldw	r4,188(sp)
 80022b8:	18800017 	ldw	r2,0(r3)
 80022bc:	18c00104 	addi	r3,r3,4
 80022c0:	d8c02e15 	stw	r3,184(sp)
 80022c4:	11000015 	stw	r4,0(r2)
 80022c8:	003a3206 	br	8000b94 <__alt_data_end+0xfc000b94>
 80022cc:	d9002a17 	ldw	r4,168(sp)
 80022d0:	d8002785 	stb	zero,158(sp)
 80022d4:	203d8d16 	blt	r4,zero,800190c <__alt_data_end+0xfc00190c>
 80022d8:	00bfdfc4 	movi	r2,-129
 80022dc:	90a4703a 	and	r18,r18,r2
 80022e0:	003ad506 	br	8000e38 <__alt_data_end+0xfc000e38>
 80022e4:	01420074 	movhi	r5,2049
 80022e8:	2977ef84 	addi	r5,r5,-8258
 80022ec:	d9402c15 	stw	r5,176(sp)
 80022f0:	d9402c17 	ldw	r5,176(sp)
 80022f4:	1c47883a 	add	r3,r3,r17
 80022f8:	10800044 	addi	r2,r2,1
 80022fc:	41400015 	stw	r5,0(r8)
 8002300:	44400115 	stw	r17,4(r8)
 8002304:	d8c02015 	stw	r3,128(sp)
 8002308:	d8801f15 	stw	r2,124(sp)
 800230c:	010001c4 	movi	r4,7
 8002310:	20bf3016 	blt	r4,r2,8001fd4 <__alt_data_end+0xfc001fd4>
 8002314:	42000204 	addi	r8,r8,8
 8002318:	003f3506 	br	8001ff0 <__alt_data_end+0xfc001ff0>
 800231c:	01020074 	movhi	r4,2049
 8002320:	2137ef84 	addi	r4,r4,-8258
 8002324:	d9002c15 	stw	r4,176(sp)
 8002328:	003c3c06 	br	800141c <__alt_data_end+0xfc00141c>
 800232c:	d9402d17 	ldw	r5,180(sp)
 8002330:	d9801e04 	addi	r6,sp,120
 8002334:	9809883a 	mov	r4,r19
 8002338:	80063c40 	call	80063c4 <__ssprint_r>
 800233c:	103ad11e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8002340:	d8c02017 	ldw	r3,128(sp)
 8002344:	da000404 	addi	r8,sp,16
 8002348:	003d9306 	br	8001998 <__alt_data_end+0xfc001998>
 800234c:	d8801f17 	ldw	r2,124(sp)
 8002350:	01420074 	movhi	r5,2049
 8002354:	01000044 	movi	r4,1
 8002358:	18c00044 	addi	r3,r3,1
 800235c:	10800044 	addi	r2,r2,1
 8002360:	2977ef04 	addi	r5,r5,-8260
 8002364:	41000115 	stw	r4,4(r8)
 8002368:	41400015 	stw	r5,0(r8)
 800236c:	d8c02015 	stw	r3,128(sp)
 8002370:	d8801f15 	stw	r2,124(sp)
 8002374:	010001c4 	movi	r4,7
 8002378:	2080b516 	blt	r4,r2,8002650 <___svfprintf_internal_r+0x1b68>
 800237c:	42000204 	addi	r8,r8,8
 8002380:	8800041e 	bne	r17,zero,8002394 <___svfprintf_internal_r+0x18ac>
 8002384:	d8803317 	ldw	r2,204(sp)
 8002388:	1000021e 	bne	r2,zero,8002394 <___svfprintf_internal_r+0x18ac>
 800238c:	9080004c 	andi	r2,r18,1
 8002390:	103c3926 	beq	r2,zero,8001478 <__alt_data_end+0xfc001478>
 8002394:	d9003817 	ldw	r4,224(sp)
 8002398:	d8801f17 	ldw	r2,124(sp)
 800239c:	d9403417 	ldw	r5,208(sp)
 80023a0:	20c7883a 	add	r3,r4,r3
 80023a4:	10800044 	addi	r2,r2,1
 80023a8:	41000115 	stw	r4,4(r8)
 80023ac:	41400015 	stw	r5,0(r8)
 80023b0:	d8c02015 	stw	r3,128(sp)
 80023b4:	d8801f15 	stw	r2,124(sp)
 80023b8:	010001c4 	movi	r4,7
 80023bc:	20818016 	blt	r4,r2,80029c0 <___svfprintf_internal_r+0x1ed8>
 80023c0:	42000204 	addi	r8,r8,8
 80023c4:	0463c83a 	sub	r17,zero,r17
 80023c8:	0440cb0e 	bge	zero,r17,80026f8 <___svfprintf_internal_r+0x1c10>
 80023cc:	05800404 	movi	r22,16
 80023d0:	b440e80e 	bge	r22,r17,8002774 <___svfprintf_internal_r+0x1c8c>
 80023d4:	01420074 	movhi	r5,2049
 80023d8:	2977ef84 	addi	r5,r5,-8258
 80023dc:	d9402c15 	stw	r5,176(sp)
 80023e0:	070001c4 	movi	fp,7
 80023e4:	dd002d17 	ldw	r20,180(sp)
 80023e8:	00000306 	br	80023f8 <___svfprintf_internal_r+0x1910>
 80023ec:	42000204 	addi	r8,r8,8
 80023f0:	8c7ffc04 	addi	r17,r17,-16
 80023f4:	b440e20e 	bge	r22,r17,8002780 <___svfprintf_internal_r+0x1c98>
 80023f8:	18c00404 	addi	r3,r3,16
 80023fc:	10800044 	addi	r2,r2,1
 8002400:	45400015 	stw	r21,0(r8)
 8002404:	45800115 	stw	r22,4(r8)
 8002408:	d8c02015 	stw	r3,128(sp)
 800240c:	d8801f15 	stw	r2,124(sp)
 8002410:	e0bff60e 	bge	fp,r2,80023ec <__alt_data_end+0xfc0023ec>
 8002414:	d9801e04 	addi	r6,sp,120
 8002418:	a00b883a 	mov	r5,r20
 800241c:	9809883a 	mov	r4,r19
 8002420:	80063c40 	call	80063c4 <__ssprint_r>
 8002424:	103a971e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8002428:	d8c02017 	ldw	r3,128(sp)
 800242c:	d8801f17 	ldw	r2,124(sp)
 8002430:	da000404 	addi	r8,sp,16
 8002434:	003fee06 	br	80023f0 <__alt_data_end+0xfc0023f0>
 8002438:	d9002e17 	ldw	r4,184(sp)
 800243c:	d9402a17 	ldw	r5,168(sp)
 8002440:	002d883a 	mov	r22,zero
 8002444:	20800104 	addi	r2,r4,4
 8002448:	25000017 	ldw	r20,0(r4)
 800244c:	283e7d0e 	bge	r5,zero,8001e44 <__alt_data_end+0xfc001e44>
 8002450:	003eda06 	br	8001fbc <__alt_data_end+0xfc001fbc>
 8002454:	d9002e17 	ldw	r4,184(sp)
 8002458:	d9402a17 	ldw	r5,168(sp)
 800245c:	002d883a 	mov	r22,zero
 8002460:	20800104 	addi	r2,r4,4
 8002464:	25000017 	ldw	r20,0(r4)
 8002468:	283e2d0e 	bge	r5,zero,8001d20 <__alt_data_end+0xfc001d20>
 800246c:	003f6b06 	br	800221c <__alt_data_end+0xfc00221c>
 8002470:	d8c02e15 	stw	r3,184(sp)
 8002474:	0039883a 	mov	fp,zero
 8002478:	003ed206 	br	8001fc4 <__alt_data_end+0xfc001fc4>
 800247c:	bc400043 	ldbu	r17,1(r23)
 8002480:	84000814 	ori	r16,r16,32
 8002484:	bdc00044 	addi	r23,r23,1
 8002488:	8c403fcc 	andi	r17,r17,255
 800248c:	8c40201c 	xori	r17,r17,128
 8002490:	8c7fe004 	addi	r17,r17,-128
 8002494:	0039e906 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8002498:	d9402d17 	ldw	r5,180(sp)
 800249c:	d9801e04 	addi	r6,sp,120
 80024a0:	9809883a 	mov	r4,r19
 80024a4:	80063c40 	call	80063c4 <__ssprint_r>
 80024a8:	103a761e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80024ac:	d8c02017 	ldw	r3,128(sp)
 80024b0:	da000404 	addi	r8,sp,16
 80024b4:	003d4a06 	br	80019e0 <__alt_data_end+0xfc0019e0>
 80024b8:	d9002a17 	ldw	r4,168(sp)
 80024bc:	05bff7c4 	movi	r22,-33
 80024c0:	00bfffc4 	movi	r2,-1
 80024c4:	8dac703a 	and	r22,r17,r22
 80024c8:	20806a26 	beq	r4,r2,8002674 <___svfprintf_internal_r+0x1b8c>
 80024cc:	008011c4 	movi	r2,71
 80024d0:	b0813726 	beq	r22,r2,80029b0 <___svfprintf_internal_r+0x1ec8>
 80024d4:	d9003717 	ldw	r4,220(sp)
 80024d8:	90c04014 	ori	r3,r18,256
 80024dc:	d8c02c15 	stw	r3,176(sp)
 80024e0:	20015d16 	blt	r4,zero,8002a58 <___svfprintf_internal_r+0x1f70>
 80024e4:	dd003717 	ldw	r20,220(sp)
 80024e8:	d8002905 	stb	zero,164(sp)
 80024ec:	00801984 	movi	r2,102
 80024f0:	88814026 	beq	r17,r2,80029f4 <___svfprintf_internal_r+0x1f0c>
 80024f4:	00801184 	movi	r2,70
 80024f8:	88817126 	beq	r17,r2,8002ac0 <___svfprintf_internal_r+0x1fd8>
 80024fc:	00801144 	movi	r2,69
 8002500:	b0816226 	beq	r22,r2,8002a8c <___svfprintf_internal_r+0x1fa4>
 8002504:	d8c02a17 	ldw	r3,168(sp)
 8002508:	d8802104 	addi	r2,sp,132
 800250c:	d8800315 	stw	r2,12(sp)
 8002510:	d9403617 	ldw	r5,216(sp)
 8002514:	d8802504 	addi	r2,sp,148
 8002518:	d8800215 	stw	r2,8(sp)
 800251c:	d8802604 	addi	r2,sp,152
 8002520:	d8c00015 	stw	r3,0(sp)
 8002524:	d8800115 	stw	r2,4(sp)
 8002528:	01c00084 	movi	r7,2
 800252c:	a00d883a 	mov	r6,r20
 8002530:	9809883a 	mov	r4,r19
 8002534:	d8c03d15 	stw	r3,244(sp)
 8002538:	da003e15 	stw	r8,248(sp)
 800253c:	8002fcc0 	call	8002fcc <_dtoa_r>
 8002540:	1021883a 	mov	r16,r2
 8002544:	008019c4 	movi	r2,103
 8002548:	d8c03d17 	ldw	r3,244(sp)
 800254c:	da003e17 	ldw	r8,248(sp)
 8002550:	8880e726 	beq	r17,r2,80028f0 <___svfprintf_internal_r+0x1e08>
 8002554:	008011c4 	movi	r2,71
 8002558:	8880d426 	beq	r17,r2,80028ac <___svfprintf_internal_r+0x1dc4>
 800255c:	80f9883a 	add	fp,r16,r3
 8002560:	d9003617 	ldw	r4,216(sp)
 8002564:	000d883a 	mov	r6,zero
 8002568:	000f883a 	mov	r7,zero
 800256c:	a00b883a 	mov	r5,r20
 8002570:	da003e15 	stw	r8,248(sp)
 8002574:	800a5740 	call	800a574 <__eqdf2>
 8002578:	da003e17 	ldw	r8,248(sp)
 800257c:	1000e426 	beq	r2,zero,8002910 <___svfprintf_internal_r+0x1e28>
 8002580:	d8802117 	ldw	r2,132(sp)
 8002584:	1700062e 	bgeu	r2,fp,80025a0 <___svfprintf_internal_r+0x1ab8>
 8002588:	01000c04 	movi	r4,48
 800258c:	10c00044 	addi	r3,r2,1
 8002590:	d8c02115 	stw	r3,132(sp)
 8002594:	11000005 	stb	r4,0(r2)
 8002598:	d8802117 	ldw	r2,132(sp)
 800259c:	173ffb36 	bltu	r2,fp,800258c <__alt_data_end+0xfc00258c>
 80025a0:	1405c83a 	sub	r2,r2,r16
 80025a4:	d8803315 	stw	r2,204(sp)
 80025a8:	008011c4 	movi	r2,71
 80025ac:	b080c526 	beq	r22,r2,80028c4 <___svfprintf_internal_r+0x1ddc>
 80025b0:	00801944 	movi	r2,101
 80025b4:	1441d80e 	bge	r2,r17,8002d18 <___svfprintf_internal_r+0x2230>
 80025b8:	d8c02617 	ldw	r3,152(sp)
 80025bc:	00801984 	movi	r2,102
 80025c0:	d8c03215 	stw	r3,200(sp)
 80025c4:	88813426 	beq	r17,r2,8002a98 <___svfprintf_internal_r+0x1fb0>
 80025c8:	d8c03217 	ldw	r3,200(sp)
 80025cc:	d9003317 	ldw	r4,204(sp)
 80025d0:	19012516 	blt	r3,r4,8002a68 <___svfprintf_internal_r+0x1f80>
 80025d4:	9480004c 	andi	r18,r18,1
 80025d8:	9001841e 	bne	r18,zero,8002bec <___svfprintf_internal_r+0x2104>
 80025dc:	1805883a 	mov	r2,r3
 80025e0:	1801cb16 	blt	r3,zero,8002d10 <___svfprintf_internal_r+0x2228>
 80025e4:	d8c03217 	ldw	r3,200(sp)
 80025e8:	044019c4 	movi	r17,103
 80025ec:	d8c02b15 	stw	r3,172(sp)
 80025f0:	df002907 	ldb	fp,164(sp)
 80025f4:	e000a61e 	bne	fp,zero,8002890 <___svfprintf_internal_r+0x1da8>
 80025f8:	df002783 	ldbu	fp,158(sp)
 80025fc:	d8802915 	stw	r2,164(sp)
 8002600:	dc802c17 	ldw	r18,176(sp)
 8002604:	d8002a15 	stw	zero,168(sp)
 8002608:	003af506 	br	80011e0 <__alt_data_end+0xfc0011e0>
 800260c:	04020074 	movhi	r16,2049
 8002610:	8437df04 	addi	r16,r16,-8324
 8002614:	003a7e06 	br	8001010 <__alt_data_end+0xfc001010>
 8002618:	d9003917 	ldw	r4,228(sp)
 800261c:	04001004 	movi	r16,64
 8002620:	800b883a 	mov	r5,r16
 8002624:	80047300 	call	8004730 <_malloc_r>
 8002628:	d9002d17 	ldw	r4,180(sp)
 800262c:	20800015 	stw	r2,0(r4)
 8002630:	20800415 	stw	r2,16(r4)
 8002634:	1001d026 	beq	r2,zero,8002d78 <___svfprintf_internal_r+0x2290>
 8002638:	d8802d17 	ldw	r2,180(sp)
 800263c:	14000515 	stw	r16,20(r2)
 8002640:	00394406 	br	8000b54 <__alt_data_end+0xfc000b54>
 8002644:	04020074 	movhi	r16,2049
 8002648:	8437e104 	addi	r16,r16,-8316
 800264c:	003ee106 	br	80021d4 <__alt_data_end+0xfc0021d4>
 8002650:	d9402d17 	ldw	r5,180(sp)
 8002654:	d9801e04 	addi	r6,sp,120
 8002658:	9809883a 	mov	r4,r19
 800265c:	80063c40 	call	80063c4 <__ssprint_r>
 8002660:	103a081e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8002664:	dc402617 	ldw	r17,152(sp)
 8002668:	d8c02017 	ldw	r3,128(sp)
 800266c:	da000404 	addi	r8,sp,16
 8002670:	003f4306 	br	8002380 <__alt_data_end+0xfc002380>
 8002674:	01400184 	movi	r5,6
 8002678:	d9402a15 	stw	r5,168(sp)
 800267c:	003f9506 	br	80024d4 <__alt_data_end+0xfc0024d4>
 8002680:	d8c02e17 	ldw	r3,184(sp)
 8002684:	1d000017 	ldw	r20,0(r3)
 8002688:	18c00104 	addi	r3,r3,4
 800268c:	d8c02e15 	stw	r3,184(sp)
 8002690:	a02dd7fa 	srai	r22,r20,31
 8002694:	b005883a 	mov	r2,r22
 8002698:	003a7606 	br	8001074 <__alt_data_end+0xfc001074>
 800269c:	d9002e17 	ldw	r4,184(sp)
 80026a0:	002d883a 	mov	r22,zero
 80026a4:	25000017 	ldw	r20,0(r4)
 80026a8:	21000104 	addi	r4,r4,4
 80026ac:	d9002e15 	stw	r4,184(sp)
 80026b0:	003bdd06 	br	8001628 <__alt_data_end+0xfc001628>
 80026b4:	9480100c 	andi	r18,r18,64
 80026b8:	90006e26 	beq	r18,zero,8002874 <___svfprintf_internal_r+0x1d8c>
 80026bc:	d9402e17 	ldw	r5,184(sp)
 80026c0:	d8c02f17 	ldw	r3,188(sp)
 80026c4:	28800017 	ldw	r2,0(r5)
 80026c8:	29400104 	addi	r5,r5,4
 80026cc:	d9402e15 	stw	r5,184(sp)
 80026d0:	10c0000d 	sth	r3,0(r2)
 80026d4:	00392f06 	br	8000b94 <__alt_data_end+0xfc000b94>
 80026d8:	d9402d17 	ldw	r5,180(sp)
 80026dc:	d9801e04 	addi	r6,sp,120
 80026e0:	9809883a 	mov	r4,r19
 80026e4:	80063c40 	call	80063c4 <__ssprint_r>
 80026e8:	1039e61e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80026ec:	d8c02017 	ldw	r3,128(sp)
 80026f0:	d8801f17 	ldw	r2,124(sp)
 80026f4:	da000404 	addi	r8,sp,16
 80026f8:	d9403317 	ldw	r5,204(sp)
 80026fc:	10800044 	addi	r2,r2,1
 8002700:	44000015 	stw	r16,0(r8)
 8002704:	28c7883a 	add	r3,r5,r3
 8002708:	003b5506 	br	8001460 <__alt_data_end+0xfc001460>
 800270c:	8009883a 	mov	r4,r16
 8002710:	df003e15 	stw	fp,248(sp)
 8002714:	8000a500 	call	8000a50 <strlen>
 8002718:	d8802b15 	stw	r2,172(sp)
 800271c:	da003e17 	ldw	r8,248(sp)
 8002720:	103c160e 	bge	r2,zero,800177c <__alt_data_end+0xfc00177c>
 8002724:	0005883a 	mov	r2,zero
 8002728:	003c1406 	br	800177c <__alt_data_end+0xfc00177c>
 800272c:	00bfffc4 	movi	r2,-1
 8002730:	0039d906 	br	8000e98 <__alt_data_end+0xfc000e98>
 8002734:	01020074 	movhi	r4,2049
 8002738:	2137f384 	addi	r4,r4,-8242
 800273c:	d9003515 	stw	r4,212(sp)
 8002740:	003ae406 	br	80012d4 <__alt_data_end+0xfc0012d4>
 8002744:	013fffc4 	movi	r4,-1
 8002748:	0039fa06 	br	8000f34 <__alt_data_end+0xfc000f34>
 800274c:	d9402d17 	ldw	r5,180(sp)
 8002750:	d9801e04 	addi	r6,sp,120
 8002754:	9809883a 	mov	r4,r19
 8002758:	80063c40 	call	80063c4 <__ssprint_r>
 800275c:	1039c91e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 8002760:	d8c02017 	ldw	r3,128(sp)
 8002764:	da000404 	addi	r8,sp,16
 8002768:	003d8406 	br	8001d7c <__alt_data_end+0xfc001d7c>
 800276c:	0023883a 	mov	r17,zero
 8002770:	003d8306 	br	8001d80 <__alt_data_end+0xfc001d80>
 8002774:	01020074 	movhi	r4,2049
 8002778:	2137ef84 	addi	r4,r4,-8258
 800277c:	d9002c15 	stw	r4,176(sp)
 8002780:	d9002c17 	ldw	r4,176(sp)
 8002784:	1c47883a 	add	r3,r3,r17
 8002788:	10800044 	addi	r2,r2,1
 800278c:	41000015 	stw	r4,0(r8)
 8002790:	44400115 	stw	r17,4(r8)
 8002794:	d8c02015 	stw	r3,128(sp)
 8002798:	d8801f15 	stw	r2,124(sp)
 800279c:	010001c4 	movi	r4,7
 80027a0:	20bfcd16 	blt	r4,r2,80026d8 <__alt_data_end+0xfc0026d8>
 80027a4:	42000204 	addi	r8,r8,8
 80027a8:	003fd306 	br	80026f8 <__alt_data_end+0xfc0026f8>
 80027ac:	d9402d17 	ldw	r5,180(sp)
 80027b0:	d9801e04 	addi	r6,sp,120
 80027b4:	9809883a 	mov	r4,r19
 80027b8:	80063c40 	call	80063c4 <__ssprint_r>
 80027bc:	1039b11e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80027c0:	d8802617 	ldw	r2,152(sp)
 80027c4:	d8c02017 	ldw	r3,128(sp)
 80027c8:	da000404 	addi	r8,sp,16
 80027cc:	003e1c06 	br	8002040 <__alt_data_end+0xfc002040>
 80027d0:	d8802a17 	ldw	r2,168(sp)
 80027d4:	00c00184 	movi	r3,6
 80027d8:	1880012e 	bgeu	r3,r2,80027e0 <___svfprintf_internal_r+0x1cf8>
 80027dc:	1805883a 	mov	r2,r3
 80027e0:	d8802b15 	stw	r2,172(sp)
 80027e4:	1000f316 	blt	r2,zero,8002bb4 <___svfprintf_internal_r+0x20cc>
 80027e8:	04020074 	movhi	r16,2049
 80027ec:	d8802915 	stw	r2,164(sp)
 80027f0:	dd002e15 	stw	r20,184(sp)
 80027f4:	d8002a15 	stw	zero,168(sp)
 80027f8:	d8003215 	stw	zero,200(sp)
 80027fc:	8437ed04 	addi	r16,r16,-8268
 8002800:	0039883a 	mov	fp,zero
 8002804:	003a7d06 	br	80011fc <__alt_data_end+0xfc0011fc>
 8002808:	01020074 	movhi	r4,2049
 800280c:	2137f384 	addi	r4,r4,-8242
 8002810:	d9003515 	stw	r4,212(sp)
 8002814:	003b3d06 	br	800150c <__alt_data_end+0xfc00150c>
 8002818:	d9402d17 	ldw	r5,180(sp)
 800281c:	d9801e04 	addi	r6,sp,120
 8002820:	9809883a 	mov	r4,r19
 8002824:	80063c40 	call	80063c4 <__ssprint_r>
 8002828:	1039961e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 800282c:	d8802617 	ldw	r2,152(sp)
 8002830:	d9403317 	ldw	r5,204(sp)
 8002834:	d8c02017 	ldw	r3,128(sp)
 8002838:	da000404 	addi	r8,sp,16
 800283c:	2885c83a 	sub	r2,r5,r2
 8002840:	003e1006 	br	8002084 <__alt_data_end+0xfc002084>
 8002844:	00800044 	movi	r2,1
 8002848:	10803fcc 	andi	r2,r2,255
 800284c:	00c00044 	movi	r3,1
 8002850:	10fa1026 	beq	r2,r3,8001094 <__alt_data_end+0xfc001094>
 8002854:	00c00084 	movi	r3,2
 8002858:	10fb8226 	beq	r2,r3,8001664 <__alt_data_end+0xfc001664>
 800285c:	003a4206 	br	8001168 <__alt_data_end+0xfc001168>
 8002860:	0021883a 	mov	r16,zero
 8002864:	003e0806 	br	8002088 <__alt_data_end+0xfc002088>
 8002868:	07000b44 	movi	fp,45
 800286c:	df002785 	stb	fp,158(sp)
 8002870:	0039e306 	br	8001000 <__alt_data_end+0xfc001000>
 8002874:	d9002e17 	ldw	r4,184(sp)
 8002878:	d9402f17 	ldw	r5,188(sp)
 800287c:	20800017 	ldw	r2,0(r4)
 8002880:	21000104 	addi	r4,r4,4
 8002884:	d9002e15 	stw	r4,184(sp)
 8002888:	11400015 	stw	r5,0(r2)
 800288c:	0038c106 	br	8000b94 <__alt_data_end+0xfc000b94>
 8002890:	00c00b44 	movi	r3,45
 8002894:	d8c02785 	stb	r3,158(sp)
 8002898:	d8802915 	stw	r2,164(sp)
 800289c:	dc802c17 	ldw	r18,176(sp)
 80028a0:	d8002a15 	stw	zero,168(sp)
 80028a4:	07000b44 	movi	fp,45
 80028a8:	003a5106 	br	80011f0 <__alt_data_end+0xfc0011f0>
 80028ac:	9080004c 	andi	r2,r18,1
 80028b0:	1000941e 	bne	r2,zero,8002b04 <___svfprintf_internal_r+0x201c>
 80028b4:	d8802117 	ldw	r2,132(sp)
 80028b8:	1405c83a 	sub	r2,r2,r16
 80028bc:	d8803315 	stw	r2,204(sp)
 80028c0:	b441151e 	bne	r22,r17,8002d18 <___svfprintf_internal_r+0x2230>
 80028c4:	dd802617 	ldw	r22,152(sp)
 80028c8:	00bfff44 	movi	r2,-3
 80028cc:	b0801a16 	blt	r22,r2,8002938 <___svfprintf_internal_r+0x1e50>
 80028d0:	d9402a17 	ldw	r5,168(sp)
 80028d4:	2d801816 	blt	r5,r22,8002938 <___svfprintf_internal_r+0x1e50>
 80028d8:	dd803215 	stw	r22,200(sp)
 80028dc:	003f3a06 	br	80025c8 <__alt_data_end+0xfc0025c8>
 80028e0:	1025883a 	mov	r18,r2
 80028e4:	0039883a 	mov	fp,zero
 80028e8:	00800084 	movi	r2,2
 80028ec:	003fd606 	br	8002848 <__alt_data_end+0xfc002848>
 80028f0:	9080004c 	andi	r2,r18,1
 80028f4:	103f191e 	bne	r2,zero,800255c <__alt_data_end+0xfc00255c>
 80028f8:	d8802117 	ldw	r2,132(sp)
 80028fc:	003f2806 	br	80025a0 <__alt_data_end+0xfc0025a0>
 8002900:	01020074 	movhi	r4,2049
 8002904:	2137ef84 	addi	r4,r4,-8258
 8002908:	d9002c15 	stw	r4,176(sp)
 800290c:	003c7c06 	br	8001b00 <__alt_data_end+0xfc001b00>
 8002910:	e005883a 	mov	r2,fp
 8002914:	003f2206 	br	80025a0 <__alt_data_end+0xfc0025a0>
 8002918:	d9002a17 	ldw	r4,168(sp)
 800291c:	df002783 	ldbu	fp,158(sp)
 8002920:	dd002e15 	stw	r20,184(sp)
 8002924:	d9002915 	stw	r4,164(sp)
 8002928:	d9002b15 	stw	r4,172(sp)
 800292c:	d8002a15 	stw	zero,168(sp)
 8002930:	d8003215 	stw	zero,200(sp)
 8002934:	003a2a06 	br	80011e0 <__alt_data_end+0xfc0011e0>
 8002938:	8c7fff84 	addi	r17,r17,-2
 800293c:	b5bfffc4 	addi	r22,r22,-1
 8002940:	dd802615 	stw	r22,152(sp)
 8002944:	dc4022c5 	stb	r17,139(sp)
 8002948:	b000c316 	blt	r22,zero,8002c58 <___svfprintf_internal_r+0x2170>
 800294c:	00800ac4 	movi	r2,43
 8002950:	d8802305 	stb	r2,140(sp)
 8002954:	00800244 	movi	r2,9
 8002958:	15806e16 	blt	r2,r22,8002b14 <___svfprintf_internal_r+0x202c>
 800295c:	00800c04 	movi	r2,48
 8002960:	b5800c04 	addi	r22,r22,48
 8002964:	d8802345 	stb	r2,141(sp)
 8002968:	dd802385 	stb	r22,142(sp)
 800296c:	d88023c4 	addi	r2,sp,143
 8002970:	df0022c4 	addi	fp,sp,139
 8002974:	d8c03317 	ldw	r3,204(sp)
 8002978:	1739c83a 	sub	fp,r2,fp
 800297c:	d9003317 	ldw	r4,204(sp)
 8002980:	e0c7883a 	add	r3,fp,r3
 8002984:	df003b15 	stw	fp,236(sp)
 8002988:	d8c02b15 	stw	r3,172(sp)
 800298c:	00800044 	movi	r2,1
 8002990:	1100b70e 	bge	r2,r4,8002c70 <___svfprintf_internal_r+0x2188>
 8002994:	d8c02b17 	ldw	r3,172(sp)
 8002998:	18c00044 	addi	r3,r3,1
 800299c:	d8c02b15 	stw	r3,172(sp)
 80029a0:	1805883a 	mov	r2,r3
 80029a4:	1800b016 	blt	r3,zero,8002c68 <___svfprintf_internal_r+0x2180>
 80029a8:	d8003215 	stw	zero,200(sp)
 80029ac:	003f1006 	br	80025f0 <__alt_data_end+0xfc0025f0>
 80029b0:	d8802a17 	ldw	r2,168(sp)
 80029b4:	103ec71e 	bne	r2,zero,80024d4 <__alt_data_end+0xfc0024d4>
 80029b8:	dc002a15 	stw	r16,168(sp)
 80029bc:	003ec506 	br	80024d4 <__alt_data_end+0xfc0024d4>
 80029c0:	d9402d17 	ldw	r5,180(sp)
 80029c4:	d9801e04 	addi	r6,sp,120
 80029c8:	9809883a 	mov	r4,r19
 80029cc:	80063c40 	call	80063c4 <__ssprint_r>
 80029d0:	10392c1e 	bne	r2,zero,8000e84 <__alt_data_end+0xfc000e84>
 80029d4:	dc402617 	ldw	r17,152(sp)
 80029d8:	d8c02017 	ldw	r3,128(sp)
 80029dc:	d8801f17 	ldw	r2,124(sp)
 80029e0:	da000404 	addi	r8,sp,16
 80029e4:	003e7706 	br	80023c4 <__alt_data_end+0xfc0023c4>
 80029e8:	182f883a 	mov	r23,r3
 80029ec:	d8002a15 	stw	zero,168(sp)
 80029f0:	00389306 	br	8000c40 <__alt_data_end+0xfc000c40>
 80029f4:	d8c02a17 	ldw	r3,168(sp)
 80029f8:	d8802104 	addi	r2,sp,132
 80029fc:	d8800315 	stw	r2,12(sp)
 8002a00:	d9403617 	ldw	r5,216(sp)
 8002a04:	d8802504 	addi	r2,sp,148
 8002a08:	d8800215 	stw	r2,8(sp)
 8002a0c:	d8802604 	addi	r2,sp,152
 8002a10:	d8c00015 	stw	r3,0(sp)
 8002a14:	9809883a 	mov	r4,r19
 8002a18:	d8800115 	stw	r2,4(sp)
 8002a1c:	01c000c4 	movi	r7,3
 8002a20:	a00d883a 	mov	r6,r20
 8002a24:	da003e15 	stw	r8,248(sp)
 8002a28:	8002fcc0 	call	8002fcc <_dtoa_r>
 8002a2c:	d9002a17 	ldw	r4,168(sp)
 8002a30:	da003e17 	ldw	r8,248(sp)
 8002a34:	1021883a 	mov	r16,r2
 8002a38:	1139883a 	add	fp,r2,r4
 8002a3c:	2007883a 	mov	r3,r4
 8002a40:	81000007 	ldb	r4,0(r16)
 8002a44:	00800c04 	movi	r2,48
 8002a48:	20806f26 	beq	r4,r2,8002c08 <___svfprintf_internal_r+0x2120>
 8002a4c:	d8c02617 	ldw	r3,152(sp)
 8002a50:	e0f9883a 	add	fp,fp,r3
 8002a54:	003ec206 	br	8002560 <__alt_data_end+0xfc002560>
 8002a58:	00c00b44 	movi	r3,45
 8002a5c:	2520003c 	xorhi	r20,r4,32768
 8002a60:	d8c02905 	stb	r3,164(sp)
 8002a64:	003ea106 	br	80024ec <__alt_data_end+0xfc0024ec>
 8002a68:	d8c03217 	ldw	r3,200(sp)
 8002a6c:	00c0890e 	bge	zero,r3,8002c94 <___svfprintf_internal_r+0x21ac>
 8002a70:	00800044 	movi	r2,1
 8002a74:	d9003317 	ldw	r4,204(sp)
 8002a78:	1105883a 	add	r2,r2,r4
 8002a7c:	d8802b15 	stw	r2,172(sp)
 8002a80:	10005f16 	blt	r2,zero,8002c00 <___svfprintf_internal_r+0x2118>
 8002a84:	044019c4 	movi	r17,103
 8002a88:	003ed906 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8002a8c:	d9002a17 	ldw	r4,168(sp)
 8002a90:	20c00044 	addi	r3,r4,1
 8002a94:	003e9c06 	br	8002508 <__alt_data_end+0xfc002508>
 8002a98:	d9002a17 	ldw	r4,168(sp)
 8002a9c:	00c0680e 	bge	zero,r3,8002c40 <___svfprintf_internal_r+0x2158>
 8002aa0:	2000461e 	bne	r4,zero,8002bbc <___svfprintf_internal_r+0x20d4>
 8002aa4:	9480004c 	andi	r18,r18,1
 8002aa8:	9000441e 	bne	r18,zero,8002bbc <___svfprintf_internal_r+0x20d4>
 8002aac:	1805883a 	mov	r2,r3
 8002ab0:	1800a116 	blt	r3,zero,8002d38 <___svfprintf_internal_r+0x2250>
 8002ab4:	d8c03217 	ldw	r3,200(sp)
 8002ab8:	d8c02b15 	stw	r3,172(sp)
 8002abc:	003ecc06 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8002ac0:	d9402a17 	ldw	r5,168(sp)
 8002ac4:	d8802104 	addi	r2,sp,132
 8002ac8:	d8800315 	stw	r2,12(sp)
 8002acc:	d9400015 	stw	r5,0(sp)
 8002ad0:	d8802504 	addi	r2,sp,148
 8002ad4:	d9403617 	ldw	r5,216(sp)
 8002ad8:	d8800215 	stw	r2,8(sp)
 8002adc:	d8802604 	addi	r2,sp,152
 8002ae0:	d8800115 	stw	r2,4(sp)
 8002ae4:	01c000c4 	movi	r7,3
 8002ae8:	a00d883a 	mov	r6,r20
 8002aec:	9809883a 	mov	r4,r19
 8002af0:	da003e15 	stw	r8,248(sp)
 8002af4:	8002fcc0 	call	8002fcc <_dtoa_r>
 8002af8:	d8c02a17 	ldw	r3,168(sp)
 8002afc:	da003e17 	ldw	r8,248(sp)
 8002b00:	1021883a 	mov	r16,r2
 8002b04:	00801184 	movi	r2,70
 8002b08:	80f9883a 	add	fp,r16,r3
 8002b0c:	88bfcc26 	beq	r17,r2,8002a40 <__alt_data_end+0xfc002a40>
 8002b10:	003e9306 	br	8002560 <__alt_data_end+0xfc002560>
 8002b14:	df0022c4 	addi	fp,sp,139
 8002b18:	dc002a15 	stw	r16,168(sp)
 8002b1c:	9829883a 	mov	r20,r19
 8002b20:	e021883a 	mov	r16,fp
 8002b24:	4027883a 	mov	r19,r8
 8002b28:	b009883a 	mov	r4,r22
 8002b2c:	01400284 	movi	r5,10
 8002b30:	80007b80 	call	80007b8 <__modsi3>
 8002b34:	10800c04 	addi	r2,r2,48
 8002b38:	843fffc4 	addi	r16,r16,-1
 8002b3c:	b009883a 	mov	r4,r22
 8002b40:	01400284 	movi	r5,10
 8002b44:	80800005 	stb	r2,0(r16)
 8002b48:	80007340 	call	8000734 <__divsi3>
 8002b4c:	102d883a 	mov	r22,r2
 8002b50:	00800244 	movi	r2,9
 8002b54:	15bff416 	blt	r2,r22,8002b28 <__alt_data_end+0xfc002b28>
 8002b58:	9811883a 	mov	r8,r19
 8002b5c:	b0800c04 	addi	r2,r22,48
 8002b60:	a027883a 	mov	r19,r20
 8002b64:	8029883a 	mov	r20,r16
 8002b68:	a17fffc4 	addi	r5,r20,-1
 8002b6c:	a0bfffc5 	stb	r2,-1(r20)
 8002b70:	dc002a17 	ldw	r16,168(sp)
 8002b74:	2f00782e 	bgeu	r5,fp,8002d58 <___svfprintf_internal_r+0x2270>
 8002b78:	d9c02384 	addi	r7,sp,142
 8002b7c:	3d0fc83a 	sub	r7,r7,r20
 8002b80:	d9002344 	addi	r4,sp,141
 8002b84:	e1cf883a 	add	r7,fp,r7
 8002b88:	00000106 	br	8002b90 <___svfprintf_internal_r+0x20a8>
 8002b8c:	28800003 	ldbu	r2,0(r5)
 8002b90:	20800005 	stb	r2,0(r4)
 8002b94:	21000044 	addi	r4,r4,1
 8002b98:	29400044 	addi	r5,r5,1
 8002b9c:	21fffb1e 	bne	r4,r7,8002b8c <__alt_data_end+0xfc002b8c>
 8002ba0:	d8802304 	addi	r2,sp,140
 8002ba4:	1505c83a 	sub	r2,r2,r20
 8002ba8:	d8c02344 	addi	r3,sp,141
 8002bac:	1885883a 	add	r2,r3,r2
 8002bb0:	003f7006 	br	8002974 <__alt_data_end+0xfc002974>
 8002bb4:	0005883a 	mov	r2,zero
 8002bb8:	003f0b06 	br	80027e8 <__alt_data_end+0xfc0027e8>
 8002bbc:	d9002a17 	ldw	r4,168(sp)
 8002bc0:	d8c03217 	ldw	r3,200(sp)
 8002bc4:	20800044 	addi	r2,r4,1
 8002bc8:	1885883a 	add	r2,r3,r2
 8002bcc:	d8802b15 	stw	r2,172(sp)
 8002bd0:	103e870e 	bge	r2,zero,80025f0 <__alt_data_end+0xfc0025f0>
 8002bd4:	0005883a 	mov	r2,zero
 8002bd8:	003e8506 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8002bdc:	01020074 	movhi	r4,2049
 8002be0:	2137ef84 	addi	r4,r4,-8258
 8002be4:	d9002c15 	stw	r4,176(sp)
 8002be8:	003cc506 	br	8001f00 <__alt_data_end+0xfc001f00>
 8002bec:	d8c03217 	ldw	r3,200(sp)
 8002bf0:	18c00044 	addi	r3,r3,1
 8002bf4:	d8c02b15 	stw	r3,172(sp)
 8002bf8:	1805883a 	mov	r2,r3
 8002bfc:	183fa10e 	bge	r3,zero,8002a84 <__alt_data_end+0xfc002a84>
 8002c00:	0005883a 	mov	r2,zero
 8002c04:	003f9f06 	br	8002a84 <__alt_data_end+0xfc002a84>
 8002c08:	d9003617 	ldw	r4,216(sp)
 8002c0c:	000d883a 	mov	r6,zero
 8002c10:	000f883a 	mov	r7,zero
 8002c14:	a00b883a 	mov	r5,r20
 8002c18:	d8c03d15 	stw	r3,244(sp)
 8002c1c:	da003e15 	stw	r8,248(sp)
 8002c20:	800a5740 	call	800a574 <__eqdf2>
 8002c24:	d8c03d17 	ldw	r3,244(sp)
 8002c28:	da003e17 	ldw	r8,248(sp)
 8002c2c:	103f8726 	beq	r2,zero,8002a4c <__alt_data_end+0xfc002a4c>
 8002c30:	00800044 	movi	r2,1
 8002c34:	10c7c83a 	sub	r3,r2,r3
 8002c38:	d8c02615 	stw	r3,152(sp)
 8002c3c:	003f8406 	br	8002a50 <__alt_data_end+0xfc002a50>
 8002c40:	20000e1e 	bne	r4,zero,8002c7c <___svfprintf_internal_r+0x2194>
 8002c44:	9480004c 	andi	r18,r18,1
 8002c48:	90000c1e 	bne	r18,zero,8002c7c <___svfprintf_internal_r+0x2194>
 8002c4c:	00800044 	movi	r2,1
 8002c50:	d8802b15 	stw	r2,172(sp)
 8002c54:	003e6606 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8002c58:	00800b44 	movi	r2,45
 8002c5c:	05adc83a 	sub	r22,zero,r22
 8002c60:	d8802305 	stb	r2,140(sp)
 8002c64:	003f3b06 	br	8002954 <__alt_data_end+0xfc002954>
 8002c68:	0005883a 	mov	r2,zero
 8002c6c:	003f4e06 	br	80029a8 <__alt_data_end+0xfc0029a8>
 8002c70:	90a4703a 	and	r18,r18,r2
 8002c74:	903f4a26 	beq	r18,zero,80029a0 <__alt_data_end+0xfc0029a0>
 8002c78:	003f4606 	br	8002994 <__alt_data_end+0xfc002994>
 8002c7c:	d8c02a17 	ldw	r3,168(sp)
 8002c80:	18c00084 	addi	r3,r3,2
 8002c84:	d8c02b15 	stw	r3,172(sp)
 8002c88:	1805883a 	mov	r2,r3
 8002c8c:	183e580e 	bge	r3,zero,80025f0 <__alt_data_end+0xfc0025f0>
 8002c90:	003fd006 	br	8002bd4 <__alt_data_end+0xfc002bd4>
 8002c94:	00800084 	movi	r2,2
 8002c98:	10c5c83a 	sub	r2,r2,r3
 8002c9c:	003f7506 	br	8002a74 <__alt_data_end+0xfc002a74>
 8002ca0:	d9402e17 	ldw	r5,184(sp)
 8002ca4:	d9002e17 	ldw	r4,184(sp)
 8002ca8:	bc400043 	ldbu	r17,1(r23)
 8002cac:	29400017 	ldw	r5,0(r5)
 8002cb0:	20800104 	addi	r2,r4,4
 8002cb4:	d8802e15 	stw	r2,184(sp)
 8002cb8:	d9402a15 	stw	r5,168(sp)
 8002cbc:	182f883a 	mov	r23,r3
 8002cc0:	283df10e 	bge	r5,zero,8002488 <__alt_data_end+0xfc002488>
 8002cc4:	8c403fcc 	andi	r17,r17,255
 8002cc8:	017fffc4 	movi	r5,-1
 8002ccc:	8c40201c 	xori	r17,r17,128
 8002cd0:	d9402a15 	stw	r5,168(sp)
 8002cd4:	8c7fe004 	addi	r17,r17,-128
 8002cd8:	0037d806 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8002cdc:	9080004c 	andi	r2,r18,1
 8002ce0:	0039883a 	mov	fp,zero
 8002ce4:	10000726 	beq	r2,zero,8002d04 <___svfprintf_internal_r+0x221c>
 8002ce8:	d8c02817 	ldw	r3,160(sp)
 8002cec:	dc001dc4 	addi	r16,sp,119
 8002cf0:	00800c04 	movi	r2,48
 8002cf4:	1c07c83a 	sub	r3,r3,r16
 8002cf8:	d8801dc5 	stb	r2,119(sp)
 8002cfc:	d8c02b15 	stw	r3,172(sp)
 8002d00:	00393106 	br	80011c8 <__alt_data_end+0xfc0011c8>
 8002d04:	d8002b15 	stw	zero,172(sp)
 8002d08:	dc001e04 	addi	r16,sp,120
 8002d0c:	00392e06 	br	80011c8 <__alt_data_end+0xfc0011c8>
 8002d10:	0005883a 	mov	r2,zero
 8002d14:	003e3306 	br	80025e4 <__alt_data_end+0xfc0025e4>
 8002d18:	dd802617 	ldw	r22,152(sp)
 8002d1c:	003f0706 	br	800293c <__alt_data_end+0xfc00293c>
 8002d20:	d8c02b03 	ldbu	r3,172(sp)
 8002d24:	d8c02785 	stb	r3,158(sp)
 8002d28:	003a3506 	br	8001600 <__alt_data_end+0xfc001600>
 8002d2c:	d8c02b03 	ldbu	r3,172(sp)
 8002d30:	d8c02785 	stb	r3,158(sp)
 8002d34:	003a1706 	br	8001594 <__alt_data_end+0xfc001594>
 8002d38:	0005883a 	mov	r2,zero
 8002d3c:	003f5d06 	br	8002ab4 <__alt_data_end+0xfc002ab4>
 8002d40:	d8c02b03 	ldbu	r3,172(sp)
 8002d44:	d8c02785 	stb	r3,158(sp)
 8002d48:	0038f306 	br	8001118 <__alt_data_end+0xfc001118>
 8002d4c:	d8c02b03 	ldbu	r3,172(sp)
 8002d50:	d8c02785 	stb	r3,158(sp)
 8002d54:	0038be06 	br	8001050 <__alt_data_end+0xfc001050>
 8002d58:	d8802344 	addi	r2,sp,141
 8002d5c:	003f0506 	br	8002974 <__alt_data_end+0xfc002974>
 8002d60:	d8c02b03 	ldbu	r3,172(sp)
 8002d64:	d8c02785 	stb	r3,158(sp)
 8002d68:	00388b06 	br	8000f98 <__alt_data_end+0xfc000f98>
 8002d6c:	d8c02b03 	ldbu	r3,172(sp)
 8002d70:	d8c02785 	stb	r3,158(sp)
 8002d74:	003ad706 	br	80018d4 <__alt_data_end+0xfc0018d4>
 8002d78:	d9403917 	ldw	r5,228(sp)
 8002d7c:	00800304 	movi	r2,12
 8002d80:	28800015 	stw	r2,0(r5)
 8002d84:	00bfffc4 	movi	r2,-1
 8002d88:	00384306 	br	8000e98 <__alt_data_end+0xfc000e98>
 8002d8c:	d8c02b03 	ldbu	r3,172(sp)
 8002d90:	d8c02785 	stb	r3,158(sp)
 8002d94:	003ab606 	br	8001870 <__alt_data_end+0xfc001870>
 8002d98:	d8c02b03 	ldbu	r3,172(sp)
 8002d9c:	d8c02785 	stb	r3,158(sp)
 8002da0:	003a8906 	br	80017c8 <__alt_data_end+0xfc0017c8>

08002da4 <quorem>:
 8002da4:	defff204 	addi	sp,sp,-56
 8002da8:	ddc00b15 	stw	r23,44(sp)
 8002dac:	20800417 	ldw	r2,16(r4)
 8002db0:	2dc00417 	ldw	r23,16(r5)
 8002db4:	dfc00d15 	stw	ra,52(sp)
 8002db8:	df000c15 	stw	fp,48(sp)
 8002dbc:	dd800a15 	stw	r22,40(sp)
 8002dc0:	dd400915 	stw	r21,36(sp)
 8002dc4:	dd000815 	stw	r20,32(sp)
 8002dc8:	dcc00715 	stw	r19,28(sp)
 8002dcc:	dc800615 	stw	r18,24(sp)
 8002dd0:	dc400515 	stw	r17,20(sp)
 8002dd4:	dc000415 	stw	r16,16(sp)
 8002dd8:	15c07a16 	blt	r2,r23,8002fc4 <quorem+0x220>
 8002ddc:	bdffffc4 	addi	r23,r23,-1
 8002de0:	bde9883a 	add	r20,r23,r23
 8002de4:	28c00504 	addi	r3,r5,20
 8002de8:	a529883a 	add	r20,r20,r20
 8002dec:	1d39883a 	add	fp,r3,r20
 8002df0:	24c00504 	addi	r19,r4,20
 8002df4:	d9400215 	stw	r5,8(sp)
 8002df8:	9d29883a 	add	r20,r19,r20
 8002dfc:	e1400017 	ldw	r5,0(fp)
 8002e00:	d9000015 	stw	r4,0(sp)
 8002e04:	a1000017 	ldw	r4,0(r20)
 8002e08:	29400044 	addi	r5,r5,1
 8002e0c:	d8c00115 	stw	r3,4(sp)
 8002e10:	dd000315 	stw	r20,12(sp)
 8002e14:	800082c0 	call	800082c <__udivsi3>
 8002e18:	1025883a 	mov	r18,r2
 8002e1c:	10003026 	beq	r2,zero,8002ee0 <quorem+0x13c>
 8002e20:	dc400117 	ldw	r17,4(sp)
 8002e24:	9829883a 	mov	r20,r19
 8002e28:	002d883a 	mov	r22,zero
 8002e2c:	0021883a 	mov	r16,zero
 8002e30:	8d400017 	ldw	r21,0(r17)
 8002e34:	900b883a 	mov	r5,r18
 8002e38:	8c400104 	addi	r17,r17,4
 8002e3c:	a93fffcc 	andi	r4,r21,65535
 8002e40:	80008e80 	call	80008e8 <__mulsi3>
 8002e44:	a808d43a 	srli	r4,r21,16
 8002e48:	900b883a 	mov	r5,r18
 8002e4c:	15ad883a 	add	r22,r2,r22
 8002e50:	80008e80 	call	80008e8 <__mulsi3>
 8002e54:	a1000017 	ldw	r4,0(r20)
 8002e58:	b00cd43a 	srli	r6,r22,16
 8002e5c:	b0ffffcc 	andi	r3,r22,65535
 8002e60:	217fffcc 	andi	r5,r4,65535
 8002e64:	2c21883a 	add	r16,r5,r16
 8002e68:	80c7c83a 	sub	r3,r16,r3
 8002e6c:	2008d43a 	srli	r4,r4,16
 8002e70:	1185883a 	add	r2,r2,r6
 8002e74:	1821d43a 	srai	r16,r3,16
 8002e78:	117fffcc 	andi	r5,r2,65535
 8002e7c:	2149c83a 	sub	r4,r4,r5
 8002e80:	2421883a 	add	r16,r4,r16
 8002e84:	8008943a 	slli	r4,r16,16
 8002e88:	18ffffcc 	andi	r3,r3,65535
 8002e8c:	102cd43a 	srli	r22,r2,16
 8002e90:	20c8b03a 	or	r4,r4,r3
 8002e94:	a1000015 	stw	r4,0(r20)
 8002e98:	8021d43a 	srai	r16,r16,16
 8002e9c:	a5000104 	addi	r20,r20,4
 8002ea0:	e47fe32e 	bgeu	fp,r17,8002e30 <__alt_data_end+0xfc002e30>
 8002ea4:	d8c00317 	ldw	r3,12(sp)
 8002ea8:	18800017 	ldw	r2,0(r3)
 8002eac:	10000c1e 	bne	r2,zero,8002ee0 <quorem+0x13c>
 8002eb0:	18bfff04 	addi	r2,r3,-4
 8002eb4:	9880082e 	bgeu	r19,r2,8002ed8 <quorem+0x134>
 8002eb8:	18ffff17 	ldw	r3,-4(r3)
 8002ebc:	18000326 	beq	r3,zero,8002ecc <quorem+0x128>
 8002ec0:	00000506 	br	8002ed8 <quorem+0x134>
 8002ec4:	10c00017 	ldw	r3,0(r2)
 8002ec8:	1800031e 	bne	r3,zero,8002ed8 <quorem+0x134>
 8002ecc:	10bfff04 	addi	r2,r2,-4
 8002ed0:	bdffffc4 	addi	r23,r23,-1
 8002ed4:	98bffb36 	bltu	r19,r2,8002ec4 <__alt_data_end+0xfc002ec4>
 8002ed8:	d8c00017 	ldw	r3,0(sp)
 8002edc:	1dc00415 	stw	r23,16(r3)
 8002ee0:	d9400217 	ldw	r5,8(sp)
 8002ee4:	d9000017 	ldw	r4,0(sp)
 8002ee8:	8005aec0 	call	8005aec <__mcmp>
 8002eec:	10002816 	blt	r2,zero,8002f90 <quorem+0x1ec>
 8002ef0:	dc400117 	ldw	r17,4(sp)
 8002ef4:	94800044 	addi	r18,r18,1
 8002ef8:	980d883a 	mov	r6,r19
 8002efc:	0007883a 	mov	r3,zero
 8002f00:	31000017 	ldw	r4,0(r6)
 8002f04:	89400017 	ldw	r5,0(r17)
 8002f08:	31800104 	addi	r6,r6,4
 8002f0c:	20bfffcc 	andi	r2,r4,65535
 8002f10:	10c7883a 	add	r3,r2,r3
 8002f14:	28bfffcc 	andi	r2,r5,65535
 8002f18:	1885c83a 	sub	r2,r3,r2
 8002f1c:	280ad43a 	srli	r5,r5,16
 8002f20:	2008d43a 	srli	r4,r4,16
 8002f24:	1007d43a 	srai	r3,r2,16
 8002f28:	10bfffcc 	andi	r2,r2,65535
 8002f2c:	2149c83a 	sub	r4,r4,r5
 8002f30:	20c9883a 	add	r4,r4,r3
 8002f34:	200a943a 	slli	r5,r4,16
 8002f38:	8c400104 	addi	r17,r17,4
 8002f3c:	2007d43a 	srai	r3,r4,16
 8002f40:	2884b03a 	or	r2,r5,r2
 8002f44:	30bfff15 	stw	r2,-4(r6)
 8002f48:	e47fed2e 	bgeu	fp,r17,8002f00 <__alt_data_end+0xfc002f00>
 8002f4c:	bdc5883a 	add	r2,r23,r23
 8002f50:	1085883a 	add	r2,r2,r2
 8002f54:	9887883a 	add	r3,r19,r2
 8002f58:	18800017 	ldw	r2,0(r3)
 8002f5c:	10000c1e 	bne	r2,zero,8002f90 <quorem+0x1ec>
 8002f60:	18bfff04 	addi	r2,r3,-4
 8002f64:	9880082e 	bgeu	r19,r2,8002f88 <quorem+0x1e4>
 8002f68:	18ffff17 	ldw	r3,-4(r3)
 8002f6c:	18000326 	beq	r3,zero,8002f7c <quorem+0x1d8>
 8002f70:	00000506 	br	8002f88 <quorem+0x1e4>
 8002f74:	10c00017 	ldw	r3,0(r2)
 8002f78:	1800031e 	bne	r3,zero,8002f88 <quorem+0x1e4>
 8002f7c:	10bfff04 	addi	r2,r2,-4
 8002f80:	bdffffc4 	addi	r23,r23,-1
 8002f84:	98bffb36 	bltu	r19,r2,8002f74 <__alt_data_end+0xfc002f74>
 8002f88:	d8c00017 	ldw	r3,0(sp)
 8002f8c:	1dc00415 	stw	r23,16(r3)
 8002f90:	9005883a 	mov	r2,r18
 8002f94:	dfc00d17 	ldw	ra,52(sp)
 8002f98:	df000c17 	ldw	fp,48(sp)
 8002f9c:	ddc00b17 	ldw	r23,44(sp)
 8002fa0:	dd800a17 	ldw	r22,40(sp)
 8002fa4:	dd400917 	ldw	r21,36(sp)
 8002fa8:	dd000817 	ldw	r20,32(sp)
 8002fac:	dcc00717 	ldw	r19,28(sp)
 8002fb0:	dc800617 	ldw	r18,24(sp)
 8002fb4:	dc400517 	ldw	r17,20(sp)
 8002fb8:	dc000417 	ldw	r16,16(sp)
 8002fbc:	dec00e04 	addi	sp,sp,56
 8002fc0:	f800283a 	ret
 8002fc4:	0005883a 	mov	r2,zero
 8002fc8:	003ff206 	br	8002f94 <__alt_data_end+0xfc002f94>

08002fcc <_dtoa_r>:
 8002fcc:	20801017 	ldw	r2,64(r4)
 8002fd0:	deffde04 	addi	sp,sp,-136
 8002fd4:	df002015 	stw	fp,128(sp)
 8002fd8:	dcc01b15 	stw	r19,108(sp)
 8002fdc:	dc801a15 	stw	r18,104(sp)
 8002fe0:	dc401915 	stw	r17,100(sp)
 8002fe4:	dc001815 	stw	r16,96(sp)
 8002fe8:	dfc02115 	stw	ra,132(sp)
 8002fec:	ddc01f15 	stw	r23,124(sp)
 8002ff0:	dd801e15 	stw	r22,120(sp)
 8002ff4:	dd401d15 	stw	r21,116(sp)
 8002ff8:	dd001c15 	stw	r20,112(sp)
 8002ffc:	d9c00315 	stw	r7,12(sp)
 8003000:	2039883a 	mov	fp,r4
 8003004:	3023883a 	mov	r17,r6
 8003008:	2825883a 	mov	r18,r5
 800300c:	dc002417 	ldw	r16,144(sp)
 8003010:	3027883a 	mov	r19,r6
 8003014:	10000826 	beq	r2,zero,8003038 <_dtoa_r+0x6c>
 8003018:	21801117 	ldw	r6,68(r4)
 800301c:	00c00044 	movi	r3,1
 8003020:	100b883a 	mov	r5,r2
 8003024:	1986983a 	sll	r3,r3,r6
 8003028:	11800115 	stw	r6,4(r2)
 800302c:	10c00215 	stw	r3,8(r2)
 8003030:	80052100 	call	8005210 <_Bfree>
 8003034:	e0001015 	stw	zero,64(fp)
 8003038:	88002e16 	blt	r17,zero,80030f4 <_dtoa_r+0x128>
 800303c:	80000015 	stw	zero,0(r16)
 8003040:	889ffc2c 	andhi	r2,r17,32752
 8003044:	00dffc34 	movhi	r3,32752
 8003048:	10c01c26 	beq	r2,r3,80030bc <_dtoa_r+0xf0>
 800304c:	000d883a 	mov	r6,zero
 8003050:	000f883a 	mov	r7,zero
 8003054:	9009883a 	mov	r4,r18
 8003058:	980b883a 	mov	r5,r19
 800305c:	800a5740 	call	800a574 <__eqdf2>
 8003060:	10002b1e 	bne	r2,zero,8003110 <_dtoa_r+0x144>
 8003064:	d9c02317 	ldw	r7,140(sp)
 8003068:	00800044 	movi	r2,1
 800306c:	38800015 	stw	r2,0(r7)
 8003070:	d8802517 	ldw	r2,148(sp)
 8003074:	10019e26 	beq	r2,zero,80036f0 <_dtoa_r+0x724>
 8003078:	d8c02517 	ldw	r3,148(sp)
 800307c:	00820074 	movhi	r2,2049
 8003080:	10b7ef44 	addi	r2,r2,-8259
 8003084:	18800015 	stw	r2,0(r3)
 8003088:	10bfffc4 	addi	r2,r2,-1
 800308c:	dfc02117 	ldw	ra,132(sp)
 8003090:	df002017 	ldw	fp,128(sp)
 8003094:	ddc01f17 	ldw	r23,124(sp)
 8003098:	dd801e17 	ldw	r22,120(sp)
 800309c:	dd401d17 	ldw	r21,116(sp)
 80030a0:	dd001c17 	ldw	r20,112(sp)
 80030a4:	dcc01b17 	ldw	r19,108(sp)
 80030a8:	dc801a17 	ldw	r18,104(sp)
 80030ac:	dc401917 	ldw	r17,100(sp)
 80030b0:	dc001817 	ldw	r16,96(sp)
 80030b4:	dec02204 	addi	sp,sp,136
 80030b8:	f800283a 	ret
 80030bc:	d8c02317 	ldw	r3,140(sp)
 80030c0:	0089c3c4 	movi	r2,9999
 80030c4:	18800015 	stw	r2,0(r3)
 80030c8:	90017726 	beq	r18,zero,80036a8 <_dtoa_r+0x6dc>
 80030cc:	00820074 	movhi	r2,2049
 80030d0:	10b7fb04 	addi	r2,r2,-8212
 80030d4:	d9002517 	ldw	r4,148(sp)
 80030d8:	203fec26 	beq	r4,zero,800308c <__alt_data_end+0xfc00308c>
 80030dc:	10c000c7 	ldb	r3,3(r2)
 80030e0:	1801781e 	bne	r3,zero,80036c4 <_dtoa_r+0x6f8>
 80030e4:	10c000c4 	addi	r3,r2,3
 80030e8:	d9802517 	ldw	r6,148(sp)
 80030ec:	30c00015 	stw	r3,0(r6)
 80030f0:	003fe606 	br	800308c <__alt_data_end+0xfc00308c>
 80030f4:	04e00034 	movhi	r19,32768
 80030f8:	9cffffc4 	addi	r19,r19,-1
 80030fc:	00800044 	movi	r2,1
 8003100:	8ce6703a 	and	r19,r17,r19
 8003104:	80800015 	stw	r2,0(r16)
 8003108:	9823883a 	mov	r17,r19
 800310c:	003fcc06 	br	8003040 <__alt_data_end+0xfc003040>
 8003110:	d8800204 	addi	r2,sp,8
 8003114:	d8800015 	stw	r2,0(sp)
 8003118:	d9c00104 	addi	r7,sp,4
 800311c:	900b883a 	mov	r5,r18
 8003120:	980d883a 	mov	r6,r19
 8003124:	e009883a 	mov	r4,fp
 8003128:	8820d53a 	srli	r16,r17,20
 800312c:	8005eb80 	call	8005eb8 <__d2b>
 8003130:	d8800915 	stw	r2,36(sp)
 8003134:	8001651e 	bne	r16,zero,80036cc <_dtoa_r+0x700>
 8003138:	dd800217 	ldw	r22,8(sp)
 800313c:	dc000117 	ldw	r16,4(sp)
 8003140:	00800804 	movi	r2,32
 8003144:	b421883a 	add	r16,r22,r16
 8003148:	80c10c84 	addi	r3,r16,1074
 800314c:	10c2d10e 	bge	r2,r3,8003c94 <_dtoa_r+0xcc8>
 8003150:	00801004 	movi	r2,64
 8003154:	81010484 	addi	r4,r16,1042
 8003158:	10c7c83a 	sub	r3,r2,r3
 800315c:	9108d83a 	srl	r4,r18,r4
 8003160:	88e2983a 	sll	r17,r17,r3
 8003164:	2448b03a 	or	r4,r4,r17
 8003168:	800ba900 	call	800ba90 <__floatunsidf>
 800316c:	017f8434 	movhi	r5,65040
 8003170:	01800044 	movi	r6,1
 8003174:	1009883a 	mov	r4,r2
 8003178:	194b883a 	add	r5,r3,r5
 800317c:	843fffc4 	addi	r16,r16,-1
 8003180:	d9801115 	stw	r6,68(sp)
 8003184:	000d883a 	mov	r6,zero
 8003188:	01cffe34 	movhi	r7,16376
 800318c:	800b0380 	call	800b038 <__subdf3>
 8003190:	0198dbf4 	movhi	r6,25455
 8003194:	01cff4f4 	movhi	r7,16339
 8003198:	3190d844 	addi	r6,r6,17249
 800319c:	39e1e9c4 	addi	r7,r7,-30809
 80031a0:	1009883a 	mov	r4,r2
 80031a4:	180b883a 	mov	r5,r3
 80031a8:	800a7cc0 	call	800a7cc <__muldf3>
 80031ac:	01a2d874 	movhi	r6,35681
 80031b0:	01cff1f4 	movhi	r7,16327
 80031b4:	31b22cc4 	addi	r6,r6,-14157
 80031b8:	39e28a04 	addi	r7,r7,-30168
 80031bc:	180b883a 	mov	r5,r3
 80031c0:	1009883a 	mov	r4,r2
 80031c4:	80092f80 	call	80092f8 <__adddf3>
 80031c8:	8009883a 	mov	r4,r16
 80031cc:	1029883a 	mov	r20,r2
 80031d0:	1823883a 	mov	r17,r3
 80031d4:	800b9b40 	call	800b9b4 <__floatsidf>
 80031d8:	019427f4 	movhi	r6,20639
 80031dc:	01cff4f4 	movhi	r7,16339
 80031e0:	319e7ec4 	addi	r6,r6,31227
 80031e4:	39d104c4 	addi	r7,r7,17427
 80031e8:	1009883a 	mov	r4,r2
 80031ec:	180b883a 	mov	r5,r3
 80031f0:	800a7cc0 	call	800a7cc <__muldf3>
 80031f4:	100d883a 	mov	r6,r2
 80031f8:	180f883a 	mov	r7,r3
 80031fc:	a009883a 	mov	r4,r20
 8003200:	880b883a 	mov	r5,r17
 8003204:	80092f80 	call	80092f8 <__adddf3>
 8003208:	1009883a 	mov	r4,r2
 800320c:	180b883a 	mov	r5,r3
 8003210:	1029883a 	mov	r20,r2
 8003214:	1823883a 	mov	r17,r3
 8003218:	800b9340 	call	800b934 <__fixdfsi>
 800321c:	000d883a 	mov	r6,zero
 8003220:	000f883a 	mov	r7,zero
 8003224:	a009883a 	mov	r4,r20
 8003228:	880b883a 	mov	r5,r17
 800322c:	d8800515 	stw	r2,20(sp)
 8003230:	800a6d80 	call	800a6d8 <__ledf2>
 8003234:	10028716 	blt	r2,zero,8003c54 <_dtoa_r+0xc88>
 8003238:	d8c00517 	ldw	r3,20(sp)
 800323c:	00800584 	movi	r2,22
 8003240:	10c27536 	bltu	r2,r3,8003c18 <_dtoa_r+0xc4c>
 8003244:	180490fa 	slli	r2,r3,3
 8003248:	00c20074 	movhi	r3,2049
 800324c:	18f81704 	addi	r3,r3,-8100
 8003250:	1885883a 	add	r2,r3,r2
 8003254:	11000017 	ldw	r4,0(r2)
 8003258:	11400117 	ldw	r5,4(r2)
 800325c:	900d883a 	mov	r6,r18
 8003260:	980f883a 	mov	r7,r19
 8003264:	800a5fc0 	call	800a5fc <__gedf2>
 8003268:	00828d0e 	bge	zero,r2,8003ca0 <_dtoa_r+0xcd4>
 800326c:	d9000517 	ldw	r4,20(sp)
 8003270:	d8000e15 	stw	zero,56(sp)
 8003274:	213fffc4 	addi	r4,r4,-1
 8003278:	d9000515 	stw	r4,20(sp)
 800327c:	b42dc83a 	sub	r22,r22,r16
 8003280:	b5bfffc4 	addi	r22,r22,-1
 8003284:	b0026f16 	blt	r22,zero,8003c44 <_dtoa_r+0xc78>
 8003288:	d8000815 	stw	zero,32(sp)
 800328c:	d9c00517 	ldw	r7,20(sp)
 8003290:	38026416 	blt	r7,zero,8003c24 <_dtoa_r+0xc58>
 8003294:	b1ed883a 	add	r22,r22,r7
 8003298:	d9c00d15 	stw	r7,52(sp)
 800329c:	d8000a15 	stw	zero,40(sp)
 80032a0:	d9800317 	ldw	r6,12(sp)
 80032a4:	00800244 	movi	r2,9
 80032a8:	11811436 	bltu	r2,r6,80036fc <_dtoa_r+0x730>
 80032ac:	00800144 	movi	r2,5
 80032b0:	1184e10e 	bge	r2,r6,8004638 <_dtoa_r+0x166c>
 80032b4:	31bfff04 	addi	r6,r6,-4
 80032b8:	d9800315 	stw	r6,12(sp)
 80032bc:	0023883a 	mov	r17,zero
 80032c0:	d9800317 	ldw	r6,12(sp)
 80032c4:	008000c4 	movi	r2,3
 80032c8:	30836726 	beq	r6,r2,8004068 <_dtoa_r+0x109c>
 80032cc:	1183410e 	bge	r2,r6,8003fd4 <_dtoa_r+0x1008>
 80032d0:	d9c00317 	ldw	r7,12(sp)
 80032d4:	00800104 	movi	r2,4
 80032d8:	38827c26 	beq	r7,r2,8003ccc <_dtoa_r+0xd00>
 80032dc:	00800144 	movi	r2,5
 80032e0:	3884c41e 	bne	r7,r2,80045f4 <_dtoa_r+0x1628>
 80032e4:	00800044 	movi	r2,1
 80032e8:	d8800b15 	stw	r2,44(sp)
 80032ec:	d8c00517 	ldw	r3,20(sp)
 80032f0:	d9002217 	ldw	r4,136(sp)
 80032f4:	1907883a 	add	r3,r3,r4
 80032f8:	19800044 	addi	r6,r3,1
 80032fc:	d8c00c15 	stw	r3,48(sp)
 8003300:	d9800615 	stw	r6,24(sp)
 8003304:	0183a40e 	bge	zero,r6,8004198 <_dtoa_r+0x11cc>
 8003308:	d9800617 	ldw	r6,24(sp)
 800330c:	3021883a 	mov	r16,r6
 8003310:	e0001115 	stw	zero,68(fp)
 8003314:	008005c4 	movi	r2,23
 8003318:	1184c92e 	bgeu	r2,r6,8004640 <_dtoa_r+0x1674>
 800331c:	00c00044 	movi	r3,1
 8003320:	00800104 	movi	r2,4
 8003324:	1085883a 	add	r2,r2,r2
 8003328:	11000504 	addi	r4,r2,20
 800332c:	180b883a 	mov	r5,r3
 8003330:	18c00044 	addi	r3,r3,1
 8003334:	313ffb2e 	bgeu	r6,r4,8003324 <__alt_data_end+0xfc003324>
 8003338:	e1401115 	stw	r5,68(fp)
 800333c:	e009883a 	mov	r4,fp
 8003340:	80051680 	call	8005168 <_Balloc>
 8003344:	d8800715 	stw	r2,28(sp)
 8003348:	e0801015 	stw	r2,64(fp)
 800334c:	00800384 	movi	r2,14
 8003350:	1400f736 	bltu	r2,r16,8003730 <_dtoa_r+0x764>
 8003354:	8800f626 	beq	r17,zero,8003730 <_dtoa_r+0x764>
 8003358:	d9c00517 	ldw	r7,20(sp)
 800335c:	01c39a0e 	bge	zero,r7,80041c8 <_dtoa_r+0x11fc>
 8003360:	388003cc 	andi	r2,r7,15
 8003364:	100490fa 	slli	r2,r2,3
 8003368:	382bd13a 	srai	r21,r7,4
 800336c:	00c20074 	movhi	r3,2049
 8003370:	18f81704 	addi	r3,r3,-8100
 8003374:	1885883a 	add	r2,r3,r2
 8003378:	a8c0040c 	andi	r3,r21,16
 800337c:	12400017 	ldw	r9,0(r2)
 8003380:	12000117 	ldw	r8,4(r2)
 8003384:	18037926 	beq	r3,zero,800416c <_dtoa_r+0x11a0>
 8003388:	00820074 	movhi	r2,2049
 800338c:	10b80d04 	addi	r2,r2,-8140
 8003390:	11800817 	ldw	r6,32(r2)
 8003394:	11c00917 	ldw	r7,36(r2)
 8003398:	9009883a 	mov	r4,r18
 800339c:	980b883a 	mov	r5,r19
 80033a0:	da001715 	stw	r8,92(sp)
 80033a4:	da401615 	stw	r9,88(sp)
 80033a8:	8009ba40 	call	8009ba4 <__divdf3>
 80033ac:	da001717 	ldw	r8,92(sp)
 80033b0:	da401617 	ldw	r9,88(sp)
 80033b4:	ad4003cc 	andi	r21,r21,15
 80033b8:	040000c4 	movi	r16,3
 80033bc:	1023883a 	mov	r17,r2
 80033c0:	1829883a 	mov	r20,r3
 80033c4:	a8001126 	beq	r21,zero,800340c <_dtoa_r+0x440>
 80033c8:	05c20074 	movhi	r23,2049
 80033cc:	bdf80d04 	addi	r23,r23,-8140
 80033d0:	4805883a 	mov	r2,r9
 80033d4:	4007883a 	mov	r3,r8
 80033d8:	a980004c 	andi	r6,r21,1
 80033dc:	1009883a 	mov	r4,r2
 80033e0:	a82bd07a 	srai	r21,r21,1
 80033e4:	180b883a 	mov	r5,r3
 80033e8:	30000426 	beq	r6,zero,80033fc <_dtoa_r+0x430>
 80033ec:	b9800017 	ldw	r6,0(r23)
 80033f0:	b9c00117 	ldw	r7,4(r23)
 80033f4:	84000044 	addi	r16,r16,1
 80033f8:	800a7cc0 	call	800a7cc <__muldf3>
 80033fc:	bdc00204 	addi	r23,r23,8
 8003400:	a83ff51e 	bne	r21,zero,80033d8 <__alt_data_end+0xfc0033d8>
 8003404:	1013883a 	mov	r9,r2
 8003408:	1811883a 	mov	r8,r3
 800340c:	480d883a 	mov	r6,r9
 8003410:	400f883a 	mov	r7,r8
 8003414:	8809883a 	mov	r4,r17
 8003418:	a00b883a 	mov	r5,r20
 800341c:	8009ba40 	call	8009ba4 <__divdf3>
 8003420:	d8800f15 	stw	r2,60(sp)
 8003424:	d8c01015 	stw	r3,64(sp)
 8003428:	d8c00e17 	ldw	r3,56(sp)
 800342c:	18000626 	beq	r3,zero,8003448 <_dtoa_r+0x47c>
 8003430:	d9000f17 	ldw	r4,60(sp)
 8003434:	d9401017 	ldw	r5,64(sp)
 8003438:	000d883a 	mov	r6,zero
 800343c:	01cffc34 	movhi	r7,16368
 8003440:	800a6d80 	call	800a6d8 <__ledf2>
 8003444:	10040b16 	blt	r2,zero,8004474 <_dtoa_r+0x14a8>
 8003448:	8009883a 	mov	r4,r16
 800344c:	800b9b40 	call	800b9b4 <__floatsidf>
 8003450:	d9800f17 	ldw	r6,60(sp)
 8003454:	d9c01017 	ldw	r7,64(sp)
 8003458:	1009883a 	mov	r4,r2
 800345c:	180b883a 	mov	r5,r3
 8003460:	800a7cc0 	call	800a7cc <__muldf3>
 8003464:	000d883a 	mov	r6,zero
 8003468:	01d00734 	movhi	r7,16412
 800346c:	1009883a 	mov	r4,r2
 8003470:	180b883a 	mov	r5,r3
 8003474:	80092f80 	call	80092f8 <__adddf3>
 8003478:	1021883a 	mov	r16,r2
 800347c:	d8800617 	ldw	r2,24(sp)
 8003480:	047f3034 	movhi	r17,64704
 8003484:	1c63883a 	add	r17,r3,r17
 8003488:	10031826 	beq	r2,zero,80040ec <_dtoa_r+0x1120>
 800348c:	d8c00517 	ldw	r3,20(sp)
 8003490:	db000617 	ldw	r12,24(sp)
 8003494:	d8c01315 	stw	r3,76(sp)
 8003498:	d9000b17 	ldw	r4,44(sp)
 800349c:	20038f26 	beq	r4,zero,80042dc <_dtoa_r+0x1310>
 80034a0:	60bfffc4 	addi	r2,r12,-1
 80034a4:	100490fa 	slli	r2,r2,3
 80034a8:	00c20074 	movhi	r3,2049
 80034ac:	18f81704 	addi	r3,r3,-8100
 80034b0:	1885883a 	add	r2,r3,r2
 80034b4:	11800017 	ldw	r6,0(r2)
 80034b8:	11c00117 	ldw	r7,4(r2)
 80034bc:	d8800717 	ldw	r2,28(sp)
 80034c0:	0009883a 	mov	r4,zero
 80034c4:	014ff834 	movhi	r5,16352
 80034c8:	db001615 	stw	r12,88(sp)
 80034cc:	15c00044 	addi	r23,r2,1
 80034d0:	8009ba40 	call	8009ba4 <__divdf3>
 80034d4:	800d883a 	mov	r6,r16
 80034d8:	880f883a 	mov	r7,r17
 80034dc:	1009883a 	mov	r4,r2
 80034e0:	180b883a 	mov	r5,r3
 80034e4:	800b0380 	call	800b038 <__subdf3>
 80034e8:	d9401017 	ldw	r5,64(sp)
 80034ec:	d9000f17 	ldw	r4,60(sp)
 80034f0:	102b883a 	mov	r21,r2
 80034f4:	d8c01215 	stw	r3,72(sp)
 80034f8:	800b9340 	call	800b934 <__fixdfsi>
 80034fc:	1009883a 	mov	r4,r2
 8003500:	1029883a 	mov	r20,r2
 8003504:	800b9b40 	call	800b9b4 <__floatsidf>
 8003508:	d9000f17 	ldw	r4,60(sp)
 800350c:	d9401017 	ldw	r5,64(sp)
 8003510:	100d883a 	mov	r6,r2
 8003514:	180f883a 	mov	r7,r3
 8003518:	800b0380 	call	800b038 <__subdf3>
 800351c:	1823883a 	mov	r17,r3
 8003520:	d8c00717 	ldw	r3,28(sp)
 8003524:	d9401217 	ldw	r5,72(sp)
 8003528:	a2000c04 	addi	r8,r20,48
 800352c:	1021883a 	mov	r16,r2
 8003530:	1a000005 	stb	r8,0(r3)
 8003534:	800d883a 	mov	r6,r16
 8003538:	880f883a 	mov	r7,r17
 800353c:	a809883a 	mov	r4,r21
 8003540:	4029883a 	mov	r20,r8
 8003544:	800a5fc0 	call	800a5fc <__gedf2>
 8003548:	00841d16 	blt	zero,r2,80045c0 <_dtoa_r+0x15f4>
 800354c:	800d883a 	mov	r6,r16
 8003550:	880f883a 	mov	r7,r17
 8003554:	0009883a 	mov	r4,zero
 8003558:	014ffc34 	movhi	r5,16368
 800355c:	800b0380 	call	800b038 <__subdf3>
 8003560:	d9401217 	ldw	r5,72(sp)
 8003564:	100d883a 	mov	r6,r2
 8003568:	180f883a 	mov	r7,r3
 800356c:	a809883a 	mov	r4,r21
 8003570:	800a5fc0 	call	800a5fc <__gedf2>
 8003574:	db001617 	ldw	r12,88(sp)
 8003578:	00840e16 	blt	zero,r2,80045b4 <_dtoa_r+0x15e8>
 800357c:	00800044 	movi	r2,1
 8003580:	13006b0e 	bge	r2,r12,8003730 <_dtoa_r+0x764>
 8003584:	d9000717 	ldw	r4,28(sp)
 8003588:	dd800f15 	stw	r22,60(sp)
 800358c:	dcc01015 	stw	r19,64(sp)
 8003590:	2319883a 	add	r12,r4,r12
 8003594:	dcc01217 	ldw	r19,72(sp)
 8003598:	602d883a 	mov	r22,r12
 800359c:	dc801215 	stw	r18,72(sp)
 80035a0:	b825883a 	mov	r18,r23
 80035a4:	00000906 	br	80035cc <_dtoa_r+0x600>
 80035a8:	800b0380 	call	800b038 <__subdf3>
 80035ac:	a80d883a 	mov	r6,r21
 80035b0:	980f883a 	mov	r7,r19
 80035b4:	1009883a 	mov	r4,r2
 80035b8:	180b883a 	mov	r5,r3
 80035bc:	800a6d80 	call	800a6d8 <__ledf2>
 80035c0:	1003e816 	blt	r2,zero,8004564 <_dtoa_r+0x1598>
 80035c4:	b825883a 	mov	r18,r23
 80035c8:	bd83e926 	beq	r23,r22,8004570 <_dtoa_r+0x15a4>
 80035cc:	a809883a 	mov	r4,r21
 80035d0:	980b883a 	mov	r5,r19
 80035d4:	000d883a 	mov	r6,zero
 80035d8:	01d00934 	movhi	r7,16420
 80035dc:	800a7cc0 	call	800a7cc <__muldf3>
 80035e0:	000d883a 	mov	r6,zero
 80035e4:	01d00934 	movhi	r7,16420
 80035e8:	8009883a 	mov	r4,r16
 80035ec:	880b883a 	mov	r5,r17
 80035f0:	102b883a 	mov	r21,r2
 80035f4:	1827883a 	mov	r19,r3
 80035f8:	800a7cc0 	call	800a7cc <__muldf3>
 80035fc:	180b883a 	mov	r5,r3
 8003600:	1009883a 	mov	r4,r2
 8003604:	1821883a 	mov	r16,r3
 8003608:	1023883a 	mov	r17,r2
 800360c:	800b9340 	call	800b934 <__fixdfsi>
 8003610:	1009883a 	mov	r4,r2
 8003614:	1029883a 	mov	r20,r2
 8003618:	800b9b40 	call	800b9b4 <__floatsidf>
 800361c:	8809883a 	mov	r4,r17
 8003620:	800b883a 	mov	r5,r16
 8003624:	100d883a 	mov	r6,r2
 8003628:	180f883a 	mov	r7,r3
 800362c:	800b0380 	call	800b038 <__subdf3>
 8003630:	a5000c04 	addi	r20,r20,48
 8003634:	a80d883a 	mov	r6,r21
 8003638:	980f883a 	mov	r7,r19
 800363c:	1009883a 	mov	r4,r2
 8003640:	180b883a 	mov	r5,r3
 8003644:	95000005 	stb	r20,0(r18)
 8003648:	1021883a 	mov	r16,r2
 800364c:	1823883a 	mov	r17,r3
 8003650:	800a6d80 	call	800a6d8 <__ledf2>
 8003654:	bdc00044 	addi	r23,r23,1
 8003658:	800d883a 	mov	r6,r16
 800365c:	880f883a 	mov	r7,r17
 8003660:	0009883a 	mov	r4,zero
 8003664:	014ffc34 	movhi	r5,16368
 8003668:	103fcf0e 	bge	r2,zero,80035a8 <__alt_data_end+0xfc0035a8>
 800366c:	d8c01317 	ldw	r3,76(sp)
 8003670:	d8c00515 	stw	r3,20(sp)
 8003674:	d9400917 	ldw	r5,36(sp)
 8003678:	e009883a 	mov	r4,fp
 800367c:	80052100 	call	8005210 <_Bfree>
 8003680:	d9000517 	ldw	r4,20(sp)
 8003684:	d9802317 	ldw	r6,140(sp)
 8003688:	d9c02517 	ldw	r7,148(sp)
 800368c:	b8000005 	stb	zero,0(r23)
 8003690:	20800044 	addi	r2,r4,1
 8003694:	30800015 	stw	r2,0(r6)
 8003698:	3802aa26 	beq	r7,zero,8004144 <_dtoa_r+0x1178>
 800369c:	3dc00015 	stw	r23,0(r7)
 80036a0:	d8800717 	ldw	r2,28(sp)
 80036a4:	003e7906 	br	800308c <__alt_data_end+0xfc00308c>
 80036a8:	00800434 	movhi	r2,16
 80036ac:	10bfffc4 	addi	r2,r2,-1
 80036b0:	88a2703a 	and	r17,r17,r2
 80036b4:	883e851e 	bne	r17,zero,80030cc <__alt_data_end+0xfc0030cc>
 80036b8:	00820074 	movhi	r2,2049
 80036bc:	10b7f804 	addi	r2,r2,-8224
 80036c0:	003e8406 	br	80030d4 <__alt_data_end+0xfc0030d4>
 80036c4:	10c00204 	addi	r3,r2,8
 80036c8:	003e8706 	br	80030e8 <__alt_data_end+0xfc0030e8>
 80036cc:	01400434 	movhi	r5,16
 80036d0:	297fffc4 	addi	r5,r5,-1
 80036d4:	994a703a 	and	r5,r19,r5
 80036d8:	9009883a 	mov	r4,r18
 80036dc:	843f0044 	addi	r16,r16,-1023
 80036e0:	294ffc34 	orhi	r5,r5,16368
 80036e4:	dd800217 	ldw	r22,8(sp)
 80036e8:	d8001115 	stw	zero,68(sp)
 80036ec:	003ea506 	br	8003184 <__alt_data_end+0xfc003184>
 80036f0:	00820074 	movhi	r2,2049
 80036f4:	10b7ef04 	addi	r2,r2,-8260
 80036f8:	003e6406 	br	800308c <__alt_data_end+0xfc00308c>
 80036fc:	e0001115 	stw	zero,68(fp)
 8003700:	000b883a 	mov	r5,zero
 8003704:	e009883a 	mov	r4,fp
 8003708:	80051680 	call	8005168 <_Balloc>
 800370c:	01bfffc4 	movi	r6,-1
 8003710:	01c00044 	movi	r7,1
 8003714:	d8800715 	stw	r2,28(sp)
 8003718:	d9800c15 	stw	r6,48(sp)
 800371c:	e0801015 	stw	r2,64(fp)
 8003720:	d8000315 	stw	zero,12(sp)
 8003724:	d9c00b15 	stw	r7,44(sp)
 8003728:	d9800615 	stw	r6,24(sp)
 800372c:	d8002215 	stw	zero,136(sp)
 8003730:	d8800117 	ldw	r2,4(sp)
 8003734:	10008916 	blt	r2,zero,800395c <_dtoa_r+0x990>
 8003738:	d9000517 	ldw	r4,20(sp)
 800373c:	00c00384 	movi	r3,14
 8003740:	19008616 	blt	r3,r4,800395c <_dtoa_r+0x990>
 8003744:	200490fa 	slli	r2,r4,3
 8003748:	00c20074 	movhi	r3,2049
 800374c:	d9802217 	ldw	r6,136(sp)
 8003750:	18f81704 	addi	r3,r3,-8100
 8003754:	1885883a 	add	r2,r3,r2
 8003758:	14000017 	ldw	r16,0(r2)
 800375c:	14400117 	ldw	r17,4(r2)
 8003760:	30016316 	blt	r6,zero,8003cf0 <_dtoa_r+0xd24>
 8003764:	800d883a 	mov	r6,r16
 8003768:	880f883a 	mov	r7,r17
 800376c:	9009883a 	mov	r4,r18
 8003770:	980b883a 	mov	r5,r19
 8003774:	8009ba40 	call	8009ba4 <__divdf3>
 8003778:	180b883a 	mov	r5,r3
 800377c:	1009883a 	mov	r4,r2
 8003780:	800b9340 	call	800b934 <__fixdfsi>
 8003784:	1009883a 	mov	r4,r2
 8003788:	102b883a 	mov	r21,r2
 800378c:	800b9b40 	call	800b9b4 <__floatsidf>
 8003790:	800d883a 	mov	r6,r16
 8003794:	880f883a 	mov	r7,r17
 8003798:	1009883a 	mov	r4,r2
 800379c:	180b883a 	mov	r5,r3
 80037a0:	800a7cc0 	call	800a7cc <__muldf3>
 80037a4:	100d883a 	mov	r6,r2
 80037a8:	180f883a 	mov	r7,r3
 80037ac:	9009883a 	mov	r4,r18
 80037b0:	980b883a 	mov	r5,r19
 80037b4:	800b0380 	call	800b038 <__subdf3>
 80037b8:	d9c00717 	ldw	r7,28(sp)
 80037bc:	1009883a 	mov	r4,r2
 80037c0:	a8800c04 	addi	r2,r21,48
 80037c4:	38800005 	stb	r2,0(r7)
 80037c8:	3dc00044 	addi	r23,r7,1
 80037cc:	d9c00617 	ldw	r7,24(sp)
 80037d0:	01800044 	movi	r6,1
 80037d4:	180b883a 	mov	r5,r3
 80037d8:	2005883a 	mov	r2,r4
 80037dc:	39803826 	beq	r7,r6,80038c0 <_dtoa_r+0x8f4>
 80037e0:	000d883a 	mov	r6,zero
 80037e4:	01d00934 	movhi	r7,16420
 80037e8:	800a7cc0 	call	800a7cc <__muldf3>
 80037ec:	000d883a 	mov	r6,zero
 80037f0:	000f883a 	mov	r7,zero
 80037f4:	1009883a 	mov	r4,r2
 80037f8:	180b883a 	mov	r5,r3
 80037fc:	1025883a 	mov	r18,r2
 8003800:	1827883a 	mov	r19,r3
 8003804:	800a5740 	call	800a574 <__eqdf2>
 8003808:	103f9a26 	beq	r2,zero,8003674 <__alt_data_end+0xfc003674>
 800380c:	d9c00617 	ldw	r7,24(sp)
 8003810:	d8c00717 	ldw	r3,28(sp)
 8003814:	b829883a 	mov	r20,r23
 8003818:	38bfffc4 	addi	r2,r7,-1
 800381c:	18ad883a 	add	r22,r3,r2
 8003820:	00000a06 	br	800384c <_dtoa_r+0x880>
 8003824:	800a7cc0 	call	800a7cc <__muldf3>
 8003828:	000d883a 	mov	r6,zero
 800382c:	000f883a 	mov	r7,zero
 8003830:	1009883a 	mov	r4,r2
 8003834:	180b883a 	mov	r5,r3
 8003838:	1025883a 	mov	r18,r2
 800383c:	1827883a 	mov	r19,r3
 8003840:	b829883a 	mov	r20,r23
 8003844:	800a5740 	call	800a574 <__eqdf2>
 8003848:	103f8a26 	beq	r2,zero,8003674 <__alt_data_end+0xfc003674>
 800384c:	800d883a 	mov	r6,r16
 8003850:	880f883a 	mov	r7,r17
 8003854:	9009883a 	mov	r4,r18
 8003858:	980b883a 	mov	r5,r19
 800385c:	8009ba40 	call	8009ba4 <__divdf3>
 8003860:	180b883a 	mov	r5,r3
 8003864:	1009883a 	mov	r4,r2
 8003868:	800b9340 	call	800b934 <__fixdfsi>
 800386c:	1009883a 	mov	r4,r2
 8003870:	102b883a 	mov	r21,r2
 8003874:	800b9b40 	call	800b9b4 <__floatsidf>
 8003878:	800d883a 	mov	r6,r16
 800387c:	880f883a 	mov	r7,r17
 8003880:	1009883a 	mov	r4,r2
 8003884:	180b883a 	mov	r5,r3
 8003888:	800a7cc0 	call	800a7cc <__muldf3>
 800388c:	100d883a 	mov	r6,r2
 8003890:	180f883a 	mov	r7,r3
 8003894:	9009883a 	mov	r4,r18
 8003898:	980b883a 	mov	r5,r19
 800389c:	800b0380 	call	800b038 <__subdf3>
 80038a0:	aa000c04 	addi	r8,r21,48
 80038a4:	a2000005 	stb	r8,0(r20)
 80038a8:	000d883a 	mov	r6,zero
 80038ac:	01d00934 	movhi	r7,16420
 80038b0:	1009883a 	mov	r4,r2
 80038b4:	180b883a 	mov	r5,r3
 80038b8:	a5c00044 	addi	r23,r20,1
 80038bc:	b53fd91e 	bne	r22,r20,8003824 <__alt_data_end+0xfc003824>
 80038c0:	100d883a 	mov	r6,r2
 80038c4:	180f883a 	mov	r7,r3
 80038c8:	1009883a 	mov	r4,r2
 80038cc:	180b883a 	mov	r5,r3
 80038d0:	80092f80 	call	80092f8 <__adddf3>
 80038d4:	100d883a 	mov	r6,r2
 80038d8:	180f883a 	mov	r7,r3
 80038dc:	8009883a 	mov	r4,r16
 80038e0:	880b883a 	mov	r5,r17
 80038e4:	1027883a 	mov	r19,r2
 80038e8:	1825883a 	mov	r18,r3
 80038ec:	800a6d80 	call	800a6d8 <__ledf2>
 80038f0:	10000816 	blt	r2,zero,8003914 <_dtoa_r+0x948>
 80038f4:	980d883a 	mov	r6,r19
 80038f8:	900f883a 	mov	r7,r18
 80038fc:	8009883a 	mov	r4,r16
 8003900:	880b883a 	mov	r5,r17
 8003904:	800a5740 	call	800a574 <__eqdf2>
 8003908:	103f5a1e 	bne	r2,zero,8003674 <__alt_data_end+0xfc003674>
 800390c:	ad40004c 	andi	r21,r21,1
 8003910:	a83f5826 	beq	r21,zero,8003674 <__alt_data_end+0xfc003674>
 8003914:	bd3fffc3 	ldbu	r20,-1(r23)
 8003918:	b8bfffc4 	addi	r2,r23,-1
 800391c:	1007883a 	mov	r3,r2
 8003920:	01400e44 	movi	r5,57
 8003924:	d9800717 	ldw	r6,28(sp)
 8003928:	00000506 	br	8003940 <_dtoa_r+0x974>
 800392c:	18ffffc4 	addi	r3,r3,-1
 8003930:	11824726 	beq	r2,r6,8004250 <_dtoa_r+0x1284>
 8003934:	1d000003 	ldbu	r20,0(r3)
 8003938:	102f883a 	mov	r23,r2
 800393c:	10bfffc4 	addi	r2,r2,-1
 8003940:	a1003fcc 	andi	r4,r20,255
 8003944:	2100201c 	xori	r4,r4,128
 8003948:	213fe004 	addi	r4,r4,-128
 800394c:	217ff726 	beq	r4,r5,800392c <__alt_data_end+0xfc00392c>
 8003950:	a2000044 	addi	r8,r20,1
 8003954:	12000005 	stb	r8,0(r2)
 8003958:	003f4606 	br	8003674 <__alt_data_end+0xfc003674>
 800395c:	d9000b17 	ldw	r4,44(sp)
 8003960:	2000c826 	beq	r4,zero,8003c84 <_dtoa_r+0xcb8>
 8003964:	d9800317 	ldw	r6,12(sp)
 8003968:	00c00044 	movi	r3,1
 800396c:	1980f90e 	bge	r3,r6,8003d54 <_dtoa_r+0xd88>
 8003970:	d8800617 	ldw	r2,24(sp)
 8003974:	d8c00a17 	ldw	r3,40(sp)
 8003978:	157fffc4 	addi	r21,r2,-1
 800397c:	1d41f316 	blt	r3,r21,800414c <_dtoa_r+0x1180>
 8003980:	1d6bc83a 	sub	r21,r3,r21
 8003984:	d9c00617 	ldw	r7,24(sp)
 8003988:	3802aa16 	blt	r7,zero,8004434 <_dtoa_r+0x1468>
 800398c:	dd000817 	ldw	r20,32(sp)
 8003990:	d8800617 	ldw	r2,24(sp)
 8003994:	d8c00817 	ldw	r3,32(sp)
 8003998:	01400044 	movi	r5,1
 800399c:	e009883a 	mov	r4,fp
 80039a0:	1887883a 	add	r3,r3,r2
 80039a4:	d8c00815 	stw	r3,32(sp)
 80039a8:	b0ad883a 	add	r22,r22,r2
 80039ac:	800559c0 	call	800559c <__i2b>
 80039b0:	1023883a 	mov	r17,r2
 80039b4:	a0000826 	beq	r20,zero,80039d8 <_dtoa_r+0xa0c>
 80039b8:	0580070e 	bge	zero,r22,80039d8 <_dtoa_r+0xa0c>
 80039bc:	a005883a 	mov	r2,r20
 80039c0:	b500b916 	blt	r22,r20,8003ca8 <_dtoa_r+0xcdc>
 80039c4:	d9000817 	ldw	r4,32(sp)
 80039c8:	a0a9c83a 	sub	r20,r20,r2
 80039cc:	b0adc83a 	sub	r22,r22,r2
 80039d0:	2089c83a 	sub	r4,r4,r2
 80039d4:	d9000815 	stw	r4,32(sp)
 80039d8:	d9800a17 	ldw	r6,40(sp)
 80039dc:	0181810e 	bge	zero,r6,8003fe4 <_dtoa_r+0x1018>
 80039e0:	d9c00b17 	ldw	r7,44(sp)
 80039e4:	3800b326 	beq	r7,zero,8003cb4 <_dtoa_r+0xce8>
 80039e8:	a800b226 	beq	r21,zero,8003cb4 <_dtoa_r+0xce8>
 80039ec:	880b883a 	mov	r5,r17
 80039f0:	a80d883a 	mov	r6,r21
 80039f4:	e009883a 	mov	r4,fp
 80039f8:	80058640 	call	8005864 <__pow5mult>
 80039fc:	d9800917 	ldw	r6,36(sp)
 8003a00:	100b883a 	mov	r5,r2
 8003a04:	e009883a 	mov	r4,fp
 8003a08:	1023883a 	mov	r17,r2
 8003a0c:	80055d80 	call	80055d8 <__multiply>
 8003a10:	1021883a 	mov	r16,r2
 8003a14:	d8800a17 	ldw	r2,40(sp)
 8003a18:	d9400917 	ldw	r5,36(sp)
 8003a1c:	e009883a 	mov	r4,fp
 8003a20:	1545c83a 	sub	r2,r2,r21
 8003a24:	d8800a15 	stw	r2,40(sp)
 8003a28:	80052100 	call	8005210 <_Bfree>
 8003a2c:	d8c00a17 	ldw	r3,40(sp)
 8003a30:	18009f1e 	bne	r3,zero,8003cb0 <_dtoa_r+0xce4>
 8003a34:	05c00044 	movi	r23,1
 8003a38:	e009883a 	mov	r4,fp
 8003a3c:	b80b883a 	mov	r5,r23
 8003a40:	800559c0 	call	800559c <__i2b>
 8003a44:	d9000d17 	ldw	r4,52(sp)
 8003a48:	102b883a 	mov	r21,r2
 8003a4c:	2000ce26 	beq	r4,zero,8003d88 <_dtoa_r+0xdbc>
 8003a50:	200d883a 	mov	r6,r4
 8003a54:	100b883a 	mov	r5,r2
 8003a58:	e009883a 	mov	r4,fp
 8003a5c:	80058640 	call	8005864 <__pow5mult>
 8003a60:	d9800317 	ldw	r6,12(sp)
 8003a64:	102b883a 	mov	r21,r2
 8003a68:	b981810e 	bge	r23,r6,8004070 <_dtoa_r+0x10a4>
 8003a6c:	0027883a 	mov	r19,zero
 8003a70:	a8800417 	ldw	r2,16(r21)
 8003a74:	05c00804 	movi	r23,32
 8003a78:	10800104 	addi	r2,r2,4
 8003a7c:	1085883a 	add	r2,r2,r2
 8003a80:	1085883a 	add	r2,r2,r2
 8003a84:	a885883a 	add	r2,r21,r2
 8003a88:	11000017 	ldw	r4,0(r2)
 8003a8c:	80054840 	call	8005484 <__hi0bits>
 8003a90:	b885c83a 	sub	r2,r23,r2
 8003a94:	1585883a 	add	r2,r2,r22
 8003a98:	108007cc 	andi	r2,r2,31
 8003a9c:	1000b326 	beq	r2,zero,8003d6c <_dtoa_r+0xda0>
 8003aa0:	00c00804 	movi	r3,32
 8003aa4:	1887c83a 	sub	r3,r3,r2
 8003aa8:	01000104 	movi	r4,4
 8003aac:	20c2cd0e 	bge	r4,r3,80045e4 <_dtoa_r+0x1618>
 8003ab0:	00c00704 	movi	r3,28
 8003ab4:	1885c83a 	sub	r2,r3,r2
 8003ab8:	d8c00817 	ldw	r3,32(sp)
 8003abc:	a0a9883a 	add	r20,r20,r2
 8003ac0:	b0ad883a 	add	r22,r22,r2
 8003ac4:	1887883a 	add	r3,r3,r2
 8003ac8:	d8c00815 	stw	r3,32(sp)
 8003acc:	d9800817 	ldw	r6,32(sp)
 8003ad0:	0180040e 	bge	zero,r6,8003ae4 <_dtoa_r+0xb18>
 8003ad4:	800b883a 	mov	r5,r16
 8003ad8:	e009883a 	mov	r4,fp
 8003adc:	80059a40 	call	80059a4 <__lshift>
 8003ae0:	1021883a 	mov	r16,r2
 8003ae4:	0580050e 	bge	zero,r22,8003afc <_dtoa_r+0xb30>
 8003ae8:	a80b883a 	mov	r5,r21
 8003aec:	b00d883a 	mov	r6,r22
 8003af0:	e009883a 	mov	r4,fp
 8003af4:	80059a40 	call	80059a4 <__lshift>
 8003af8:	102b883a 	mov	r21,r2
 8003afc:	d9c00e17 	ldw	r7,56(sp)
 8003b00:	3801211e 	bne	r7,zero,8003f88 <_dtoa_r+0xfbc>
 8003b04:	d9800617 	ldw	r6,24(sp)
 8003b08:	0181380e 	bge	zero,r6,8003fec <_dtoa_r+0x1020>
 8003b0c:	d8c00b17 	ldw	r3,44(sp)
 8003b10:	1800ab1e 	bne	r3,zero,8003dc0 <_dtoa_r+0xdf4>
 8003b14:	dc800717 	ldw	r18,28(sp)
 8003b18:	dcc00617 	ldw	r19,24(sp)
 8003b1c:	9029883a 	mov	r20,r18
 8003b20:	00000206 	br	8003b2c <_dtoa_r+0xb60>
 8003b24:	80052380 	call	8005238 <__multadd>
 8003b28:	1021883a 	mov	r16,r2
 8003b2c:	a80b883a 	mov	r5,r21
 8003b30:	8009883a 	mov	r4,r16
 8003b34:	8002da40 	call	8002da4 <quorem>
 8003b38:	10800c04 	addi	r2,r2,48
 8003b3c:	90800005 	stb	r2,0(r18)
 8003b40:	94800044 	addi	r18,r18,1
 8003b44:	9507c83a 	sub	r3,r18,r20
 8003b48:	000f883a 	mov	r7,zero
 8003b4c:	01800284 	movi	r6,10
 8003b50:	800b883a 	mov	r5,r16
 8003b54:	e009883a 	mov	r4,fp
 8003b58:	1cfff216 	blt	r3,r19,8003b24 <__alt_data_end+0xfc003b24>
 8003b5c:	1011883a 	mov	r8,r2
 8003b60:	d8800617 	ldw	r2,24(sp)
 8003b64:	0082370e 	bge	zero,r2,8004444 <_dtoa_r+0x1478>
 8003b68:	d9000717 	ldw	r4,28(sp)
 8003b6c:	0025883a 	mov	r18,zero
 8003b70:	20af883a 	add	r23,r4,r2
 8003b74:	01800044 	movi	r6,1
 8003b78:	800b883a 	mov	r5,r16
 8003b7c:	e009883a 	mov	r4,fp
 8003b80:	da001715 	stw	r8,92(sp)
 8003b84:	80059a40 	call	80059a4 <__lshift>
 8003b88:	a80b883a 	mov	r5,r21
 8003b8c:	1009883a 	mov	r4,r2
 8003b90:	d8800915 	stw	r2,36(sp)
 8003b94:	8005aec0 	call	8005aec <__mcmp>
 8003b98:	da001717 	ldw	r8,92(sp)
 8003b9c:	0081800e 	bge	zero,r2,80041a0 <_dtoa_r+0x11d4>
 8003ba0:	b93fffc3 	ldbu	r4,-1(r23)
 8003ba4:	b8bfffc4 	addi	r2,r23,-1
 8003ba8:	1007883a 	mov	r3,r2
 8003bac:	01800e44 	movi	r6,57
 8003bb0:	d9c00717 	ldw	r7,28(sp)
 8003bb4:	00000506 	br	8003bcc <_dtoa_r+0xc00>
 8003bb8:	18ffffc4 	addi	r3,r3,-1
 8003bbc:	11c12326 	beq	r2,r7,800404c <_dtoa_r+0x1080>
 8003bc0:	19000003 	ldbu	r4,0(r3)
 8003bc4:	102f883a 	mov	r23,r2
 8003bc8:	10bfffc4 	addi	r2,r2,-1
 8003bcc:	21403fcc 	andi	r5,r4,255
 8003bd0:	2940201c 	xori	r5,r5,128
 8003bd4:	297fe004 	addi	r5,r5,-128
 8003bd8:	29bff726 	beq	r5,r6,8003bb8 <__alt_data_end+0xfc003bb8>
 8003bdc:	21000044 	addi	r4,r4,1
 8003be0:	11000005 	stb	r4,0(r2)
 8003be4:	a80b883a 	mov	r5,r21
 8003be8:	e009883a 	mov	r4,fp
 8003bec:	80052100 	call	8005210 <_Bfree>
 8003bf0:	883ea026 	beq	r17,zero,8003674 <__alt_data_end+0xfc003674>
 8003bf4:	90000426 	beq	r18,zero,8003c08 <_dtoa_r+0xc3c>
 8003bf8:	94400326 	beq	r18,r17,8003c08 <_dtoa_r+0xc3c>
 8003bfc:	900b883a 	mov	r5,r18
 8003c00:	e009883a 	mov	r4,fp
 8003c04:	80052100 	call	8005210 <_Bfree>
 8003c08:	880b883a 	mov	r5,r17
 8003c0c:	e009883a 	mov	r4,fp
 8003c10:	80052100 	call	8005210 <_Bfree>
 8003c14:	003e9706 	br	8003674 <__alt_data_end+0xfc003674>
 8003c18:	01800044 	movi	r6,1
 8003c1c:	d9800e15 	stw	r6,56(sp)
 8003c20:	003d9606 	br	800327c <__alt_data_end+0xfc00327c>
 8003c24:	d8800817 	ldw	r2,32(sp)
 8003c28:	d8c00517 	ldw	r3,20(sp)
 8003c2c:	d8000d15 	stw	zero,52(sp)
 8003c30:	10c5c83a 	sub	r2,r2,r3
 8003c34:	00c9c83a 	sub	r4,zero,r3
 8003c38:	d8800815 	stw	r2,32(sp)
 8003c3c:	d9000a15 	stw	r4,40(sp)
 8003c40:	003d9706 	br	80032a0 <__alt_data_end+0xfc0032a0>
 8003c44:	05adc83a 	sub	r22,zero,r22
 8003c48:	dd800815 	stw	r22,32(sp)
 8003c4c:	002d883a 	mov	r22,zero
 8003c50:	003d8e06 	br	800328c <__alt_data_end+0xfc00328c>
 8003c54:	d9000517 	ldw	r4,20(sp)
 8003c58:	800b9b40 	call	800b9b4 <__floatsidf>
 8003c5c:	100d883a 	mov	r6,r2
 8003c60:	180f883a 	mov	r7,r3
 8003c64:	a009883a 	mov	r4,r20
 8003c68:	880b883a 	mov	r5,r17
 8003c6c:	800a5740 	call	800a574 <__eqdf2>
 8003c70:	103d7126 	beq	r2,zero,8003238 <__alt_data_end+0xfc003238>
 8003c74:	d9c00517 	ldw	r7,20(sp)
 8003c78:	39ffffc4 	addi	r7,r7,-1
 8003c7c:	d9c00515 	stw	r7,20(sp)
 8003c80:	003d6d06 	br	8003238 <__alt_data_end+0xfc003238>
 8003c84:	dd400a17 	ldw	r21,40(sp)
 8003c88:	dd000817 	ldw	r20,32(sp)
 8003c8c:	0023883a 	mov	r17,zero
 8003c90:	003f4806 	br	80039b4 <__alt_data_end+0xfc0039b4>
 8003c94:	10e3c83a 	sub	r17,r2,r3
 8003c98:	9448983a 	sll	r4,r18,r17
 8003c9c:	003d3206 	br	8003168 <__alt_data_end+0xfc003168>
 8003ca0:	d8000e15 	stw	zero,56(sp)
 8003ca4:	003d7506 	br	800327c <__alt_data_end+0xfc00327c>
 8003ca8:	b005883a 	mov	r2,r22
 8003cac:	003f4506 	br	80039c4 <__alt_data_end+0xfc0039c4>
 8003cb0:	dc000915 	stw	r16,36(sp)
 8003cb4:	d9800a17 	ldw	r6,40(sp)
 8003cb8:	d9400917 	ldw	r5,36(sp)
 8003cbc:	e009883a 	mov	r4,fp
 8003cc0:	80058640 	call	8005864 <__pow5mult>
 8003cc4:	1021883a 	mov	r16,r2
 8003cc8:	003f5a06 	br	8003a34 <__alt_data_end+0xfc003a34>
 8003ccc:	01c00044 	movi	r7,1
 8003cd0:	d9c00b15 	stw	r7,44(sp)
 8003cd4:	d8802217 	ldw	r2,136(sp)
 8003cd8:	0081280e 	bge	zero,r2,800417c <_dtoa_r+0x11b0>
 8003cdc:	100d883a 	mov	r6,r2
 8003ce0:	1021883a 	mov	r16,r2
 8003ce4:	d8800c15 	stw	r2,48(sp)
 8003ce8:	d8800615 	stw	r2,24(sp)
 8003cec:	003d8806 	br	8003310 <__alt_data_end+0xfc003310>
 8003cf0:	d8800617 	ldw	r2,24(sp)
 8003cf4:	00be9b16 	blt	zero,r2,8003764 <__alt_data_end+0xfc003764>
 8003cf8:	10010f1e 	bne	r2,zero,8004138 <_dtoa_r+0x116c>
 8003cfc:	880b883a 	mov	r5,r17
 8003d00:	000d883a 	mov	r6,zero
 8003d04:	01d00534 	movhi	r7,16404
 8003d08:	8009883a 	mov	r4,r16
 8003d0c:	800a7cc0 	call	800a7cc <__muldf3>
 8003d10:	900d883a 	mov	r6,r18
 8003d14:	980f883a 	mov	r7,r19
 8003d18:	1009883a 	mov	r4,r2
 8003d1c:	180b883a 	mov	r5,r3
 8003d20:	800a5fc0 	call	800a5fc <__gedf2>
 8003d24:	002b883a 	mov	r21,zero
 8003d28:	0023883a 	mov	r17,zero
 8003d2c:	1000bf16 	blt	r2,zero,800402c <_dtoa_r+0x1060>
 8003d30:	d9802217 	ldw	r6,136(sp)
 8003d34:	ddc00717 	ldw	r23,28(sp)
 8003d38:	018c303a 	nor	r6,zero,r6
 8003d3c:	d9800515 	stw	r6,20(sp)
 8003d40:	a80b883a 	mov	r5,r21
 8003d44:	e009883a 	mov	r4,fp
 8003d48:	80052100 	call	8005210 <_Bfree>
 8003d4c:	883e4926 	beq	r17,zero,8003674 <__alt_data_end+0xfc003674>
 8003d50:	003fad06 	br	8003c08 <__alt_data_end+0xfc003c08>
 8003d54:	d9c01117 	ldw	r7,68(sp)
 8003d58:	3801bc26 	beq	r7,zero,800444c <_dtoa_r+0x1480>
 8003d5c:	10810cc4 	addi	r2,r2,1075
 8003d60:	dd400a17 	ldw	r21,40(sp)
 8003d64:	dd000817 	ldw	r20,32(sp)
 8003d68:	003f0a06 	br	8003994 <__alt_data_end+0xfc003994>
 8003d6c:	00800704 	movi	r2,28
 8003d70:	d9000817 	ldw	r4,32(sp)
 8003d74:	a0a9883a 	add	r20,r20,r2
 8003d78:	b0ad883a 	add	r22,r22,r2
 8003d7c:	2089883a 	add	r4,r4,r2
 8003d80:	d9000815 	stw	r4,32(sp)
 8003d84:	003f5106 	br	8003acc <__alt_data_end+0xfc003acc>
 8003d88:	d8c00317 	ldw	r3,12(sp)
 8003d8c:	b8c1fc0e 	bge	r23,r3,8004580 <_dtoa_r+0x15b4>
 8003d90:	0027883a 	mov	r19,zero
 8003d94:	b805883a 	mov	r2,r23
 8003d98:	003f3e06 	br	8003a94 <__alt_data_end+0xfc003a94>
 8003d9c:	880b883a 	mov	r5,r17
 8003da0:	e009883a 	mov	r4,fp
 8003da4:	000f883a 	mov	r7,zero
 8003da8:	01800284 	movi	r6,10
 8003dac:	80052380 	call	8005238 <__multadd>
 8003db0:	d9000c17 	ldw	r4,48(sp)
 8003db4:	1023883a 	mov	r17,r2
 8003db8:	0102040e 	bge	zero,r4,80045cc <_dtoa_r+0x1600>
 8003dbc:	d9000615 	stw	r4,24(sp)
 8003dc0:	0500050e 	bge	zero,r20,8003dd8 <_dtoa_r+0xe0c>
 8003dc4:	880b883a 	mov	r5,r17
 8003dc8:	a00d883a 	mov	r6,r20
 8003dcc:	e009883a 	mov	r4,fp
 8003dd0:	80059a40 	call	80059a4 <__lshift>
 8003dd4:	1023883a 	mov	r17,r2
 8003dd8:	9801241e 	bne	r19,zero,800426c <_dtoa_r+0x12a0>
 8003ddc:	8829883a 	mov	r20,r17
 8003de0:	d9000617 	ldw	r4,24(sp)
 8003de4:	dcc00717 	ldw	r19,28(sp)
 8003de8:	9480004c 	andi	r18,r18,1
 8003dec:	20bfffc4 	addi	r2,r4,-1
 8003df0:	9885883a 	add	r2,r19,r2
 8003df4:	d8800415 	stw	r2,16(sp)
 8003df8:	dc800615 	stw	r18,24(sp)
 8003dfc:	a80b883a 	mov	r5,r21
 8003e00:	8009883a 	mov	r4,r16
 8003e04:	8002da40 	call	8002da4 <quorem>
 8003e08:	880b883a 	mov	r5,r17
 8003e0c:	8009883a 	mov	r4,r16
 8003e10:	102f883a 	mov	r23,r2
 8003e14:	8005aec0 	call	8005aec <__mcmp>
 8003e18:	a80b883a 	mov	r5,r21
 8003e1c:	a00d883a 	mov	r6,r20
 8003e20:	e009883a 	mov	r4,fp
 8003e24:	102d883a 	mov	r22,r2
 8003e28:	8005b4c0 	call	8005b4c <__mdiff>
 8003e2c:	1007883a 	mov	r3,r2
 8003e30:	10800317 	ldw	r2,12(r2)
 8003e34:	bc800c04 	addi	r18,r23,48
 8003e38:	180b883a 	mov	r5,r3
 8003e3c:	10004e1e 	bne	r2,zero,8003f78 <_dtoa_r+0xfac>
 8003e40:	8009883a 	mov	r4,r16
 8003e44:	d8c01615 	stw	r3,88(sp)
 8003e48:	8005aec0 	call	8005aec <__mcmp>
 8003e4c:	d8c01617 	ldw	r3,88(sp)
 8003e50:	e009883a 	mov	r4,fp
 8003e54:	d8801615 	stw	r2,88(sp)
 8003e58:	180b883a 	mov	r5,r3
 8003e5c:	80052100 	call	8005210 <_Bfree>
 8003e60:	d8801617 	ldw	r2,88(sp)
 8003e64:	1000041e 	bne	r2,zero,8003e78 <_dtoa_r+0xeac>
 8003e68:	d9800317 	ldw	r6,12(sp)
 8003e6c:	3000021e 	bne	r6,zero,8003e78 <_dtoa_r+0xeac>
 8003e70:	d8c00617 	ldw	r3,24(sp)
 8003e74:	18003726 	beq	r3,zero,8003f54 <_dtoa_r+0xf88>
 8003e78:	b0002016 	blt	r22,zero,8003efc <_dtoa_r+0xf30>
 8003e7c:	b000041e 	bne	r22,zero,8003e90 <_dtoa_r+0xec4>
 8003e80:	d9000317 	ldw	r4,12(sp)
 8003e84:	2000021e 	bne	r4,zero,8003e90 <_dtoa_r+0xec4>
 8003e88:	d8c00617 	ldw	r3,24(sp)
 8003e8c:	18001b26 	beq	r3,zero,8003efc <_dtoa_r+0xf30>
 8003e90:	00810716 	blt	zero,r2,80042b0 <_dtoa_r+0x12e4>
 8003e94:	d8c00417 	ldw	r3,16(sp)
 8003e98:	9d800044 	addi	r22,r19,1
 8003e9c:	9c800005 	stb	r18,0(r19)
 8003ea0:	b02f883a 	mov	r23,r22
 8003ea4:	98c10626 	beq	r19,r3,80042c0 <_dtoa_r+0x12f4>
 8003ea8:	800b883a 	mov	r5,r16
 8003eac:	000f883a 	mov	r7,zero
 8003eb0:	01800284 	movi	r6,10
 8003eb4:	e009883a 	mov	r4,fp
 8003eb8:	80052380 	call	8005238 <__multadd>
 8003ebc:	1021883a 	mov	r16,r2
 8003ec0:	000f883a 	mov	r7,zero
 8003ec4:	01800284 	movi	r6,10
 8003ec8:	880b883a 	mov	r5,r17
 8003ecc:	e009883a 	mov	r4,fp
 8003ed0:	8d002526 	beq	r17,r20,8003f68 <_dtoa_r+0xf9c>
 8003ed4:	80052380 	call	8005238 <__multadd>
 8003ed8:	a00b883a 	mov	r5,r20
 8003edc:	000f883a 	mov	r7,zero
 8003ee0:	01800284 	movi	r6,10
 8003ee4:	e009883a 	mov	r4,fp
 8003ee8:	1023883a 	mov	r17,r2
 8003eec:	80052380 	call	8005238 <__multadd>
 8003ef0:	1029883a 	mov	r20,r2
 8003ef4:	b027883a 	mov	r19,r22
 8003ef8:	003fc006 	br	8003dfc <__alt_data_end+0xfc003dfc>
 8003efc:	9011883a 	mov	r8,r18
 8003f00:	00800e0e 	bge	zero,r2,8003f3c <_dtoa_r+0xf70>
 8003f04:	800b883a 	mov	r5,r16
 8003f08:	01800044 	movi	r6,1
 8003f0c:	e009883a 	mov	r4,fp
 8003f10:	da001715 	stw	r8,92(sp)
 8003f14:	80059a40 	call	80059a4 <__lshift>
 8003f18:	a80b883a 	mov	r5,r21
 8003f1c:	1009883a 	mov	r4,r2
 8003f20:	1021883a 	mov	r16,r2
 8003f24:	8005aec0 	call	8005aec <__mcmp>
 8003f28:	da001717 	ldw	r8,92(sp)
 8003f2c:	0081960e 	bge	zero,r2,8004588 <_dtoa_r+0x15bc>
 8003f30:	00800e44 	movi	r2,57
 8003f34:	40817026 	beq	r8,r2,80044f8 <_dtoa_r+0x152c>
 8003f38:	ba000c44 	addi	r8,r23,49
 8003f3c:	8825883a 	mov	r18,r17
 8003f40:	9dc00044 	addi	r23,r19,1
 8003f44:	9a000005 	stb	r8,0(r19)
 8003f48:	a023883a 	mov	r17,r20
 8003f4c:	dc000915 	stw	r16,36(sp)
 8003f50:	003f2406 	br	8003be4 <__alt_data_end+0xfc003be4>
 8003f54:	00800e44 	movi	r2,57
 8003f58:	9011883a 	mov	r8,r18
 8003f5c:	90816626 	beq	r18,r2,80044f8 <_dtoa_r+0x152c>
 8003f60:	05bff516 	blt	zero,r22,8003f38 <__alt_data_end+0xfc003f38>
 8003f64:	003ff506 	br	8003f3c <__alt_data_end+0xfc003f3c>
 8003f68:	80052380 	call	8005238 <__multadd>
 8003f6c:	1023883a 	mov	r17,r2
 8003f70:	1029883a 	mov	r20,r2
 8003f74:	003fdf06 	br	8003ef4 <__alt_data_end+0xfc003ef4>
 8003f78:	e009883a 	mov	r4,fp
 8003f7c:	80052100 	call	8005210 <_Bfree>
 8003f80:	00800044 	movi	r2,1
 8003f84:	003fbc06 	br	8003e78 <__alt_data_end+0xfc003e78>
 8003f88:	a80b883a 	mov	r5,r21
 8003f8c:	8009883a 	mov	r4,r16
 8003f90:	8005aec0 	call	8005aec <__mcmp>
 8003f94:	103edb0e 	bge	r2,zero,8003b04 <__alt_data_end+0xfc003b04>
 8003f98:	800b883a 	mov	r5,r16
 8003f9c:	000f883a 	mov	r7,zero
 8003fa0:	01800284 	movi	r6,10
 8003fa4:	e009883a 	mov	r4,fp
 8003fa8:	80052380 	call	8005238 <__multadd>
 8003fac:	1021883a 	mov	r16,r2
 8003fb0:	d8800517 	ldw	r2,20(sp)
 8003fb4:	d8c00b17 	ldw	r3,44(sp)
 8003fb8:	10bfffc4 	addi	r2,r2,-1
 8003fbc:	d8800515 	stw	r2,20(sp)
 8003fc0:	183f761e 	bne	r3,zero,8003d9c <__alt_data_end+0xfc003d9c>
 8003fc4:	d9000c17 	ldw	r4,48(sp)
 8003fc8:	0101730e 	bge	zero,r4,8004598 <_dtoa_r+0x15cc>
 8003fcc:	d9000615 	stw	r4,24(sp)
 8003fd0:	003ed006 	br	8003b14 <__alt_data_end+0xfc003b14>
 8003fd4:	00800084 	movi	r2,2
 8003fd8:	3081861e 	bne	r6,r2,80045f4 <_dtoa_r+0x1628>
 8003fdc:	d8000b15 	stw	zero,44(sp)
 8003fe0:	003f3c06 	br	8003cd4 <__alt_data_end+0xfc003cd4>
 8003fe4:	dc000917 	ldw	r16,36(sp)
 8003fe8:	003e9206 	br	8003a34 <__alt_data_end+0xfc003a34>
 8003fec:	d9c00317 	ldw	r7,12(sp)
 8003ff0:	00800084 	movi	r2,2
 8003ff4:	11fec50e 	bge	r2,r7,8003b0c <__alt_data_end+0xfc003b0c>
 8003ff8:	d9000617 	ldw	r4,24(sp)
 8003ffc:	20013c1e 	bne	r4,zero,80044f0 <_dtoa_r+0x1524>
 8004000:	a80b883a 	mov	r5,r21
 8004004:	000f883a 	mov	r7,zero
 8004008:	01800144 	movi	r6,5
 800400c:	e009883a 	mov	r4,fp
 8004010:	80052380 	call	8005238 <__multadd>
 8004014:	100b883a 	mov	r5,r2
 8004018:	8009883a 	mov	r4,r16
 800401c:	102b883a 	mov	r21,r2
 8004020:	8005aec0 	call	8005aec <__mcmp>
 8004024:	dc000915 	stw	r16,36(sp)
 8004028:	00bf410e 	bge	zero,r2,8003d30 <__alt_data_end+0xfc003d30>
 800402c:	d9c00717 	ldw	r7,28(sp)
 8004030:	00800c44 	movi	r2,49
 8004034:	38800005 	stb	r2,0(r7)
 8004038:	d8800517 	ldw	r2,20(sp)
 800403c:	3dc00044 	addi	r23,r7,1
 8004040:	10800044 	addi	r2,r2,1
 8004044:	d8800515 	stw	r2,20(sp)
 8004048:	003f3d06 	br	8003d40 <__alt_data_end+0xfc003d40>
 800404c:	d9800517 	ldw	r6,20(sp)
 8004050:	d9c00717 	ldw	r7,28(sp)
 8004054:	00800c44 	movi	r2,49
 8004058:	31800044 	addi	r6,r6,1
 800405c:	d9800515 	stw	r6,20(sp)
 8004060:	38800005 	stb	r2,0(r7)
 8004064:	003edf06 	br	8003be4 <__alt_data_end+0xfc003be4>
 8004068:	d8000b15 	stw	zero,44(sp)
 800406c:	003c9f06 	br	80032ec <__alt_data_end+0xfc0032ec>
 8004070:	903e7e1e 	bne	r18,zero,8003a6c <__alt_data_end+0xfc003a6c>
 8004074:	00800434 	movhi	r2,16
 8004078:	10bfffc4 	addi	r2,r2,-1
 800407c:	9884703a 	and	r2,r19,r2
 8004080:	1000ea1e 	bne	r2,zero,800442c <_dtoa_r+0x1460>
 8004084:	9cdffc2c 	andhi	r19,r19,32752
 8004088:	9800e826 	beq	r19,zero,800442c <_dtoa_r+0x1460>
 800408c:	d9c00817 	ldw	r7,32(sp)
 8004090:	b5800044 	addi	r22,r22,1
 8004094:	04c00044 	movi	r19,1
 8004098:	39c00044 	addi	r7,r7,1
 800409c:	d9c00815 	stw	r7,32(sp)
 80040a0:	d8800d17 	ldw	r2,52(sp)
 80040a4:	103e721e 	bne	r2,zero,8003a70 <__alt_data_end+0xfc003a70>
 80040a8:	00800044 	movi	r2,1
 80040ac:	003e7906 	br	8003a94 <__alt_data_end+0xfc003a94>
 80040b0:	8009883a 	mov	r4,r16
 80040b4:	800b9b40 	call	800b9b4 <__floatsidf>
 80040b8:	d9800f17 	ldw	r6,60(sp)
 80040bc:	d9c01017 	ldw	r7,64(sp)
 80040c0:	1009883a 	mov	r4,r2
 80040c4:	180b883a 	mov	r5,r3
 80040c8:	800a7cc0 	call	800a7cc <__muldf3>
 80040cc:	000d883a 	mov	r6,zero
 80040d0:	01d00734 	movhi	r7,16412
 80040d4:	1009883a 	mov	r4,r2
 80040d8:	180b883a 	mov	r5,r3
 80040dc:	80092f80 	call	80092f8 <__adddf3>
 80040e0:	047f3034 	movhi	r17,64704
 80040e4:	1021883a 	mov	r16,r2
 80040e8:	1c63883a 	add	r17,r3,r17
 80040ec:	d9000f17 	ldw	r4,60(sp)
 80040f0:	d9401017 	ldw	r5,64(sp)
 80040f4:	000d883a 	mov	r6,zero
 80040f8:	01d00534 	movhi	r7,16404
 80040fc:	800b0380 	call	800b038 <__subdf3>
 8004100:	800d883a 	mov	r6,r16
 8004104:	880f883a 	mov	r7,r17
 8004108:	1009883a 	mov	r4,r2
 800410c:	180b883a 	mov	r5,r3
 8004110:	102b883a 	mov	r21,r2
 8004114:	1829883a 	mov	r20,r3
 8004118:	800a5fc0 	call	800a5fc <__gedf2>
 800411c:	00806c16 	blt	zero,r2,80042d0 <_dtoa_r+0x1304>
 8004120:	89e0003c 	xorhi	r7,r17,32768
 8004124:	800d883a 	mov	r6,r16
 8004128:	a809883a 	mov	r4,r21
 800412c:	a00b883a 	mov	r5,r20
 8004130:	800a6d80 	call	800a6d8 <__ledf2>
 8004134:	103d7e0e 	bge	r2,zero,8003730 <__alt_data_end+0xfc003730>
 8004138:	002b883a 	mov	r21,zero
 800413c:	0023883a 	mov	r17,zero
 8004140:	003efb06 	br	8003d30 <__alt_data_end+0xfc003d30>
 8004144:	d8800717 	ldw	r2,28(sp)
 8004148:	003bd006 	br	800308c <__alt_data_end+0xfc00308c>
 800414c:	d9000a17 	ldw	r4,40(sp)
 8004150:	d9800d17 	ldw	r6,52(sp)
 8004154:	dd400a15 	stw	r21,40(sp)
 8004158:	a905c83a 	sub	r2,r21,r4
 800415c:	308d883a 	add	r6,r6,r2
 8004160:	d9800d15 	stw	r6,52(sp)
 8004164:	002b883a 	mov	r21,zero
 8004168:	003e0606 	br	8003984 <__alt_data_end+0xfc003984>
 800416c:	9023883a 	mov	r17,r18
 8004170:	9829883a 	mov	r20,r19
 8004174:	04000084 	movi	r16,2
 8004178:	003c9206 	br	80033c4 <__alt_data_end+0xfc0033c4>
 800417c:	04000044 	movi	r16,1
 8004180:	dc000c15 	stw	r16,48(sp)
 8004184:	dc000615 	stw	r16,24(sp)
 8004188:	dc002215 	stw	r16,136(sp)
 800418c:	e0001115 	stw	zero,68(fp)
 8004190:	000b883a 	mov	r5,zero
 8004194:	003c6906 	br	800333c <__alt_data_end+0xfc00333c>
 8004198:	3021883a 	mov	r16,r6
 800419c:	003ffb06 	br	800418c <__alt_data_end+0xfc00418c>
 80041a0:	1000021e 	bne	r2,zero,80041ac <_dtoa_r+0x11e0>
 80041a4:	4200004c 	andi	r8,r8,1
 80041a8:	403e7d1e 	bne	r8,zero,8003ba0 <__alt_data_end+0xfc003ba0>
 80041ac:	01000c04 	movi	r4,48
 80041b0:	00000106 	br	80041b8 <_dtoa_r+0x11ec>
 80041b4:	102f883a 	mov	r23,r2
 80041b8:	b8bfffc4 	addi	r2,r23,-1
 80041bc:	10c00007 	ldb	r3,0(r2)
 80041c0:	193ffc26 	beq	r3,r4,80041b4 <__alt_data_end+0xfc0041b4>
 80041c4:	003e8706 	br	8003be4 <__alt_data_end+0xfc003be4>
 80041c8:	d8800517 	ldw	r2,20(sp)
 80041cc:	00a3c83a 	sub	r17,zero,r2
 80041d0:	8800a426 	beq	r17,zero,8004464 <_dtoa_r+0x1498>
 80041d4:	888003cc 	andi	r2,r17,15
 80041d8:	100490fa 	slli	r2,r2,3
 80041dc:	00c20074 	movhi	r3,2049
 80041e0:	18f81704 	addi	r3,r3,-8100
 80041e4:	1885883a 	add	r2,r3,r2
 80041e8:	11800017 	ldw	r6,0(r2)
 80041ec:	11c00117 	ldw	r7,4(r2)
 80041f0:	9009883a 	mov	r4,r18
 80041f4:	980b883a 	mov	r5,r19
 80041f8:	8823d13a 	srai	r17,r17,4
 80041fc:	800a7cc0 	call	800a7cc <__muldf3>
 8004200:	d8800f15 	stw	r2,60(sp)
 8004204:	d8c01015 	stw	r3,64(sp)
 8004208:	8800e826 	beq	r17,zero,80045ac <_dtoa_r+0x15e0>
 800420c:	05020074 	movhi	r20,2049
 8004210:	a5380d04 	addi	r20,r20,-8140
 8004214:	04000084 	movi	r16,2
 8004218:	8980004c 	andi	r6,r17,1
 800421c:	1009883a 	mov	r4,r2
 8004220:	8823d07a 	srai	r17,r17,1
 8004224:	180b883a 	mov	r5,r3
 8004228:	30000426 	beq	r6,zero,800423c <_dtoa_r+0x1270>
 800422c:	a1800017 	ldw	r6,0(r20)
 8004230:	a1c00117 	ldw	r7,4(r20)
 8004234:	84000044 	addi	r16,r16,1
 8004238:	800a7cc0 	call	800a7cc <__muldf3>
 800423c:	a5000204 	addi	r20,r20,8
 8004240:	883ff51e 	bne	r17,zero,8004218 <__alt_data_end+0xfc004218>
 8004244:	d8800f15 	stw	r2,60(sp)
 8004248:	d8c01015 	stw	r3,64(sp)
 800424c:	003c7606 	br	8003428 <__alt_data_end+0xfc003428>
 8004250:	00c00c04 	movi	r3,48
 8004254:	10c00005 	stb	r3,0(r2)
 8004258:	d8c00517 	ldw	r3,20(sp)
 800425c:	bd3fffc3 	ldbu	r20,-1(r23)
 8004260:	18c00044 	addi	r3,r3,1
 8004264:	d8c00515 	stw	r3,20(sp)
 8004268:	003db906 	br	8003950 <__alt_data_end+0xfc003950>
 800426c:	89400117 	ldw	r5,4(r17)
 8004270:	e009883a 	mov	r4,fp
 8004274:	80051680 	call	8005168 <_Balloc>
 8004278:	89800417 	ldw	r6,16(r17)
 800427c:	89400304 	addi	r5,r17,12
 8004280:	11000304 	addi	r4,r2,12
 8004284:	31800084 	addi	r6,r6,2
 8004288:	318d883a 	add	r6,r6,r6
 800428c:	318d883a 	add	r6,r6,r6
 8004290:	1027883a 	mov	r19,r2
 8004294:	80050200 	call	8005020 <memcpy>
 8004298:	01800044 	movi	r6,1
 800429c:	980b883a 	mov	r5,r19
 80042a0:	e009883a 	mov	r4,fp
 80042a4:	80059a40 	call	80059a4 <__lshift>
 80042a8:	1029883a 	mov	r20,r2
 80042ac:	003ecc06 	br	8003de0 <__alt_data_end+0xfc003de0>
 80042b0:	00800e44 	movi	r2,57
 80042b4:	90809026 	beq	r18,r2,80044f8 <_dtoa_r+0x152c>
 80042b8:	92000044 	addi	r8,r18,1
 80042bc:	003f1f06 	br	8003f3c <__alt_data_end+0xfc003f3c>
 80042c0:	9011883a 	mov	r8,r18
 80042c4:	8825883a 	mov	r18,r17
 80042c8:	a023883a 	mov	r17,r20
 80042cc:	003e2906 	br	8003b74 <__alt_data_end+0xfc003b74>
 80042d0:	002b883a 	mov	r21,zero
 80042d4:	0023883a 	mov	r17,zero
 80042d8:	003f5406 	br	800402c <__alt_data_end+0xfc00402c>
 80042dc:	61bfffc4 	addi	r6,r12,-1
 80042e0:	300490fa 	slli	r2,r6,3
 80042e4:	00c20074 	movhi	r3,2049
 80042e8:	18f81704 	addi	r3,r3,-8100
 80042ec:	1885883a 	add	r2,r3,r2
 80042f0:	11000017 	ldw	r4,0(r2)
 80042f4:	11400117 	ldw	r5,4(r2)
 80042f8:	d8800717 	ldw	r2,28(sp)
 80042fc:	880f883a 	mov	r7,r17
 8004300:	d9801215 	stw	r6,72(sp)
 8004304:	800d883a 	mov	r6,r16
 8004308:	db001615 	stw	r12,88(sp)
 800430c:	15c00044 	addi	r23,r2,1
 8004310:	800a7cc0 	call	800a7cc <__muldf3>
 8004314:	d9401017 	ldw	r5,64(sp)
 8004318:	d9000f17 	ldw	r4,60(sp)
 800431c:	d8c01515 	stw	r3,84(sp)
 8004320:	d8801415 	stw	r2,80(sp)
 8004324:	800b9340 	call	800b934 <__fixdfsi>
 8004328:	1009883a 	mov	r4,r2
 800432c:	1021883a 	mov	r16,r2
 8004330:	800b9b40 	call	800b9b4 <__floatsidf>
 8004334:	d9000f17 	ldw	r4,60(sp)
 8004338:	d9401017 	ldw	r5,64(sp)
 800433c:	100d883a 	mov	r6,r2
 8004340:	180f883a 	mov	r7,r3
 8004344:	800b0380 	call	800b038 <__subdf3>
 8004348:	1829883a 	mov	r20,r3
 800434c:	d8c00717 	ldw	r3,28(sp)
 8004350:	84000c04 	addi	r16,r16,48
 8004354:	1023883a 	mov	r17,r2
 8004358:	1c000005 	stb	r16,0(r3)
 800435c:	db001617 	ldw	r12,88(sp)
 8004360:	00800044 	movi	r2,1
 8004364:	60802226 	beq	r12,r2,80043f0 <_dtoa_r+0x1424>
 8004368:	d9c00717 	ldw	r7,28(sp)
 800436c:	8805883a 	mov	r2,r17
 8004370:	b82b883a 	mov	r21,r23
 8004374:	3b19883a 	add	r12,r7,r12
 8004378:	6023883a 	mov	r17,r12
 800437c:	a007883a 	mov	r3,r20
 8004380:	dc800f15 	stw	r18,60(sp)
 8004384:	000d883a 	mov	r6,zero
 8004388:	01d00934 	movhi	r7,16420
 800438c:	1009883a 	mov	r4,r2
 8004390:	180b883a 	mov	r5,r3
 8004394:	800a7cc0 	call	800a7cc <__muldf3>
 8004398:	180b883a 	mov	r5,r3
 800439c:	1009883a 	mov	r4,r2
 80043a0:	1829883a 	mov	r20,r3
 80043a4:	1025883a 	mov	r18,r2
 80043a8:	800b9340 	call	800b934 <__fixdfsi>
 80043ac:	1009883a 	mov	r4,r2
 80043b0:	1021883a 	mov	r16,r2
 80043b4:	800b9b40 	call	800b9b4 <__floatsidf>
 80043b8:	100d883a 	mov	r6,r2
 80043bc:	180f883a 	mov	r7,r3
 80043c0:	9009883a 	mov	r4,r18
 80043c4:	a00b883a 	mov	r5,r20
 80043c8:	84000c04 	addi	r16,r16,48
 80043cc:	800b0380 	call	800b038 <__subdf3>
 80043d0:	ad400044 	addi	r21,r21,1
 80043d4:	ac3fffc5 	stb	r16,-1(r21)
 80043d8:	ac7fea1e 	bne	r21,r17,8004384 <__alt_data_end+0xfc004384>
 80043dc:	1023883a 	mov	r17,r2
 80043e0:	d8801217 	ldw	r2,72(sp)
 80043e4:	dc800f17 	ldw	r18,60(sp)
 80043e8:	1829883a 	mov	r20,r3
 80043ec:	b8af883a 	add	r23,r23,r2
 80043f0:	d9001417 	ldw	r4,80(sp)
 80043f4:	d9401517 	ldw	r5,84(sp)
 80043f8:	000d883a 	mov	r6,zero
 80043fc:	01cff834 	movhi	r7,16352
 8004400:	80092f80 	call	80092f8 <__adddf3>
 8004404:	880d883a 	mov	r6,r17
 8004408:	a00f883a 	mov	r7,r20
 800440c:	1009883a 	mov	r4,r2
 8004410:	180b883a 	mov	r5,r3
 8004414:	800a6d80 	call	800a6d8 <__ledf2>
 8004418:	10003e0e 	bge	r2,zero,8004514 <_dtoa_r+0x1548>
 800441c:	d9001317 	ldw	r4,76(sp)
 8004420:	bd3fffc3 	ldbu	r20,-1(r23)
 8004424:	d9000515 	stw	r4,20(sp)
 8004428:	003d3b06 	br	8003918 <__alt_data_end+0xfc003918>
 800442c:	0027883a 	mov	r19,zero
 8004430:	003f1b06 	br	80040a0 <__alt_data_end+0xfc0040a0>
 8004434:	d8800817 	ldw	r2,32(sp)
 8004438:	11e9c83a 	sub	r20,r2,r7
 800443c:	0005883a 	mov	r2,zero
 8004440:	003d5406 	br	8003994 <__alt_data_end+0xfc003994>
 8004444:	00800044 	movi	r2,1
 8004448:	003dc706 	br	8003b68 <__alt_data_end+0xfc003b68>
 800444c:	d8c00217 	ldw	r3,8(sp)
 8004450:	00800d84 	movi	r2,54
 8004454:	dd400a17 	ldw	r21,40(sp)
 8004458:	10c5c83a 	sub	r2,r2,r3
 800445c:	dd000817 	ldw	r20,32(sp)
 8004460:	003d4c06 	br	8003994 <__alt_data_end+0xfc003994>
 8004464:	dc800f15 	stw	r18,60(sp)
 8004468:	dcc01015 	stw	r19,64(sp)
 800446c:	04000084 	movi	r16,2
 8004470:	003bed06 	br	8003428 <__alt_data_end+0xfc003428>
 8004474:	d9000617 	ldw	r4,24(sp)
 8004478:	203f0d26 	beq	r4,zero,80040b0 <__alt_data_end+0xfc0040b0>
 800447c:	d9800c17 	ldw	r6,48(sp)
 8004480:	01bcab0e 	bge	zero,r6,8003730 <__alt_data_end+0xfc003730>
 8004484:	d9401017 	ldw	r5,64(sp)
 8004488:	d9000f17 	ldw	r4,60(sp)
 800448c:	000d883a 	mov	r6,zero
 8004490:	01d00934 	movhi	r7,16420
 8004494:	800a7cc0 	call	800a7cc <__muldf3>
 8004498:	81000044 	addi	r4,r16,1
 800449c:	d8800f15 	stw	r2,60(sp)
 80044a0:	d8c01015 	stw	r3,64(sp)
 80044a4:	800b9b40 	call	800b9b4 <__floatsidf>
 80044a8:	d9800f17 	ldw	r6,60(sp)
 80044ac:	d9c01017 	ldw	r7,64(sp)
 80044b0:	1009883a 	mov	r4,r2
 80044b4:	180b883a 	mov	r5,r3
 80044b8:	800a7cc0 	call	800a7cc <__muldf3>
 80044bc:	01d00734 	movhi	r7,16412
 80044c0:	000d883a 	mov	r6,zero
 80044c4:	1009883a 	mov	r4,r2
 80044c8:	180b883a 	mov	r5,r3
 80044cc:	80092f80 	call	80092f8 <__adddf3>
 80044d0:	d9c00517 	ldw	r7,20(sp)
 80044d4:	047f3034 	movhi	r17,64704
 80044d8:	1021883a 	mov	r16,r2
 80044dc:	39ffffc4 	addi	r7,r7,-1
 80044e0:	d9c01315 	stw	r7,76(sp)
 80044e4:	1c63883a 	add	r17,r3,r17
 80044e8:	db000c17 	ldw	r12,48(sp)
 80044ec:	003bea06 	br	8003498 <__alt_data_end+0xfc003498>
 80044f0:	dc000915 	stw	r16,36(sp)
 80044f4:	003e0e06 	br	8003d30 <__alt_data_end+0xfc003d30>
 80044f8:	01000e44 	movi	r4,57
 80044fc:	8825883a 	mov	r18,r17
 8004500:	9dc00044 	addi	r23,r19,1
 8004504:	99000005 	stb	r4,0(r19)
 8004508:	a023883a 	mov	r17,r20
 800450c:	dc000915 	stw	r16,36(sp)
 8004510:	003da406 	br	8003ba4 <__alt_data_end+0xfc003ba4>
 8004514:	d9801417 	ldw	r6,80(sp)
 8004518:	d9c01517 	ldw	r7,84(sp)
 800451c:	0009883a 	mov	r4,zero
 8004520:	014ff834 	movhi	r5,16352
 8004524:	800b0380 	call	800b038 <__subdf3>
 8004528:	880d883a 	mov	r6,r17
 800452c:	a00f883a 	mov	r7,r20
 8004530:	1009883a 	mov	r4,r2
 8004534:	180b883a 	mov	r5,r3
 8004538:	800a5fc0 	call	800a5fc <__gedf2>
 800453c:	00bc7c0e 	bge	zero,r2,8003730 <__alt_data_end+0xfc003730>
 8004540:	01000c04 	movi	r4,48
 8004544:	00000106 	br	800454c <_dtoa_r+0x1580>
 8004548:	102f883a 	mov	r23,r2
 800454c:	b8bfffc4 	addi	r2,r23,-1
 8004550:	10c00007 	ldb	r3,0(r2)
 8004554:	193ffc26 	beq	r3,r4,8004548 <__alt_data_end+0xfc004548>
 8004558:	d9801317 	ldw	r6,76(sp)
 800455c:	d9800515 	stw	r6,20(sp)
 8004560:	003c4406 	br	8003674 <__alt_data_end+0xfc003674>
 8004564:	d9801317 	ldw	r6,76(sp)
 8004568:	d9800515 	stw	r6,20(sp)
 800456c:	003cea06 	br	8003918 <__alt_data_end+0xfc003918>
 8004570:	dd800f17 	ldw	r22,60(sp)
 8004574:	dcc01017 	ldw	r19,64(sp)
 8004578:	dc801217 	ldw	r18,72(sp)
 800457c:	003c6c06 	br	8003730 <__alt_data_end+0xfc003730>
 8004580:	903e031e 	bne	r18,zero,8003d90 <__alt_data_end+0xfc003d90>
 8004584:	003ebb06 	br	8004074 <__alt_data_end+0xfc004074>
 8004588:	103e6c1e 	bne	r2,zero,8003f3c <__alt_data_end+0xfc003f3c>
 800458c:	4080004c 	andi	r2,r8,1
 8004590:	103e6a26 	beq	r2,zero,8003f3c <__alt_data_end+0xfc003f3c>
 8004594:	003e6606 	br	8003f30 <__alt_data_end+0xfc003f30>
 8004598:	d8c00317 	ldw	r3,12(sp)
 800459c:	00800084 	movi	r2,2
 80045a0:	10c02916 	blt	r2,r3,8004648 <_dtoa_r+0x167c>
 80045a4:	d9000c17 	ldw	r4,48(sp)
 80045a8:	003e8806 	br	8003fcc <__alt_data_end+0xfc003fcc>
 80045ac:	04000084 	movi	r16,2
 80045b0:	003b9d06 	br	8003428 <__alt_data_end+0xfc003428>
 80045b4:	d9001317 	ldw	r4,76(sp)
 80045b8:	d9000515 	stw	r4,20(sp)
 80045bc:	003cd606 	br	8003918 <__alt_data_end+0xfc003918>
 80045c0:	d8801317 	ldw	r2,76(sp)
 80045c4:	d8800515 	stw	r2,20(sp)
 80045c8:	003c2a06 	br	8003674 <__alt_data_end+0xfc003674>
 80045cc:	d9800317 	ldw	r6,12(sp)
 80045d0:	00800084 	movi	r2,2
 80045d4:	11801516 	blt	r2,r6,800462c <_dtoa_r+0x1660>
 80045d8:	d9c00c17 	ldw	r7,48(sp)
 80045dc:	d9c00615 	stw	r7,24(sp)
 80045e0:	003df706 	br	8003dc0 <__alt_data_end+0xfc003dc0>
 80045e4:	193d3926 	beq	r3,r4,8003acc <__alt_data_end+0xfc003acc>
 80045e8:	00c00f04 	movi	r3,60
 80045ec:	1885c83a 	sub	r2,r3,r2
 80045f0:	003ddf06 	br	8003d70 <__alt_data_end+0xfc003d70>
 80045f4:	e009883a 	mov	r4,fp
 80045f8:	e0001115 	stw	zero,68(fp)
 80045fc:	000b883a 	mov	r5,zero
 8004600:	80051680 	call	8005168 <_Balloc>
 8004604:	d8800715 	stw	r2,28(sp)
 8004608:	d8c00717 	ldw	r3,28(sp)
 800460c:	00bfffc4 	movi	r2,-1
 8004610:	01000044 	movi	r4,1
 8004614:	d8800c15 	stw	r2,48(sp)
 8004618:	e0c01015 	stw	r3,64(fp)
 800461c:	d9000b15 	stw	r4,44(sp)
 8004620:	d8800615 	stw	r2,24(sp)
 8004624:	d8002215 	stw	zero,136(sp)
 8004628:	003c4106 	br	8003730 <__alt_data_end+0xfc003730>
 800462c:	d8c00c17 	ldw	r3,48(sp)
 8004630:	d8c00615 	stw	r3,24(sp)
 8004634:	003e7006 	br	8003ff8 <__alt_data_end+0xfc003ff8>
 8004638:	04400044 	movi	r17,1
 800463c:	003b2006 	br	80032c0 <__alt_data_end+0xfc0032c0>
 8004640:	000b883a 	mov	r5,zero
 8004644:	003b3d06 	br	800333c <__alt_data_end+0xfc00333c>
 8004648:	d8800c17 	ldw	r2,48(sp)
 800464c:	d8800615 	stw	r2,24(sp)
 8004650:	003e6906 	br	8003ff8 <__alt_data_end+0xfc003ff8>

08004654 <_setlocale_r>:
 8004654:	30001b26 	beq	r6,zero,80046c4 <_setlocale_r+0x70>
 8004658:	01420074 	movhi	r5,2049
 800465c:	defffe04 	addi	sp,sp,-8
 8004660:	2977fd04 	addi	r5,r5,-8204
 8004664:	3009883a 	mov	r4,r6
 8004668:	dc000015 	stw	r16,0(sp)
 800466c:	dfc00115 	stw	ra,4(sp)
 8004670:	3021883a 	mov	r16,r6
 8004674:	80062e80 	call	80062e8 <strcmp>
 8004678:	1000061e 	bne	r2,zero,8004694 <_setlocale_r+0x40>
 800467c:	00820074 	movhi	r2,2049
 8004680:	10b7fc04 	addi	r2,r2,-8208
 8004684:	dfc00117 	ldw	ra,4(sp)
 8004688:	dc000017 	ldw	r16,0(sp)
 800468c:	dec00204 	addi	sp,sp,8
 8004690:	f800283a 	ret
 8004694:	01420074 	movhi	r5,2049
 8004698:	2977fc04 	addi	r5,r5,-8208
 800469c:	8009883a 	mov	r4,r16
 80046a0:	80062e80 	call	80062e8 <strcmp>
 80046a4:	103ff526 	beq	r2,zero,800467c <__alt_data_end+0xfc00467c>
 80046a8:	01420074 	movhi	r5,2049
 80046ac:	2977e704 	addi	r5,r5,-8292
 80046b0:	8009883a 	mov	r4,r16
 80046b4:	80062e80 	call	80062e8 <strcmp>
 80046b8:	103ff026 	beq	r2,zero,800467c <__alt_data_end+0xfc00467c>
 80046bc:	0005883a 	mov	r2,zero
 80046c0:	003ff006 	br	8004684 <__alt_data_end+0xfc004684>
 80046c4:	00820074 	movhi	r2,2049
 80046c8:	10b7fc04 	addi	r2,r2,-8208
 80046cc:	f800283a 	ret

080046d0 <__locale_charset>:
 80046d0:	00820074 	movhi	r2,2049
 80046d4:	10ba6704 	addi	r2,r2,-5732
 80046d8:	f800283a 	ret

080046dc <__locale_mb_cur_max>:
 80046dc:	00820074 	movhi	r2,2049
 80046e0:	10800504 	addi	r2,r2,20
 80046e4:	10800017 	ldw	r2,0(r2)
 80046e8:	f800283a 	ret

080046ec <__locale_msgcharset>:
 80046ec:	00820074 	movhi	r2,2049
 80046f0:	10ba5f04 	addi	r2,r2,-5764
 80046f4:	f800283a 	ret

080046f8 <__locale_cjk_lang>:
 80046f8:	0005883a 	mov	r2,zero
 80046fc:	f800283a 	ret

08004700 <_localeconv_r>:
 8004700:	00820074 	movhi	r2,2049
 8004704:	10ba6f04 	addi	r2,r2,-5700
 8004708:	f800283a 	ret

0800470c <setlocale>:
 800470c:	00820074 	movhi	r2,2049
 8004710:	10800404 	addi	r2,r2,16
 8004714:	280d883a 	mov	r6,r5
 8004718:	200b883a 	mov	r5,r4
 800471c:	11000017 	ldw	r4,0(r2)
 8004720:	80046541 	jmpi	8004654 <_setlocale_r>

08004724 <localeconv>:
 8004724:	00820074 	movhi	r2,2049
 8004728:	10ba6f04 	addi	r2,r2,-5700
 800472c:	f800283a 	ret

08004730 <_malloc_r>:
 8004730:	defff504 	addi	sp,sp,-44
 8004734:	dc800315 	stw	r18,12(sp)
 8004738:	dfc00a15 	stw	ra,40(sp)
 800473c:	df000915 	stw	fp,36(sp)
 8004740:	ddc00815 	stw	r23,32(sp)
 8004744:	dd800715 	stw	r22,28(sp)
 8004748:	dd400615 	stw	r21,24(sp)
 800474c:	dd000515 	stw	r20,20(sp)
 8004750:	dcc00415 	stw	r19,16(sp)
 8004754:	dc400215 	stw	r17,8(sp)
 8004758:	dc000115 	stw	r16,4(sp)
 800475c:	288002c4 	addi	r2,r5,11
 8004760:	00c00584 	movi	r3,22
 8004764:	2025883a 	mov	r18,r4
 8004768:	18807f2e 	bgeu	r3,r2,8004968 <_malloc_r+0x238>
 800476c:	047ffe04 	movi	r17,-8
 8004770:	1462703a 	and	r17,r2,r17
 8004774:	8800a316 	blt	r17,zero,8004a04 <_malloc_r+0x2d4>
 8004778:	8940a236 	bltu	r17,r5,8004a04 <_malloc_r+0x2d4>
 800477c:	800bd040 	call	800bd04 <__malloc_lock>
 8004780:	00807dc4 	movi	r2,503
 8004784:	1441e92e 	bgeu	r2,r17,8004f2c <_malloc_r+0x7fc>
 8004788:	8804d27a 	srli	r2,r17,9
 800478c:	1000a126 	beq	r2,zero,8004a14 <_malloc_r+0x2e4>
 8004790:	00c00104 	movi	r3,4
 8004794:	18811e36 	bltu	r3,r2,8004c10 <_malloc_r+0x4e0>
 8004798:	8804d1ba 	srli	r2,r17,6
 800479c:	12000e44 	addi	r8,r2,57
 80047a0:	11c00e04 	addi	r7,r2,56
 80047a4:	4209883a 	add	r4,r8,r8
 80047a8:	04c20074 	movhi	r19,2049
 80047ac:	2109883a 	add	r4,r4,r4
 80047b0:	9cfa7d04 	addi	r19,r19,-5644
 80047b4:	2109883a 	add	r4,r4,r4
 80047b8:	9909883a 	add	r4,r19,r4
 80047bc:	24000117 	ldw	r16,4(r4)
 80047c0:	213ffe04 	addi	r4,r4,-8
 80047c4:	24009726 	beq	r4,r16,8004a24 <_malloc_r+0x2f4>
 80047c8:	80800117 	ldw	r2,4(r16)
 80047cc:	01bfff04 	movi	r6,-4
 80047d0:	014003c4 	movi	r5,15
 80047d4:	1184703a 	and	r2,r2,r6
 80047d8:	1447c83a 	sub	r3,r2,r17
 80047dc:	28c00716 	blt	r5,r3,80047fc <_malloc_r+0xcc>
 80047e0:	1800920e 	bge	r3,zero,8004a2c <_malloc_r+0x2fc>
 80047e4:	84000317 	ldw	r16,12(r16)
 80047e8:	24008e26 	beq	r4,r16,8004a24 <_malloc_r+0x2f4>
 80047ec:	80800117 	ldw	r2,4(r16)
 80047f0:	1184703a 	and	r2,r2,r6
 80047f4:	1447c83a 	sub	r3,r2,r17
 80047f8:	28fff90e 	bge	r5,r3,80047e0 <__alt_data_end+0xfc0047e0>
 80047fc:	3809883a 	mov	r4,r7
 8004800:	01820074 	movhi	r6,2049
 8004804:	9c000417 	ldw	r16,16(r19)
 8004808:	31ba7d04 	addi	r6,r6,-5644
 800480c:	32000204 	addi	r8,r6,8
 8004810:	82013426 	beq	r16,r8,8004ce4 <_malloc_r+0x5b4>
 8004814:	80c00117 	ldw	r3,4(r16)
 8004818:	00bfff04 	movi	r2,-4
 800481c:	188e703a 	and	r7,r3,r2
 8004820:	3c45c83a 	sub	r2,r7,r17
 8004824:	00c003c4 	movi	r3,15
 8004828:	18811f16 	blt	r3,r2,8004ca8 <_malloc_r+0x578>
 800482c:	32000515 	stw	r8,20(r6)
 8004830:	32000415 	stw	r8,16(r6)
 8004834:	10007f0e 	bge	r2,zero,8004a34 <_malloc_r+0x304>
 8004838:	00807fc4 	movi	r2,511
 800483c:	11c0fd36 	bltu	r2,r7,8004c34 <_malloc_r+0x504>
 8004840:	3806d0fa 	srli	r3,r7,3
 8004844:	01c00044 	movi	r7,1
 8004848:	30800117 	ldw	r2,4(r6)
 800484c:	19400044 	addi	r5,r3,1
 8004850:	294b883a 	add	r5,r5,r5
 8004854:	1807d0ba 	srai	r3,r3,2
 8004858:	294b883a 	add	r5,r5,r5
 800485c:	294b883a 	add	r5,r5,r5
 8004860:	298b883a 	add	r5,r5,r6
 8004864:	38c6983a 	sll	r3,r7,r3
 8004868:	29c00017 	ldw	r7,0(r5)
 800486c:	2a7ffe04 	addi	r9,r5,-8
 8004870:	1886b03a 	or	r3,r3,r2
 8004874:	82400315 	stw	r9,12(r16)
 8004878:	81c00215 	stw	r7,8(r16)
 800487c:	30c00115 	stw	r3,4(r6)
 8004880:	2c000015 	stw	r16,0(r5)
 8004884:	3c000315 	stw	r16,12(r7)
 8004888:	2005d0ba 	srai	r2,r4,2
 800488c:	01400044 	movi	r5,1
 8004890:	288a983a 	sll	r5,r5,r2
 8004894:	19406f36 	bltu	r3,r5,8004a54 <_malloc_r+0x324>
 8004898:	28c4703a 	and	r2,r5,r3
 800489c:	10000a1e 	bne	r2,zero,80048c8 <_malloc_r+0x198>
 80048a0:	00bfff04 	movi	r2,-4
 80048a4:	294b883a 	add	r5,r5,r5
 80048a8:	2088703a 	and	r4,r4,r2
 80048ac:	28c4703a 	and	r2,r5,r3
 80048b0:	21000104 	addi	r4,r4,4
 80048b4:	1000041e 	bne	r2,zero,80048c8 <_malloc_r+0x198>
 80048b8:	294b883a 	add	r5,r5,r5
 80048bc:	28c4703a 	and	r2,r5,r3
 80048c0:	21000104 	addi	r4,r4,4
 80048c4:	103ffc26 	beq	r2,zero,80048b8 <__alt_data_end+0xfc0048b8>
 80048c8:	02bfff04 	movi	r10,-4
 80048cc:	024003c4 	movi	r9,15
 80048d0:	21800044 	addi	r6,r4,1
 80048d4:	318d883a 	add	r6,r6,r6
 80048d8:	318d883a 	add	r6,r6,r6
 80048dc:	318d883a 	add	r6,r6,r6
 80048e0:	998d883a 	add	r6,r19,r6
 80048e4:	333ffe04 	addi	r12,r6,-8
 80048e8:	2017883a 	mov	r11,r4
 80048ec:	31800104 	addi	r6,r6,4
 80048f0:	34000017 	ldw	r16,0(r6)
 80048f4:	31fffd04 	addi	r7,r6,-12
 80048f8:	81c0041e 	bne	r16,r7,800490c <_malloc_r+0x1dc>
 80048fc:	0000fb06 	br	8004cec <_malloc_r+0x5bc>
 8004900:	1801030e 	bge	r3,zero,8004d10 <_malloc_r+0x5e0>
 8004904:	84000317 	ldw	r16,12(r16)
 8004908:	81c0f826 	beq	r16,r7,8004cec <_malloc_r+0x5bc>
 800490c:	80800117 	ldw	r2,4(r16)
 8004910:	1284703a 	and	r2,r2,r10
 8004914:	1447c83a 	sub	r3,r2,r17
 8004918:	48fff90e 	bge	r9,r3,8004900 <__alt_data_end+0xfc004900>
 800491c:	80800317 	ldw	r2,12(r16)
 8004920:	81000217 	ldw	r4,8(r16)
 8004924:	89400054 	ori	r5,r17,1
 8004928:	81400115 	stw	r5,4(r16)
 800492c:	20800315 	stw	r2,12(r4)
 8004930:	11000215 	stw	r4,8(r2)
 8004934:	8463883a 	add	r17,r16,r17
 8004938:	9c400515 	stw	r17,20(r19)
 800493c:	9c400415 	stw	r17,16(r19)
 8004940:	18800054 	ori	r2,r3,1
 8004944:	88800115 	stw	r2,4(r17)
 8004948:	8a000315 	stw	r8,12(r17)
 800494c:	8a000215 	stw	r8,8(r17)
 8004950:	88e3883a 	add	r17,r17,r3
 8004954:	88c00015 	stw	r3,0(r17)
 8004958:	9009883a 	mov	r4,r18
 800495c:	800bd280 	call	800bd28 <__malloc_unlock>
 8004960:	80800204 	addi	r2,r16,8
 8004964:	00001b06 	br	80049d4 <_malloc_r+0x2a4>
 8004968:	04400404 	movi	r17,16
 800496c:	89402536 	bltu	r17,r5,8004a04 <_malloc_r+0x2d4>
 8004970:	800bd040 	call	800bd04 <__malloc_lock>
 8004974:	00800184 	movi	r2,6
 8004978:	01000084 	movi	r4,2
 800497c:	04c20074 	movhi	r19,2049
 8004980:	1085883a 	add	r2,r2,r2
 8004984:	9cfa7d04 	addi	r19,r19,-5644
 8004988:	1085883a 	add	r2,r2,r2
 800498c:	9885883a 	add	r2,r19,r2
 8004990:	14000117 	ldw	r16,4(r2)
 8004994:	10fffe04 	addi	r3,r2,-8
 8004998:	80c0d926 	beq	r16,r3,8004d00 <_malloc_r+0x5d0>
 800499c:	80c00117 	ldw	r3,4(r16)
 80049a0:	81000317 	ldw	r4,12(r16)
 80049a4:	00bfff04 	movi	r2,-4
 80049a8:	1884703a 	and	r2,r3,r2
 80049ac:	81400217 	ldw	r5,8(r16)
 80049b0:	8085883a 	add	r2,r16,r2
 80049b4:	10c00117 	ldw	r3,4(r2)
 80049b8:	29000315 	stw	r4,12(r5)
 80049bc:	21400215 	stw	r5,8(r4)
 80049c0:	18c00054 	ori	r3,r3,1
 80049c4:	10c00115 	stw	r3,4(r2)
 80049c8:	9009883a 	mov	r4,r18
 80049cc:	800bd280 	call	800bd28 <__malloc_unlock>
 80049d0:	80800204 	addi	r2,r16,8
 80049d4:	dfc00a17 	ldw	ra,40(sp)
 80049d8:	df000917 	ldw	fp,36(sp)
 80049dc:	ddc00817 	ldw	r23,32(sp)
 80049e0:	dd800717 	ldw	r22,28(sp)
 80049e4:	dd400617 	ldw	r21,24(sp)
 80049e8:	dd000517 	ldw	r20,20(sp)
 80049ec:	dcc00417 	ldw	r19,16(sp)
 80049f0:	dc800317 	ldw	r18,12(sp)
 80049f4:	dc400217 	ldw	r17,8(sp)
 80049f8:	dc000117 	ldw	r16,4(sp)
 80049fc:	dec00b04 	addi	sp,sp,44
 8004a00:	f800283a 	ret
 8004a04:	00800304 	movi	r2,12
 8004a08:	90800015 	stw	r2,0(r18)
 8004a0c:	0005883a 	mov	r2,zero
 8004a10:	003ff006 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004a14:	01002004 	movi	r4,128
 8004a18:	02001004 	movi	r8,64
 8004a1c:	01c00fc4 	movi	r7,63
 8004a20:	003f6106 	br	80047a8 <__alt_data_end+0xfc0047a8>
 8004a24:	4009883a 	mov	r4,r8
 8004a28:	003f7506 	br	8004800 <__alt_data_end+0xfc004800>
 8004a2c:	81000317 	ldw	r4,12(r16)
 8004a30:	003fde06 	br	80049ac <__alt_data_end+0xfc0049ac>
 8004a34:	81c5883a 	add	r2,r16,r7
 8004a38:	11400117 	ldw	r5,4(r2)
 8004a3c:	9009883a 	mov	r4,r18
 8004a40:	29400054 	ori	r5,r5,1
 8004a44:	11400115 	stw	r5,4(r2)
 8004a48:	800bd280 	call	800bd28 <__malloc_unlock>
 8004a4c:	80800204 	addi	r2,r16,8
 8004a50:	003fe006 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004a54:	9c000217 	ldw	r16,8(r19)
 8004a58:	00bfff04 	movi	r2,-4
 8004a5c:	85800117 	ldw	r22,4(r16)
 8004a60:	b0ac703a 	and	r22,r22,r2
 8004a64:	b4400336 	bltu	r22,r17,8004a74 <_malloc_r+0x344>
 8004a68:	b445c83a 	sub	r2,r22,r17
 8004a6c:	00c003c4 	movi	r3,15
 8004a70:	18805d16 	blt	r3,r2,8004be8 <_malloc_r+0x4b8>
 8004a74:	05c20074 	movhi	r23,2049
 8004a78:	00820074 	movhi	r2,2049
 8004a7c:	10878b04 	addi	r2,r2,7724
 8004a80:	bdc00604 	addi	r23,r23,24
 8004a84:	15400017 	ldw	r21,0(r2)
 8004a88:	b8c00017 	ldw	r3,0(r23)
 8004a8c:	00bfffc4 	movi	r2,-1
 8004a90:	858d883a 	add	r6,r16,r22
 8004a94:	8d6b883a 	add	r21,r17,r21
 8004a98:	1880ea26 	beq	r3,r2,8004e44 <_malloc_r+0x714>
 8004a9c:	ad4403c4 	addi	r21,r21,4111
 8004aa0:	00bc0004 	movi	r2,-4096
 8004aa4:	a8aa703a 	and	r21,r21,r2
 8004aa8:	a80b883a 	mov	r5,r21
 8004aac:	9009883a 	mov	r4,r18
 8004ab0:	d9800015 	stw	r6,0(sp)
 8004ab4:	80062940 	call	8006294 <_sbrk_r>
 8004ab8:	1029883a 	mov	r20,r2
 8004abc:	00bfffc4 	movi	r2,-1
 8004ac0:	d9800017 	ldw	r6,0(sp)
 8004ac4:	a080e826 	beq	r20,r2,8004e68 <_malloc_r+0x738>
 8004ac8:	a180a636 	bltu	r20,r6,8004d64 <_malloc_r+0x634>
 8004acc:	07020074 	movhi	fp,2049
 8004ad0:	e7079404 	addi	fp,fp,7760
 8004ad4:	e0800017 	ldw	r2,0(fp)
 8004ad8:	a887883a 	add	r3,r21,r2
 8004adc:	e0c00015 	stw	r3,0(fp)
 8004ae0:	3500e626 	beq	r6,r20,8004e7c <_malloc_r+0x74c>
 8004ae4:	b9000017 	ldw	r4,0(r23)
 8004ae8:	00bfffc4 	movi	r2,-1
 8004aec:	2080ee26 	beq	r4,r2,8004ea8 <_malloc_r+0x778>
 8004af0:	a185c83a 	sub	r2,r20,r6
 8004af4:	10c5883a 	add	r2,r2,r3
 8004af8:	e0800015 	stw	r2,0(fp)
 8004afc:	a0c001cc 	andi	r3,r20,7
 8004b00:	1800bc26 	beq	r3,zero,8004df4 <_malloc_r+0x6c4>
 8004b04:	a0e9c83a 	sub	r20,r20,r3
 8004b08:	00840204 	movi	r2,4104
 8004b0c:	a5000204 	addi	r20,r20,8
 8004b10:	10c7c83a 	sub	r3,r2,r3
 8004b14:	a545883a 	add	r2,r20,r21
 8004b18:	1083ffcc 	andi	r2,r2,4095
 8004b1c:	18abc83a 	sub	r21,r3,r2
 8004b20:	a80b883a 	mov	r5,r21
 8004b24:	9009883a 	mov	r4,r18
 8004b28:	80062940 	call	8006294 <_sbrk_r>
 8004b2c:	00ffffc4 	movi	r3,-1
 8004b30:	10c0e126 	beq	r2,r3,8004eb8 <_malloc_r+0x788>
 8004b34:	1505c83a 	sub	r2,r2,r20
 8004b38:	1545883a 	add	r2,r2,r21
 8004b3c:	10800054 	ori	r2,r2,1
 8004b40:	e0c00017 	ldw	r3,0(fp)
 8004b44:	9d000215 	stw	r20,8(r19)
 8004b48:	a0800115 	stw	r2,4(r20)
 8004b4c:	a8c7883a 	add	r3,r21,r3
 8004b50:	e0c00015 	stw	r3,0(fp)
 8004b54:	84c00e26 	beq	r16,r19,8004b90 <_malloc_r+0x460>
 8004b58:	018003c4 	movi	r6,15
 8004b5c:	3580a72e 	bgeu	r6,r22,8004dfc <_malloc_r+0x6cc>
 8004b60:	81400117 	ldw	r5,4(r16)
 8004b64:	013ffe04 	movi	r4,-8
 8004b68:	b0bffd04 	addi	r2,r22,-12
 8004b6c:	1104703a 	and	r2,r2,r4
 8004b70:	2900004c 	andi	r4,r5,1
 8004b74:	2088b03a 	or	r4,r4,r2
 8004b78:	81000115 	stw	r4,4(r16)
 8004b7c:	01400144 	movi	r5,5
 8004b80:	8089883a 	add	r4,r16,r2
 8004b84:	21400115 	stw	r5,4(r4)
 8004b88:	21400215 	stw	r5,8(r4)
 8004b8c:	3080cd36 	bltu	r6,r2,8004ec4 <_malloc_r+0x794>
 8004b90:	00820074 	movhi	r2,2049
 8004b94:	10878a04 	addi	r2,r2,7720
 8004b98:	11000017 	ldw	r4,0(r2)
 8004b9c:	20c0012e 	bgeu	r4,r3,8004ba4 <_malloc_r+0x474>
 8004ba0:	10c00015 	stw	r3,0(r2)
 8004ba4:	00820074 	movhi	r2,2049
 8004ba8:	10878904 	addi	r2,r2,7716
 8004bac:	11000017 	ldw	r4,0(r2)
 8004bb0:	9c000217 	ldw	r16,8(r19)
 8004bb4:	20c0012e 	bgeu	r4,r3,8004bbc <_malloc_r+0x48c>
 8004bb8:	10c00015 	stw	r3,0(r2)
 8004bbc:	80c00117 	ldw	r3,4(r16)
 8004bc0:	00bfff04 	movi	r2,-4
 8004bc4:	1886703a 	and	r3,r3,r2
 8004bc8:	1c45c83a 	sub	r2,r3,r17
 8004bcc:	1c400236 	bltu	r3,r17,8004bd8 <_malloc_r+0x4a8>
 8004bd0:	00c003c4 	movi	r3,15
 8004bd4:	18800416 	blt	r3,r2,8004be8 <_malloc_r+0x4b8>
 8004bd8:	9009883a 	mov	r4,r18
 8004bdc:	800bd280 	call	800bd28 <__malloc_unlock>
 8004be0:	0005883a 	mov	r2,zero
 8004be4:	003f7b06 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004be8:	88c00054 	ori	r3,r17,1
 8004bec:	80c00115 	stw	r3,4(r16)
 8004bf0:	8463883a 	add	r17,r16,r17
 8004bf4:	10800054 	ori	r2,r2,1
 8004bf8:	9c400215 	stw	r17,8(r19)
 8004bfc:	88800115 	stw	r2,4(r17)
 8004c00:	9009883a 	mov	r4,r18
 8004c04:	800bd280 	call	800bd28 <__malloc_unlock>
 8004c08:	80800204 	addi	r2,r16,8
 8004c0c:	003f7106 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004c10:	00c00504 	movi	r3,20
 8004c14:	18804a2e 	bgeu	r3,r2,8004d40 <_malloc_r+0x610>
 8004c18:	00c01504 	movi	r3,84
 8004c1c:	18806e36 	bltu	r3,r2,8004dd8 <_malloc_r+0x6a8>
 8004c20:	8804d33a 	srli	r2,r17,12
 8004c24:	12001bc4 	addi	r8,r2,111
 8004c28:	11c01b84 	addi	r7,r2,110
 8004c2c:	4209883a 	add	r4,r8,r8
 8004c30:	003edd06 	br	80047a8 <__alt_data_end+0xfc0047a8>
 8004c34:	3804d27a 	srli	r2,r7,9
 8004c38:	00c00104 	movi	r3,4
 8004c3c:	1880442e 	bgeu	r3,r2,8004d50 <_malloc_r+0x620>
 8004c40:	00c00504 	movi	r3,20
 8004c44:	18808136 	bltu	r3,r2,8004e4c <_malloc_r+0x71c>
 8004c48:	11401704 	addi	r5,r2,92
 8004c4c:	10c016c4 	addi	r3,r2,91
 8004c50:	294b883a 	add	r5,r5,r5
 8004c54:	294b883a 	add	r5,r5,r5
 8004c58:	294b883a 	add	r5,r5,r5
 8004c5c:	994b883a 	add	r5,r19,r5
 8004c60:	28800017 	ldw	r2,0(r5)
 8004c64:	01820074 	movhi	r6,2049
 8004c68:	297ffe04 	addi	r5,r5,-8
 8004c6c:	31ba7d04 	addi	r6,r6,-5644
 8004c70:	28806526 	beq	r5,r2,8004e08 <_malloc_r+0x6d8>
 8004c74:	01bfff04 	movi	r6,-4
 8004c78:	10c00117 	ldw	r3,4(r2)
 8004c7c:	1986703a 	and	r3,r3,r6
 8004c80:	38c0022e 	bgeu	r7,r3,8004c8c <_malloc_r+0x55c>
 8004c84:	10800217 	ldw	r2,8(r2)
 8004c88:	28bffb1e 	bne	r5,r2,8004c78 <__alt_data_end+0xfc004c78>
 8004c8c:	11400317 	ldw	r5,12(r2)
 8004c90:	98c00117 	ldw	r3,4(r19)
 8004c94:	81400315 	stw	r5,12(r16)
 8004c98:	80800215 	stw	r2,8(r16)
 8004c9c:	2c000215 	stw	r16,8(r5)
 8004ca0:	14000315 	stw	r16,12(r2)
 8004ca4:	003ef806 	br	8004888 <__alt_data_end+0xfc004888>
 8004ca8:	88c00054 	ori	r3,r17,1
 8004cac:	80c00115 	stw	r3,4(r16)
 8004cb0:	8463883a 	add	r17,r16,r17
 8004cb4:	34400515 	stw	r17,20(r6)
 8004cb8:	34400415 	stw	r17,16(r6)
 8004cbc:	10c00054 	ori	r3,r2,1
 8004cc0:	8a000315 	stw	r8,12(r17)
 8004cc4:	8a000215 	stw	r8,8(r17)
 8004cc8:	88c00115 	stw	r3,4(r17)
 8004ccc:	88a3883a 	add	r17,r17,r2
 8004cd0:	88800015 	stw	r2,0(r17)
 8004cd4:	9009883a 	mov	r4,r18
 8004cd8:	800bd280 	call	800bd28 <__malloc_unlock>
 8004cdc:	80800204 	addi	r2,r16,8
 8004ce0:	003f3c06 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004ce4:	30c00117 	ldw	r3,4(r6)
 8004ce8:	003ee706 	br	8004888 <__alt_data_end+0xfc004888>
 8004cec:	5ac00044 	addi	r11,r11,1
 8004cf0:	588000cc 	andi	r2,r11,3
 8004cf4:	31800204 	addi	r6,r6,8
 8004cf8:	103efd1e 	bne	r2,zero,80048f0 <__alt_data_end+0xfc0048f0>
 8004cfc:	00002406 	br	8004d90 <_malloc_r+0x660>
 8004d00:	14000317 	ldw	r16,12(r2)
 8004d04:	143f251e 	bne	r2,r16,800499c <__alt_data_end+0xfc00499c>
 8004d08:	21000084 	addi	r4,r4,2
 8004d0c:	003ebc06 	br	8004800 <__alt_data_end+0xfc004800>
 8004d10:	8085883a 	add	r2,r16,r2
 8004d14:	10c00117 	ldw	r3,4(r2)
 8004d18:	81000317 	ldw	r4,12(r16)
 8004d1c:	81400217 	ldw	r5,8(r16)
 8004d20:	18c00054 	ori	r3,r3,1
 8004d24:	10c00115 	stw	r3,4(r2)
 8004d28:	29000315 	stw	r4,12(r5)
 8004d2c:	21400215 	stw	r5,8(r4)
 8004d30:	9009883a 	mov	r4,r18
 8004d34:	800bd280 	call	800bd28 <__malloc_unlock>
 8004d38:	80800204 	addi	r2,r16,8
 8004d3c:	003f2506 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004d40:	12001704 	addi	r8,r2,92
 8004d44:	11c016c4 	addi	r7,r2,91
 8004d48:	4209883a 	add	r4,r8,r8
 8004d4c:	003e9606 	br	80047a8 <__alt_data_end+0xfc0047a8>
 8004d50:	3804d1ba 	srli	r2,r7,6
 8004d54:	11400e44 	addi	r5,r2,57
 8004d58:	10c00e04 	addi	r3,r2,56
 8004d5c:	294b883a 	add	r5,r5,r5
 8004d60:	003fbc06 	br	8004c54 <__alt_data_end+0xfc004c54>
 8004d64:	84ff5926 	beq	r16,r19,8004acc <__alt_data_end+0xfc004acc>
 8004d68:	00820074 	movhi	r2,2049
 8004d6c:	10ba7d04 	addi	r2,r2,-5644
 8004d70:	14000217 	ldw	r16,8(r2)
 8004d74:	00bfff04 	movi	r2,-4
 8004d78:	80c00117 	ldw	r3,4(r16)
 8004d7c:	1886703a 	and	r3,r3,r2
 8004d80:	003f9106 	br	8004bc8 <__alt_data_end+0xfc004bc8>
 8004d84:	60800217 	ldw	r2,8(r12)
 8004d88:	213fffc4 	addi	r4,r4,-1
 8004d8c:	1300651e 	bne	r2,r12,8004f24 <_malloc_r+0x7f4>
 8004d90:	208000cc 	andi	r2,r4,3
 8004d94:	633ffe04 	addi	r12,r12,-8
 8004d98:	103ffa1e 	bne	r2,zero,8004d84 <__alt_data_end+0xfc004d84>
 8004d9c:	98800117 	ldw	r2,4(r19)
 8004da0:	0146303a 	nor	r3,zero,r5
 8004da4:	1884703a 	and	r2,r3,r2
 8004da8:	98800115 	stw	r2,4(r19)
 8004dac:	294b883a 	add	r5,r5,r5
 8004db0:	117f2836 	bltu	r2,r5,8004a54 <__alt_data_end+0xfc004a54>
 8004db4:	283f2726 	beq	r5,zero,8004a54 <__alt_data_end+0xfc004a54>
 8004db8:	2886703a 	and	r3,r5,r2
 8004dbc:	5809883a 	mov	r4,r11
 8004dc0:	183ec31e 	bne	r3,zero,80048d0 <__alt_data_end+0xfc0048d0>
 8004dc4:	294b883a 	add	r5,r5,r5
 8004dc8:	2886703a 	and	r3,r5,r2
 8004dcc:	21000104 	addi	r4,r4,4
 8004dd0:	183ffc26 	beq	r3,zero,8004dc4 <__alt_data_end+0xfc004dc4>
 8004dd4:	003ebe06 	br	80048d0 <__alt_data_end+0xfc0048d0>
 8004dd8:	00c05504 	movi	r3,340
 8004ddc:	18801236 	bltu	r3,r2,8004e28 <_malloc_r+0x6f8>
 8004de0:	8804d3fa 	srli	r2,r17,15
 8004de4:	12001e04 	addi	r8,r2,120
 8004de8:	11c01dc4 	addi	r7,r2,119
 8004dec:	4209883a 	add	r4,r8,r8
 8004df0:	003e6d06 	br	80047a8 <__alt_data_end+0xfc0047a8>
 8004df4:	00c40004 	movi	r3,4096
 8004df8:	003f4606 	br	8004b14 <__alt_data_end+0xfc004b14>
 8004dfc:	00800044 	movi	r2,1
 8004e00:	a0800115 	stw	r2,4(r20)
 8004e04:	003f7406 	br	8004bd8 <__alt_data_end+0xfc004bd8>
 8004e08:	1805d0ba 	srai	r2,r3,2
 8004e0c:	01c00044 	movi	r7,1
 8004e10:	30c00117 	ldw	r3,4(r6)
 8004e14:	388e983a 	sll	r7,r7,r2
 8004e18:	2805883a 	mov	r2,r5
 8004e1c:	38c6b03a 	or	r3,r7,r3
 8004e20:	30c00115 	stw	r3,4(r6)
 8004e24:	003f9b06 	br	8004c94 <__alt_data_end+0xfc004c94>
 8004e28:	00c15504 	movi	r3,1364
 8004e2c:	18801a36 	bltu	r3,r2,8004e98 <_malloc_r+0x768>
 8004e30:	8804d4ba 	srli	r2,r17,18
 8004e34:	12001f44 	addi	r8,r2,125
 8004e38:	11c01f04 	addi	r7,r2,124
 8004e3c:	4209883a 	add	r4,r8,r8
 8004e40:	003e5906 	br	80047a8 <__alt_data_end+0xfc0047a8>
 8004e44:	ad400404 	addi	r21,r21,16
 8004e48:	003f1706 	br	8004aa8 <__alt_data_end+0xfc004aa8>
 8004e4c:	00c01504 	movi	r3,84
 8004e50:	18802336 	bltu	r3,r2,8004ee0 <_malloc_r+0x7b0>
 8004e54:	3804d33a 	srli	r2,r7,12
 8004e58:	11401bc4 	addi	r5,r2,111
 8004e5c:	10c01b84 	addi	r3,r2,110
 8004e60:	294b883a 	add	r5,r5,r5
 8004e64:	003f7b06 	br	8004c54 <__alt_data_end+0xfc004c54>
 8004e68:	9c000217 	ldw	r16,8(r19)
 8004e6c:	00bfff04 	movi	r2,-4
 8004e70:	80c00117 	ldw	r3,4(r16)
 8004e74:	1886703a 	and	r3,r3,r2
 8004e78:	003f5306 	br	8004bc8 <__alt_data_end+0xfc004bc8>
 8004e7c:	3083ffcc 	andi	r2,r6,4095
 8004e80:	103f181e 	bne	r2,zero,8004ae4 <__alt_data_end+0xfc004ae4>
 8004e84:	99000217 	ldw	r4,8(r19)
 8004e88:	b545883a 	add	r2,r22,r21
 8004e8c:	10800054 	ori	r2,r2,1
 8004e90:	20800115 	stw	r2,4(r4)
 8004e94:	003f3e06 	br	8004b90 <__alt_data_end+0xfc004b90>
 8004e98:	01003f84 	movi	r4,254
 8004e9c:	02001fc4 	movi	r8,127
 8004ea0:	01c01f84 	movi	r7,126
 8004ea4:	003e4006 	br	80047a8 <__alt_data_end+0xfc0047a8>
 8004ea8:	00820074 	movhi	r2,2049
 8004eac:	10800604 	addi	r2,r2,24
 8004eb0:	15000015 	stw	r20,0(r2)
 8004eb4:	003f1106 	br	8004afc <__alt_data_end+0xfc004afc>
 8004eb8:	00800044 	movi	r2,1
 8004ebc:	002b883a 	mov	r21,zero
 8004ec0:	003f1f06 	br	8004b40 <__alt_data_end+0xfc004b40>
 8004ec4:	81400204 	addi	r5,r16,8
 8004ec8:	9009883a 	mov	r4,r18
 8004ecc:	8007b340 	call	8007b34 <_free_r>
 8004ed0:	00820074 	movhi	r2,2049
 8004ed4:	10879404 	addi	r2,r2,7760
 8004ed8:	10c00017 	ldw	r3,0(r2)
 8004edc:	003f2c06 	br	8004b90 <__alt_data_end+0xfc004b90>
 8004ee0:	00c05504 	movi	r3,340
 8004ee4:	18800536 	bltu	r3,r2,8004efc <_malloc_r+0x7cc>
 8004ee8:	3804d3fa 	srli	r2,r7,15
 8004eec:	11401e04 	addi	r5,r2,120
 8004ef0:	10c01dc4 	addi	r3,r2,119
 8004ef4:	294b883a 	add	r5,r5,r5
 8004ef8:	003f5606 	br	8004c54 <__alt_data_end+0xfc004c54>
 8004efc:	00c15504 	movi	r3,1364
 8004f00:	18800536 	bltu	r3,r2,8004f18 <_malloc_r+0x7e8>
 8004f04:	3804d4ba 	srli	r2,r7,18
 8004f08:	11401f44 	addi	r5,r2,125
 8004f0c:	10c01f04 	addi	r3,r2,124
 8004f10:	294b883a 	add	r5,r5,r5
 8004f14:	003f4f06 	br	8004c54 <__alt_data_end+0xfc004c54>
 8004f18:	01403f84 	movi	r5,254
 8004f1c:	00c01f84 	movi	r3,126
 8004f20:	003f4c06 	br	8004c54 <__alt_data_end+0xfc004c54>
 8004f24:	98800117 	ldw	r2,4(r19)
 8004f28:	003fa006 	br	8004dac <__alt_data_end+0xfc004dac>
 8004f2c:	8808d0fa 	srli	r4,r17,3
 8004f30:	20800044 	addi	r2,r4,1
 8004f34:	1085883a 	add	r2,r2,r2
 8004f38:	003e9006 	br	800497c <__alt_data_end+0xfc00497c>

08004f3c <memchr>:
 8004f3c:	208000cc 	andi	r2,r4,3
 8004f40:	280f883a 	mov	r7,r5
 8004f44:	10003426 	beq	r2,zero,8005018 <memchr+0xdc>
 8004f48:	30bfffc4 	addi	r2,r6,-1
 8004f4c:	30001a26 	beq	r6,zero,8004fb8 <memchr+0x7c>
 8004f50:	20c00003 	ldbu	r3,0(r4)
 8004f54:	29803fcc 	andi	r6,r5,255
 8004f58:	30c0051e 	bne	r6,r3,8004f70 <memchr+0x34>
 8004f5c:	00001806 	br	8004fc0 <memchr+0x84>
 8004f60:	10001526 	beq	r2,zero,8004fb8 <memchr+0x7c>
 8004f64:	20c00003 	ldbu	r3,0(r4)
 8004f68:	10bfffc4 	addi	r2,r2,-1
 8004f6c:	30c01426 	beq	r6,r3,8004fc0 <memchr+0x84>
 8004f70:	21000044 	addi	r4,r4,1
 8004f74:	20c000cc 	andi	r3,r4,3
 8004f78:	183ff91e 	bne	r3,zero,8004f60 <__alt_data_end+0xfc004f60>
 8004f7c:	020000c4 	movi	r8,3
 8004f80:	40801136 	bltu	r8,r2,8004fc8 <memchr+0x8c>
 8004f84:	10000c26 	beq	r2,zero,8004fb8 <memchr+0x7c>
 8004f88:	20c00003 	ldbu	r3,0(r4)
 8004f8c:	29403fcc 	andi	r5,r5,255
 8004f90:	28c00b26 	beq	r5,r3,8004fc0 <memchr+0x84>
 8004f94:	20c00044 	addi	r3,r4,1
 8004f98:	39803fcc 	andi	r6,r7,255
 8004f9c:	2089883a 	add	r4,r4,r2
 8004fa0:	00000306 	br	8004fb0 <memchr+0x74>
 8004fa4:	18c00044 	addi	r3,r3,1
 8004fa8:	197fffc3 	ldbu	r5,-1(r3)
 8004fac:	31400526 	beq	r6,r5,8004fc4 <memchr+0x88>
 8004fb0:	1805883a 	mov	r2,r3
 8004fb4:	20fffb1e 	bne	r4,r3,8004fa4 <__alt_data_end+0xfc004fa4>
 8004fb8:	0005883a 	mov	r2,zero
 8004fbc:	f800283a 	ret
 8004fc0:	2005883a 	mov	r2,r4
 8004fc4:	f800283a 	ret
 8004fc8:	28c03fcc 	andi	r3,r5,255
 8004fcc:	1812923a 	slli	r9,r3,8
 8004fd0:	02ffbff4 	movhi	r11,65279
 8004fd4:	02a02074 	movhi	r10,32897
 8004fd8:	48d2b03a 	or	r9,r9,r3
 8004fdc:	4806943a 	slli	r3,r9,16
 8004fe0:	5affbfc4 	addi	r11,r11,-257
 8004fe4:	52a02004 	addi	r10,r10,-32640
 8004fe8:	48d2b03a 	or	r9,r9,r3
 8004fec:	20c00017 	ldw	r3,0(r4)
 8004ff0:	48c6f03a 	xor	r3,r9,r3
 8004ff4:	1acd883a 	add	r6,r3,r11
 8004ff8:	00c6303a 	nor	r3,zero,r3
 8004ffc:	30c6703a 	and	r3,r6,r3
 8005000:	1a86703a 	and	r3,r3,r10
 8005004:	183fe01e 	bne	r3,zero,8004f88 <__alt_data_end+0xfc004f88>
 8005008:	10bfff04 	addi	r2,r2,-4
 800500c:	21000104 	addi	r4,r4,4
 8005010:	40bff636 	bltu	r8,r2,8004fec <__alt_data_end+0xfc004fec>
 8005014:	003fdb06 	br	8004f84 <__alt_data_end+0xfc004f84>
 8005018:	3005883a 	mov	r2,r6
 800501c:	003fd706 	br	8004f7c <__alt_data_end+0xfc004f7c>

08005020 <memcpy>:
 8005020:	defffd04 	addi	sp,sp,-12
 8005024:	dfc00215 	stw	ra,8(sp)
 8005028:	dc400115 	stw	r17,4(sp)
 800502c:	dc000015 	stw	r16,0(sp)
 8005030:	00c003c4 	movi	r3,15
 8005034:	2005883a 	mov	r2,r4
 8005038:	1980452e 	bgeu	r3,r6,8005150 <memcpy+0x130>
 800503c:	2906b03a 	or	r3,r5,r4
 8005040:	18c000cc 	andi	r3,r3,3
 8005044:	1800441e 	bne	r3,zero,8005158 <memcpy+0x138>
 8005048:	347ffc04 	addi	r17,r6,-16
 800504c:	8822d13a 	srli	r17,r17,4
 8005050:	28c00104 	addi	r3,r5,4
 8005054:	23400104 	addi	r13,r4,4
 8005058:	8820913a 	slli	r16,r17,4
 800505c:	2b000204 	addi	r12,r5,8
 8005060:	22c00204 	addi	r11,r4,8
 8005064:	84000504 	addi	r16,r16,20
 8005068:	2a800304 	addi	r10,r5,12
 800506c:	22400304 	addi	r9,r4,12
 8005070:	2c21883a 	add	r16,r5,r16
 8005074:	2811883a 	mov	r8,r5
 8005078:	200f883a 	mov	r7,r4
 800507c:	41000017 	ldw	r4,0(r8)
 8005080:	1fc00017 	ldw	ra,0(r3)
 8005084:	63c00017 	ldw	r15,0(r12)
 8005088:	39000015 	stw	r4,0(r7)
 800508c:	53800017 	ldw	r14,0(r10)
 8005090:	6fc00015 	stw	ra,0(r13)
 8005094:	5bc00015 	stw	r15,0(r11)
 8005098:	4b800015 	stw	r14,0(r9)
 800509c:	18c00404 	addi	r3,r3,16
 80050a0:	39c00404 	addi	r7,r7,16
 80050a4:	42000404 	addi	r8,r8,16
 80050a8:	6b400404 	addi	r13,r13,16
 80050ac:	63000404 	addi	r12,r12,16
 80050b0:	5ac00404 	addi	r11,r11,16
 80050b4:	52800404 	addi	r10,r10,16
 80050b8:	4a400404 	addi	r9,r9,16
 80050bc:	1c3fef1e 	bne	r3,r16,800507c <__alt_data_end+0xfc00507c>
 80050c0:	89c00044 	addi	r7,r17,1
 80050c4:	380e913a 	slli	r7,r7,4
 80050c8:	310003cc 	andi	r4,r6,15
 80050cc:	02c000c4 	movi	r11,3
 80050d0:	11c7883a 	add	r3,r2,r7
 80050d4:	29cb883a 	add	r5,r5,r7
 80050d8:	5900212e 	bgeu	r11,r4,8005160 <memcpy+0x140>
 80050dc:	1813883a 	mov	r9,r3
 80050e0:	2811883a 	mov	r8,r5
 80050e4:	200f883a 	mov	r7,r4
 80050e8:	42800017 	ldw	r10,0(r8)
 80050ec:	4a400104 	addi	r9,r9,4
 80050f0:	39ffff04 	addi	r7,r7,-4
 80050f4:	4abfff15 	stw	r10,-4(r9)
 80050f8:	42000104 	addi	r8,r8,4
 80050fc:	59fffa36 	bltu	r11,r7,80050e8 <__alt_data_end+0xfc0050e8>
 8005100:	213fff04 	addi	r4,r4,-4
 8005104:	2008d0ba 	srli	r4,r4,2
 8005108:	318000cc 	andi	r6,r6,3
 800510c:	21000044 	addi	r4,r4,1
 8005110:	2109883a 	add	r4,r4,r4
 8005114:	2109883a 	add	r4,r4,r4
 8005118:	1907883a 	add	r3,r3,r4
 800511c:	290b883a 	add	r5,r5,r4
 8005120:	30000626 	beq	r6,zero,800513c <memcpy+0x11c>
 8005124:	198d883a 	add	r6,r3,r6
 8005128:	29c00003 	ldbu	r7,0(r5)
 800512c:	18c00044 	addi	r3,r3,1
 8005130:	29400044 	addi	r5,r5,1
 8005134:	19ffffc5 	stb	r7,-1(r3)
 8005138:	19bffb1e 	bne	r3,r6,8005128 <__alt_data_end+0xfc005128>
 800513c:	dfc00217 	ldw	ra,8(sp)
 8005140:	dc400117 	ldw	r17,4(sp)
 8005144:	dc000017 	ldw	r16,0(sp)
 8005148:	dec00304 	addi	sp,sp,12
 800514c:	f800283a 	ret
 8005150:	2007883a 	mov	r3,r4
 8005154:	003ff206 	br	8005120 <__alt_data_end+0xfc005120>
 8005158:	2007883a 	mov	r3,r4
 800515c:	003ff106 	br	8005124 <__alt_data_end+0xfc005124>
 8005160:	200d883a 	mov	r6,r4
 8005164:	003fee06 	br	8005120 <__alt_data_end+0xfc005120>

08005168 <_Balloc>:
 8005168:	20801317 	ldw	r2,76(r4)
 800516c:	defffc04 	addi	sp,sp,-16
 8005170:	dc400115 	stw	r17,4(sp)
 8005174:	dc000015 	stw	r16,0(sp)
 8005178:	dfc00315 	stw	ra,12(sp)
 800517c:	dc800215 	stw	r18,8(sp)
 8005180:	2023883a 	mov	r17,r4
 8005184:	2821883a 	mov	r16,r5
 8005188:	10000f26 	beq	r2,zero,80051c8 <_Balloc+0x60>
 800518c:	8407883a 	add	r3,r16,r16
 8005190:	18c7883a 	add	r3,r3,r3
 8005194:	10c7883a 	add	r3,r2,r3
 8005198:	18800017 	ldw	r2,0(r3)
 800519c:	10001126 	beq	r2,zero,80051e4 <_Balloc+0x7c>
 80051a0:	11000017 	ldw	r4,0(r2)
 80051a4:	19000015 	stw	r4,0(r3)
 80051a8:	10000415 	stw	zero,16(r2)
 80051ac:	10000315 	stw	zero,12(r2)
 80051b0:	dfc00317 	ldw	ra,12(sp)
 80051b4:	dc800217 	ldw	r18,8(sp)
 80051b8:	dc400117 	ldw	r17,4(sp)
 80051bc:	dc000017 	ldw	r16,0(sp)
 80051c0:	dec00404 	addi	sp,sp,16
 80051c4:	f800283a 	ret
 80051c8:	01800844 	movi	r6,33
 80051cc:	01400104 	movi	r5,4
 80051d0:	80079340 	call	8007934 <_calloc_r>
 80051d4:	88801315 	stw	r2,76(r17)
 80051d8:	103fec1e 	bne	r2,zero,800518c <__alt_data_end+0xfc00518c>
 80051dc:	0005883a 	mov	r2,zero
 80051e0:	003ff306 	br	80051b0 <__alt_data_end+0xfc0051b0>
 80051e4:	01400044 	movi	r5,1
 80051e8:	2c24983a 	sll	r18,r5,r16
 80051ec:	8809883a 	mov	r4,r17
 80051f0:	91800144 	addi	r6,r18,5
 80051f4:	318d883a 	add	r6,r6,r6
 80051f8:	318d883a 	add	r6,r6,r6
 80051fc:	80079340 	call	8007934 <_calloc_r>
 8005200:	103ff626 	beq	r2,zero,80051dc <__alt_data_end+0xfc0051dc>
 8005204:	14000115 	stw	r16,4(r2)
 8005208:	14800215 	stw	r18,8(r2)
 800520c:	003fe606 	br	80051a8 <__alt_data_end+0xfc0051a8>

08005210 <_Bfree>:
 8005210:	28000826 	beq	r5,zero,8005234 <_Bfree+0x24>
 8005214:	28c00117 	ldw	r3,4(r5)
 8005218:	20801317 	ldw	r2,76(r4)
 800521c:	18c7883a 	add	r3,r3,r3
 8005220:	18c7883a 	add	r3,r3,r3
 8005224:	10c5883a 	add	r2,r2,r3
 8005228:	10c00017 	ldw	r3,0(r2)
 800522c:	28c00015 	stw	r3,0(r5)
 8005230:	11400015 	stw	r5,0(r2)
 8005234:	f800283a 	ret

08005238 <__multadd>:
 8005238:	defff704 	addi	sp,sp,-36
 800523c:	dc800215 	stw	r18,8(sp)
 8005240:	2c800417 	ldw	r18,16(r5)
 8005244:	dd800615 	stw	r22,24(sp)
 8005248:	dd400515 	stw	r21,20(sp)
 800524c:	dd000415 	stw	r20,16(sp)
 8005250:	dcc00315 	stw	r19,12(sp)
 8005254:	dc400115 	stw	r17,4(sp)
 8005258:	dc000015 	stw	r16,0(sp)
 800525c:	dfc00815 	stw	ra,32(sp)
 8005260:	ddc00715 	stw	r23,28(sp)
 8005264:	2827883a 	mov	r19,r5
 8005268:	2029883a 	mov	r20,r4
 800526c:	3023883a 	mov	r17,r6
 8005270:	3821883a 	mov	r16,r7
 8005274:	2d400504 	addi	r21,r5,20
 8005278:	002d883a 	mov	r22,zero
 800527c:	adc00017 	ldw	r23,0(r21)
 8005280:	880b883a 	mov	r5,r17
 8005284:	ad400104 	addi	r21,r21,4
 8005288:	b93fffcc 	andi	r4,r23,65535
 800528c:	80008e80 	call	80008e8 <__mulsi3>
 8005290:	b808d43a 	srli	r4,r23,16
 8005294:	880b883a 	mov	r5,r17
 8005298:	1421883a 	add	r16,r2,r16
 800529c:	80008e80 	call	80008e8 <__mulsi3>
 80052a0:	800ed43a 	srli	r7,r16,16
 80052a4:	80ffffcc 	andi	r3,r16,65535
 80052a8:	b5800044 	addi	r22,r22,1
 80052ac:	11c5883a 	add	r2,r2,r7
 80052b0:	100e943a 	slli	r7,r2,16
 80052b4:	1020d43a 	srli	r16,r2,16
 80052b8:	38c7883a 	add	r3,r7,r3
 80052bc:	a8ffff15 	stw	r3,-4(r21)
 80052c0:	b4bfee16 	blt	r22,r18,800527c <__alt_data_end+0xfc00527c>
 80052c4:	80000926 	beq	r16,zero,80052ec <__multadd+0xb4>
 80052c8:	98800217 	ldw	r2,8(r19)
 80052cc:	9080130e 	bge	r18,r2,800531c <__multadd+0xe4>
 80052d0:	90800144 	addi	r2,r18,5
 80052d4:	1085883a 	add	r2,r2,r2
 80052d8:	1085883a 	add	r2,r2,r2
 80052dc:	9885883a 	add	r2,r19,r2
 80052e0:	14000015 	stw	r16,0(r2)
 80052e4:	94800044 	addi	r18,r18,1
 80052e8:	9c800415 	stw	r18,16(r19)
 80052ec:	9805883a 	mov	r2,r19
 80052f0:	dfc00817 	ldw	ra,32(sp)
 80052f4:	ddc00717 	ldw	r23,28(sp)
 80052f8:	dd800617 	ldw	r22,24(sp)
 80052fc:	dd400517 	ldw	r21,20(sp)
 8005300:	dd000417 	ldw	r20,16(sp)
 8005304:	dcc00317 	ldw	r19,12(sp)
 8005308:	dc800217 	ldw	r18,8(sp)
 800530c:	dc400117 	ldw	r17,4(sp)
 8005310:	dc000017 	ldw	r16,0(sp)
 8005314:	dec00904 	addi	sp,sp,36
 8005318:	f800283a 	ret
 800531c:	99400117 	ldw	r5,4(r19)
 8005320:	a009883a 	mov	r4,r20
 8005324:	29400044 	addi	r5,r5,1
 8005328:	80051680 	call	8005168 <_Balloc>
 800532c:	99800417 	ldw	r6,16(r19)
 8005330:	99400304 	addi	r5,r19,12
 8005334:	11000304 	addi	r4,r2,12
 8005338:	31800084 	addi	r6,r6,2
 800533c:	318d883a 	add	r6,r6,r6
 8005340:	318d883a 	add	r6,r6,r6
 8005344:	1023883a 	mov	r17,r2
 8005348:	80050200 	call	8005020 <memcpy>
 800534c:	98000a26 	beq	r19,zero,8005378 <__multadd+0x140>
 8005350:	98c00117 	ldw	r3,4(r19)
 8005354:	a0801317 	ldw	r2,76(r20)
 8005358:	18c7883a 	add	r3,r3,r3
 800535c:	18c7883a 	add	r3,r3,r3
 8005360:	10c5883a 	add	r2,r2,r3
 8005364:	10c00017 	ldw	r3,0(r2)
 8005368:	98c00015 	stw	r3,0(r19)
 800536c:	14c00015 	stw	r19,0(r2)
 8005370:	8827883a 	mov	r19,r17
 8005374:	003fd606 	br	80052d0 <__alt_data_end+0xfc0052d0>
 8005378:	8827883a 	mov	r19,r17
 800537c:	003fd406 	br	80052d0 <__alt_data_end+0xfc0052d0>

08005380 <__s2b>:
 8005380:	defff904 	addi	sp,sp,-28
 8005384:	dc400115 	stw	r17,4(sp)
 8005388:	dc000015 	stw	r16,0(sp)
 800538c:	2023883a 	mov	r17,r4
 8005390:	2821883a 	mov	r16,r5
 8005394:	39000204 	addi	r4,r7,8
 8005398:	01400244 	movi	r5,9
 800539c:	dcc00315 	stw	r19,12(sp)
 80053a0:	dc800215 	stw	r18,8(sp)
 80053a4:	dfc00615 	stw	ra,24(sp)
 80053a8:	dd400515 	stw	r21,20(sp)
 80053ac:	dd000415 	stw	r20,16(sp)
 80053b0:	3825883a 	mov	r18,r7
 80053b4:	3027883a 	mov	r19,r6
 80053b8:	80007340 	call	8000734 <__divsi3>
 80053bc:	00c00044 	movi	r3,1
 80053c0:	000b883a 	mov	r5,zero
 80053c4:	1880030e 	bge	r3,r2,80053d4 <__s2b+0x54>
 80053c8:	18c7883a 	add	r3,r3,r3
 80053cc:	29400044 	addi	r5,r5,1
 80053d0:	18bffd16 	blt	r3,r2,80053c8 <__alt_data_end+0xfc0053c8>
 80053d4:	8809883a 	mov	r4,r17
 80053d8:	80051680 	call	8005168 <_Balloc>
 80053dc:	d8c00717 	ldw	r3,28(sp)
 80053e0:	10c00515 	stw	r3,20(r2)
 80053e4:	00c00044 	movi	r3,1
 80053e8:	10c00415 	stw	r3,16(r2)
 80053ec:	00c00244 	movi	r3,9
 80053f0:	1cc0210e 	bge	r3,r19,8005478 <__s2b+0xf8>
 80053f4:	80eb883a 	add	r21,r16,r3
 80053f8:	a829883a 	mov	r20,r21
 80053fc:	84e1883a 	add	r16,r16,r19
 8005400:	a1c00007 	ldb	r7,0(r20)
 8005404:	01800284 	movi	r6,10
 8005408:	a5000044 	addi	r20,r20,1
 800540c:	100b883a 	mov	r5,r2
 8005410:	39fff404 	addi	r7,r7,-48
 8005414:	8809883a 	mov	r4,r17
 8005418:	80052380 	call	8005238 <__multadd>
 800541c:	a43ff81e 	bne	r20,r16,8005400 <__alt_data_end+0xfc005400>
 8005420:	ace1883a 	add	r16,r21,r19
 8005424:	843ffe04 	addi	r16,r16,-8
 8005428:	9c800a0e 	bge	r19,r18,8005454 <__s2b+0xd4>
 800542c:	94e5c83a 	sub	r18,r18,r19
 8005430:	84a5883a 	add	r18,r16,r18
 8005434:	81c00007 	ldb	r7,0(r16)
 8005438:	01800284 	movi	r6,10
 800543c:	84000044 	addi	r16,r16,1
 8005440:	100b883a 	mov	r5,r2
 8005444:	39fff404 	addi	r7,r7,-48
 8005448:	8809883a 	mov	r4,r17
 800544c:	80052380 	call	8005238 <__multadd>
 8005450:	84bff81e 	bne	r16,r18,8005434 <__alt_data_end+0xfc005434>
 8005454:	dfc00617 	ldw	ra,24(sp)
 8005458:	dd400517 	ldw	r21,20(sp)
 800545c:	dd000417 	ldw	r20,16(sp)
 8005460:	dcc00317 	ldw	r19,12(sp)
 8005464:	dc800217 	ldw	r18,8(sp)
 8005468:	dc400117 	ldw	r17,4(sp)
 800546c:	dc000017 	ldw	r16,0(sp)
 8005470:	dec00704 	addi	sp,sp,28
 8005474:	f800283a 	ret
 8005478:	84000284 	addi	r16,r16,10
 800547c:	1827883a 	mov	r19,r3
 8005480:	003fe906 	br	8005428 <__alt_data_end+0xfc005428>

08005484 <__hi0bits>:
 8005484:	20bfffec 	andhi	r2,r4,65535
 8005488:	1000141e 	bne	r2,zero,80054dc <__hi0bits+0x58>
 800548c:	2008943a 	slli	r4,r4,16
 8005490:	00800404 	movi	r2,16
 8005494:	20ffc02c 	andhi	r3,r4,65280
 8005498:	1800021e 	bne	r3,zero,80054a4 <__hi0bits+0x20>
 800549c:	2008923a 	slli	r4,r4,8
 80054a0:	10800204 	addi	r2,r2,8
 80054a4:	20fc002c 	andhi	r3,r4,61440
 80054a8:	1800021e 	bne	r3,zero,80054b4 <__hi0bits+0x30>
 80054ac:	2008913a 	slli	r4,r4,4
 80054b0:	10800104 	addi	r2,r2,4
 80054b4:	20f0002c 	andhi	r3,r4,49152
 80054b8:	1800031e 	bne	r3,zero,80054c8 <__hi0bits+0x44>
 80054bc:	2109883a 	add	r4,r4,r4
 80054c0:	10800084 	addi	r2,r2,2
 80054c4:	2109883a 	add	r4,r4,r4
 80054c8:	20000316 	blt	r4,zero,80054d8 <__hi0bits+0x54>
 80054cc:	2110002c 	andhi	r4,r4,16384
 80054d0:	2000041e 	bne	r4,zero,80054e4 <__hi0bits+0x60>
 80054d4:	00800804 	movi	r2,32
 80054d8:	f800283a 	ret
 80054dc:	0005883a 	mov	r2,zero
 80054e0:	003fec06 	br	8005494 <__alt_data_end+0xfc005494>
 80054e4:	10800044 	addi	r2,r2,1
 80054e8:	f800283a 	ret

080054ec <__lo0bits>:
 80054ec:	20c00017 	ldw	r3,0(r4)
 80054f0:	188001cc 	andi	r2,r3,7
 80054f4:	10000826 	beq	r2,zero,8005518 <__lo0bits+0x2c>
 80054f8:	1880004c 	andi	r2,r3,1
 80054fc:	1000211e 	bne	r2,zero,8005584 <__lo0bits+0x98>
 8005500:	1880008c 	andi	r2,r3,2
 8005504:	1000211e 	bne	r2,zero,800558c <__lo0bits+0xa0>
 8005508:	1806d0ba 	srli	r3,r3,2
 800550c:	00800084 	movi	r2,2
 8005510:	20c00015 	stw	r3,0(r4)
 8005514:	f800283a 	ret
 8005518:	18bfffcc 	andi	r2,r3,65535
 800551c:	10001326 	beq	r2,zero,800556c <__lo0bits+0x80>
 8005520:	0005883a 	mov	r2,zero
 8005524:	19403fcc 	andi	r5,r3,255
 8005528:	2800021e 	bne	r5,zero,8005534 <__lo0bits+0x48>
 800552c:	1806d23a 	srli	r3,r3,8
 8005530:	10800204 	addi	r2,r2,8
 8005534:	194003cc 	andi	r5,r3,15
 8005538:	2800021e 	bne	r5,zero,8005544 <__lo0bits+0x58>
 800553c:	1806d13a 	srli	r3,r3,4
 8005540:	10800104 	addi	r2,r2,4
 8005544:	194000cc 	andi	r5,r3,3
 8005548:	2800021e 	bne	r5,zero,8005554 <__lo0bits+0x68>
 800554c:	1806d0ba 	srli	r3,r3,2
 8005550:	10800084 	addi	r2,r2,2
 8005554:	1940004c 	andi	r5,r3,1
 8005558:	2800081e 	bne	r5,zero,800557c <__lo0bits+0x90>
 800555c:	1806d07a 	srli	r3,r3,1
 8005560:	1800051e 	bne	r3,zero,8005578 <__lo0bits+0x8c>
 8005564:	00800804 	movi	r2,32
 8005568:	f800283a 	ret
 800556c:	1806d43a 	srli	r3,r3,16
 8005570:	00800404 	movi	r2,16
 8005574:	003feb06 	br	8005524 <__alt_data_end+0xfc005524>
 8005578:	10800044 	addi	r2,r2,1
 800557c:	20c00015 	stw	r3,0(r4)
 8005580:	f800283a 	ret
 8005584:	0005883a 	mov	r2,zero
 8005588:	f800283a 	ret
 800558c:	1806d07a 	srli	r3,r3,1
 8005590:	00800044 	movi	r2,1
 8005594:	20c00015 	stw	r3,0(r4)
 8005598:	f800283a 	ret

0800559c <__i2b>:
 800559c:	defffd04 	addi	sp,sp,-12
 80055a0:	dc000015 	stw	r16,0(sp)
 80055a4:	04000044 	movi	r16,1
 80055a8:	dc400115 	stw	r17,4(sp)
 80055ac:	2823883a 	mov	r17,r5
 80055b0:	800b883a 	mov	r5,r16
 80055b4:	dfc00215 	stw	ra,8(sp)
 80055b8:	80051680 	call	8005168 <_Balloc>
 80055bc:	14400515 	stw	r17,20(r2)
 80055c0:	14000415 	stw	r16,16(r2)
 80055c4:	dfc00217 	ldw	ra,8(sp)
 80055c8:	dc400117 	ldw	r17,4(sp)
 80055cc:	dc000017 	ldw	r16,0(sp)
 80055d0:	dec00304 	addi	sp,sp,12
 80055d4:	f800283a 	ret

080055d8 <__multiply>:
 80055d8:	deffef04 	addi	sp,sp,-68
 80055dc:	dc400815 	stw	r17,32(sp)
 80055e0:	dc000715 	stw	r16,28(sp)
 80055e4:	34400417 	ldw	r17,16(r6)
 80055e8:	2c000417 	ldw	r16,16(r5)
 80055ec:	dd800d15 	stw	r22,52(sp)
 80055f0:	dc800915 	stw	r18,36(sp)
 80055f4:	dfc01015 	stw	ra,64(sp)
 80055f8:	df000f15 	stw	fp,60(sp)
 80055fc:	ddc00e15 	stw	r23,56(sp)
 8005600:	dd400c15 	stw	r21,48(sp)
 8005604:	dd000b15 	stw	r20,44(sp)
 8005608:	dcc00a15 	stw	r19,40(sp)
 800560c:	2825883a 	mov	r18,r5
 8005610:	302d883a 	mov	r22,r6
 8005614:	8440050e 	bge	r16,r17,800562c <__multiply+0x54>
 8005618:	8007883a 	mov	r3,r16
 800561c:	3025883a 	mov	r18,r6
 8005620:	8821883a 	mov	r16,r17
 8005624:	282d883a 	mov	r22,r5
 8005628:	1823883a 	mov	r17,r3
 800562c:	90800217 	ldw	r2,8(r18)
 8005630:	8447883a 	add	r3,r16,r17
 8005634:	d8c00215 	stw	r3,8(sp)
 8005638:	91400117 	ldw	r5,4(r18)
 800563c:	10c0010e 	bge	r2,r3,8005644 <__multiply+0x6c>
 8005640:	29400044 	addi	r5,r5,1
 8005644:	80051680 	call	8005168 <_Balloc>
 8005648:	d8c00217 	ldw	r3,8(sp)
 800564c:	d8800615 	stw	r2,24(sp)
 8005650:	18eb883a 	add	r21,r3,r3
 8005654:	ad6b883a 	add	r21,r21,r21
 8005658:	10c00504 	addi	r3,r2,20
 800565c:	1d6b883a 	add	r21,r3,r21
 8005660:	d8c00115 	stw	r3,4(sp)
 8005664:	dd400315 	stw	r21,12(sp)
 8005668:	1805883a 	mov	r2,r3
 800566c:	1d40042e 	bgeu	r3,r21,8005680 <__multiply+0xa8>
 8005670:	d8c00317 	ldw	r3,12(sp)
 8005674:	10000015 	stw	zero,0(r2)
 8005678:	10800104 	addi	r2,r2,4
 800567c:	10fffc36 	bltu	r2,r3,8005670 <__alt_data_end+0xfc005670>
 8005680:	8c63883a 	add	r17,r17,r17
 8005684:	b5800504 	addi	r22,r22,20
 8005688:	8c63883a 	add	r17,r17,r17
 800568c:	94800504 	addi	r18,r18,20
 8005690:	8421883a 	add	r16,r16,r16
 8005694:	b463883a 	add	r17,r22,r17
 8005698:	8421883a 	add	r16,r16,r16
 800569c:	dd800015 	stw	r22,0(sp)
 80056a0:	dc800415 	stw	r18,16(sp)
 80056a4:	dc400515 	stw	r17,20(sp)
 80056a8:	9429883a 	add	r20,r18,r16
 80056ac:	b4404f2e 	bgeu	r22,r17,80057ec <__multiply+0x214>
 80056b0:	d8c00017 	ldw	r3,0(sp)
 80056b4:	1c800017 	ldw	r18,0(r3)
 80056b8:	947fffcc 	andi	r17,r18,65535
 80056bc:	88001e26 	beq	r17,zero,8005738 <__multiply+0x160>
 80056c0:	dd800117 	ldw	r22,4(sp)
 80056c4:	dd400417 	ldw	r21,16(sp)
 80056c8:	0027883a 	mov	r19,zero
 80056cc:	ac800017 	ldw	r18,0(r21)
 80056d0:	b4000017 	ldw	r16,0(r22)
 80056d4:	880b883a 	mov	r5,r17
 80056d8:	913fffcc 	andi	r4,r18,65535
 80056dc:	80008e80 	call	80008e8 <__mulsi3>
 80056e0:	9008d43a 	srli	r4,r18,16
 80056e4:	84bfffcc 	andi	r18,r16,65535
 80056e8:	1485883a 	add	r2,r2,r18
 80056ec:	14e5883a 	add	r18,r2,r19
 80056f0:	8020d43a 	srli	r16,r16,16
 80056f4:	9026d43a 	srli	r19,r18,16
 80056f8:	880b883a 	mov	r5,r17
 80056fc:	80008e80 	call	80008e8 <__mulsi3>
 8005700:	1405883a 	add	r2,r2,r16
 8005704:	14e1883a 	add	r16,r2,r19
 8005708:	90ffffcc 	andi	r3,r18,65535
 800570c:	8024943a 	slli	r18,r16,16
 8005710:	ad400104 	addi	r21,r21,4
 8005714:	b005883a 	mov	r2,r22
 8005718:	90c6b03a 	or	r3,r18,r3
 800571c:	b0c00015 	stw	r3,0(r22)
 8005720:	8026d43a 	srli	r19,r16,16
 8005724:	b5800104 	addi	r22,r22,4
 8005728:	ad3fe836 	bltu	r21,r20,80056cc <__alt_data_end+0xfc0056cc>
 800572c:	d8c00017 	ldw	r3,0(sp)
 8005730:	14c00115 	stw	r19,4(r2)
 8005734:	1c800017 	ldw	r18,0(r3)
 8005738:	9024d43a 	srli	r18,r18,16
 800573c:	90002226 	beq	r18,zero,80057c8 <__multiply+0x1f0>
 8005740:	d8c00117 	ldw	r3,4(sp)
 8005744:	dd800417 	ldw	r22,16(sp)
 8005748:	002f883a 	mov	r23,zero
 800574c:	1f000017 	ldw	fp,0(r3)
 8005750:	1823883a 	mov	r17,r3
 8005754:	182b883a 	mov	r21,r3
 8005758:	e021883a 	mov	r16,fp
 800575c:	00000106 	br	8005764 <__multiply+0x18c>
 8005760:	982b883a 	mov	r21,r19
 8005764:	b100000b 	ldhu	r4,0(r22)
 8005768:	8020d43a 	srli	r16,r16,16
 800576c:	900b883a 	mov	r5,r18
 8005770:	80008e80 	call	80008e8 <__mulsi3>
 8005774:	1405883a 	add	r2,r2,r16
 8005778:	15ef883a 	add	r23,r2,r23
 800577c:	b804943a 	slli	r2,r23,16
 8005780:	e0ffffcc 	andi	r3,fp,65535
 8005784:	8c400104 	addi	r17,r17,4
 8005788:	10c6b03a 	or	r3,r2,r3
 800578c:	88ffff15 	stw	r3,-4(r17)
 8005790:	b5800104 	addi	r22,r22,4
 8005794:	b13fff17 	ldw	r4,-4(r22)
 8005798:	acc00104 	addi	r19,r21,4
 800579c:	900b883a 	mov	r5,r18
 80057a0:	2008d43a 	srli	r4,r4,16
 80057a4:	9c000017 	ldw	r16,0(r19)
 80057a8:	80008e80 	call	80008e8 <__mulsi3>
 80057ac:	b806d43a 	srli	r3,r23,16
 80057b0:	813fffcc 	andi	r4,r16,65535
 80057b4:	1105883a 	add	r2,r2,r4
 80057b8:	10f9883a 	add	fp,r2,r3
 80057bc:	e02ed43a 	srli	r23,fp,16
 80057c0:	b53fe736 	bltu	r22,r20,8005760 <__alt_data_end+0xfc005760>
 80057c4:	af000115 	stw	fp,4(r21)
 80057c8:	d8c00017 	ldw	r3,0(sp)
 80057cc:	d9000517 	ldw	r4,20(sp)
 80057d0:	18c00104 	addi	r3,r3,4
 80057d4:	d8c00015 	stw	r3,0(sp)
 80057d8:	d8c00117 	ldw	r3,4(sp)
 80057dc:	18c00104 	addi	r3,r3,4
 80057e0:	d8c00115 	stw	r3,4(sp)
 80057e4:	d8c00017 	ldw	r3,0(sp)
 80057e8:	193fb136 	bltu	r3,r4,80056b0 <__alt_data_end+0xfc0056b0>
 80057ec:	d8c00217 	ldw	r3,8(sp)
 80057f0:	00c00c0e 	bge	zero,r3,8005824 <__multiply+0x24c>
 80057f4:	d8c00317 	ldw	r3,12(sp)
 80057f8:	18bfff17 	ldw	r2,-4(r3)
 80057fc:	1d7fff04 	addi	r21,r3,-4
 8005800:	10000326 	beq	r2,zero,8005810 <__multiply+0x238>
 8005804:	00000706 	br	8005824 <__multiply+0x24c>
 8005808:	a8800017 	ldw	r2,0(r21)
 800580c:	1000051e 	bne	r2,zero,8005824 <__multiply+0x24c>
 8005810:	d8c00217 	ldw	r3,8(sp)
 8005814:	ad7fff04 	addi	r21,r21,-4
 8005818:	18ffffc4 	addi	r3,r3,-1
 800581c:	d8c00215 	stw	r3,8(sp)
 8005820:	183ff91e 	bne	r3,zero,8005808 <__alt_data_end+0xfc005808>
 8005824:	d8c00617 	ldw	r3,24(sp)
 8005828:	d9000217 	ldw	r4,8(sp)
 800582c:	1805883a 	mov	r2,r3
 8005830:	19000415 	stw	r4,16(r3)
 8005834:	dfc01017 	ldw	ra,64(sp)
 8005838:	df000f17 	ldw	fp,60(sp)
 800583c:	ddc00e17 	ldw	r23,56(sp)
 8005840:	dd800d17 	ldw	r22,52(sp)
 8005844:	dd400c17 	ldw	r21,48(sp)
 8005848:	dd000b17 	ldw	r20,44(sp)
 800584c:	dcc00a17 	ldw	r19,40(sp)
 8005850:	dc800917 	ldw	r18,36(sp)
 8005854:	dc400817 	ldw	r17,32(sp)
 8005858:	dc000717 	ldw	r16,28(sp)
 800585c:	dec01104 	addi	sp,sp,68
 8005860:	f800283a 	ret

08005864 <__pow5mult>:
 8005864:	defffa04 	addi	sp,sp,-24
 8005868:	dcc00315 	stw	r19,12(sp)
 800586c:	dc000015 	stw	r16,0(sp)
 8005870:	dfc00515 	stw	ra,20(sp)
 8005874:	dd000415 	stw	r20,16(sp)
 8005878:	dc800215 	stw	r18,8(sp)
 800587c:	dc400115 	stw	r17,4(sp)
 8005880:	308000cc 	andi	r2,r6,3
 8005884:	3021883a 	mov	r16,r6
 8005888:	2027883a 	mov	r19,r4
 800588c:	10002f1e 	bne	r2,zero,800594c <__pow5mult+0xe8>
 8005890:	2825883a 	mov	r18,r5
 8005894:	8021d0ba 	srai	r16,r16,2
 8005898:	80001a26 	beq	r16,zero,8005904 <__pow5mult+0xa0>
 800589c:	9c401217 	ldw	r17,72(r19)
 80058a0:	8800061e 	bne	r17,zero,80058bc <__pow5mult+0x58>
 80058a4:	00003406 	br	8005978 <__pow5mult+0x114>
 80058a8:	8021d07a 	srai	r16,r16,1
 80058ac:	80001526 	beq	r16,zero,8005904 <__pow5mult+0xa0>
 80058b0:	88800017 	ldw	r2,0(r17)
 80058b4:	10001c26 	beq	r2,zero,8005928 <__pow5mult+0xc4>
 80058b8:	1023883a 	mov	r17,r2
 80058bc:	8080004c 	andi	r2,r16,1
 80058c0:	103ff926 	beq	r2,zero,80058a8 <__alt_data_end+0xfc0058a8>
 80058c4:	880d883a 	mov	r6,r17
 80058c8:	900b883a 	mov	r5,r18
 80058cc:	9809883a 	mov	r4,r19
 80058d0:	80055d80 	call	80055d8 <__multiply>
 80058d4:	90001b26 	beq	r18,zero,8005944 <__pow5mult+0xe0>
 80058d8:	91000117 	ldw	r4,4(r18)
 80058dc:	98c01317 	ldw	r3,76(r19)
 80058e0:	8021d07a 	srai	r16,r16,1
 80058e4:	2109883a 	add	r4,r4,r4
 80058e8:	2109883a 	add	r4,r4,r4
 80058ec:	1907883a 	add	r3,r3,r4
 80058f0:	19000017 	ldw	r4,0(r3)
 80058f4:	91000015 	stw	r4,0(r18)
 80058f8:	1c800015 	stw	r18,0(r3)
 80058fc:	1025883a 	mov	r18,r2
 8005900:	803feb1e 	bne	r16,zero,80058b0 <__alt_data_end+0xfc0058b0>
 8005904:	9005883a 	mov	r2,r18
 8005908:	dfc00517 	ldw	ra,20(sp)
 800590c:	dd000417 	ldw	r20,16(sp)
 8005910:	dcc00317 	ldw	r19,12(sp)
 8005914:	dc800217 	ldw	r18,8(sp)
 8005918:	dc400117 	ldw	r17,4(sp)
 800591c:	dc000017 	ldw	r16,0(sp)
 8005920:	dec00604 	addi	sp,sp,24
 8005924:	f800283a 	ret
 8005928:	880d883a 	mov	r6,r17
 800592c:	880b883a 	mov	r5,r17
 8005930:	9809883a 	mov	r4,r19
 8005934:	80055d80 	call	80055d8 <__multiply>
 8005938:	88800015 	stw	r2,0(r17)
 800593c:	10000015 	stw	zero,0(r2)
 8005940:	003fdd06 	br	80058b8 <__alt_data_end+0xfc0058b8>
 8005944:	1025883a 	mov	r18,r2
 8005948:	003fd706 	br	80058a8 <__alt_data_end+0xfc0058a8>
 800594c:	10bfffc4 	addi	r2,r2,-1
 8005950:	1085883a 	add	r2,r2,r2
 8005954:	00c20074 	movhi	r3,2049
 8005958:	18f80004 	addi	r3,r3,-8192
 800595c:	1085883a 	add	r2,r2,r2
 8005960:	1885883a 	add	r2,r3,r2
 8005964:	11800017 	ldw	r6,0(r2)
 8005968:	000f883a 	mov	r7,zero
 800596c:	80052380 	call	8005238 <__multadd>
 8005970:	1025883a 	mov	r18,r2
 8005974:	003fc706 	br	8005894 <__alt_data_end+0xfc005894>
 8005978:	05000044 	movi	r20,1
 800597c:	a00b883a 	mov	r5,r20
 8005980:	9809883a 	mov	r4,r19
 8005984:	80051680 	call	8005168 <_Balloc>
 8005988:	1023883a 	mov	r17,r2
 800598c:	00809c44 	movi	r2,625
 8005990:	88800515 	stw	r2,20(r17)
 8005994:	8d000415 	stw	r20,16(r17)
 8005998:	9c401215 	stw	r17,72(r19)
 800599c:	88000015 	stw	zero,0(r17)
 80059a0:	003fc606 	br	80058bc <__alt_data_end+0xfc0058bc>

080059a4 <__lshift>:
 80059a4:	defff904 	addi	sp,sp,-28
 80059a8:	dd400515 	stw	r21,20(sp)
 80059ac:	dcc00315 	stw	r19,12(sp)
 80059b0:	302bd17a 	srai	r21,r6,5
 80059b4:	2cc00417 	ldw	r19,16(r5)
 80059b8:	28800217 	ldw	r2,8(r5)
 80059bc:	dd000415 	stw	r20,16(sp)
 80059c0:	ace7883a 	add	r19,r21,r19
 80059c4:	dc800215 	stw	r18,8(sp)
 80059c8:	dc400115 	stw	r17,4(sp)
 80059cc:	dc000015 	stw	r16,0(sp)
 80059d0:	dfc00615 	stw	ra,24(sp)
 80059d4:	9c000044 	addi	r16,r19,1
 80059d8:	2823883a 	mov	r17,r5
 80059dc:	3029883a 	mov	r20,r6
 80059e0:	2025883a 	mov	r18,r4
 80059e4:	29400117 	ldw	r5,4(r5)
 80059e8:	1400030e 	bge	r2,r16,80059f8 <__lshift+0x54>
 80059ec:	1085883a 	add	r2,r2,r2
 80059f0:	29400044 	addi	r5,r5,1
 80059f4:	143ffd16 	blt	r2,r16,80059ec <__alt_data_end+0xfc0059ec>
 80059f8:	9009883a 	mov	r4,r18
 80059fc:	80051680 	call	8005168 <_Balloc>
 8005a00:	10c00504 	addi	r3,r2,20
 8005a04:	0540070e 	bge	zero,r21,8005a24 <__lshift+0x80>
 8005a08:	ad6b883a 	add	r21,r21,r21
 8005a0c:	ad6b883a 	add	r21,r21,r21
 8005a10:	1809883a 	mov	r4,r3
 8005a14:	1d47883a 	add	r3,r3,r21
 8005a18:	20000015 	stw	zero,0(r4)
 8005a1c:	21000104 	addi	r4,r4,4
 8005a20:	193ffd1e 	bne	r3,r4,8005a18 <__alt_data_end+0xfc005a18>
 8005a24:	8a000417 	ldw	r8,16(r17)
 8005a28:	89000504 	addi	r4,r17,20
 8005a2c:	a18007cc 	andi	r6,r20,31
 8005a30:	4211883a 	add	r8,r8,r8
 8005a34:	4211883a 	add	r8,r8,r8
 8005a38:	2211883a 	add	r8,r4,r8
 8005a3c:	30002326 	beq	r6,zero,8005acc <__lshift+0x128>
 8005a40:	02400804 	movi	r9,32
 8005a44:	4993c83a 	sub	r9,r9,r6
 8005a48:	000b883a 	mov	r5,zero
 8005a4c:	21c00017 	ldw	r7,0(r4)
 8005a50:	1815883a 	mov	r10,r3
 8005a54:	18c00104 	addi	r3,r3,4
 8005a58:	398e983a 	sll	r7,r7,r6
 8005a5c:	21000104 	addi	r4,r4,4
 8005a60:	394ab03a 	or	r5,r7,r5
 8005a64:	197fff15 	stw	r5,-4(r3)
 8005a68:	217fff17 	ldw	r5,-4(r4)
 8005a6c:	2a4ad83a 	srl	r5,r5,r9
 8005a70:	223ff636 	bltu	r4,r8,8005a4c <__alt_data_end+0xfc005a4c>
 8005a74:	51400115 	stw	r5,4(r10)
 8005a78:	28001a1e 	bne	r5,zero,8005ae4 <__lshift+0x140>
 8005a7c:	843fffc4 	addi	r16,r16,-1
 8005a80:	14000415 	stw	r16,16(r2)
 8005a84:	88000826 	beq	r17,zero,8005aa8 <__lshift+0x104>
 8005a88:	89000117 	ldw	r4,4(r17)
 8005a8c:	90c01317 	ldw	r3,76(r18)
 8005a90:	2109883a 	add	r4,r4,r4
 8005a94:	2109883a 	add	r4,r4,r4
 8005a98:	1907883a 	add	r3,r3,r4
 8005a9c:	19000017 	ldw	r4,0(r3)
 8005aa0:	89000015 	stw	r4,0(r17)
 8005aa4:	1c400015 	stw	r17,0(r3)
 8005aa8:	dfc00617 	ldw	ra,24(sp)
 8005aac:	dd400517 	ldw	r21,20(sp)
 8005ab0:	dd000417 	ldw	r20,16(sp)
 8005ab4:	dcc00317 	ldw	r19,12(sp)
 8005ab8:	dc800217 	ldw	r18,8(sp)
 8005abc:	dc400117 	ldw	r17,4(sp)
 8005ac0:	dc000017 	ldw	r16,0(sp)
 8005ac4:	dec00704 	addi	sp,sp,28
 8005ac8:	f800283a 	ret
 8005acc:	21400017 	ldw	r5,0(r4)
 8005ad0:	18c00104 	addi	r3,r3,4
 8005ad4:	21000104 	addi	r4,r4,4
 8005ad8:	197fff15 	stw	r5,-4(r3)
 8005adc:	223ffb36 	bltu	r4,r8,8005acc <__alt_data_end+0xfc005acc>
 8005ae0:	003fe606 	br	8005a7c <__alt_data_end+0xfc005a7c>
 8005ae4:	9c000084 	addi	r16,r19,2
 8005ae8:	003fe406 	br	8005a7c <__alt_data_end+0xfc005a7c>

08005aec <__mcmp>:
 8005aec:	20800417 	ldw	r2,16(r4)
 8005af0:	28c00417 	ldw	r3,16(r5)
 8005af4:	10c5c83a 	sub	r2,r2,r3
 8005af8:	1000111e 	bne	r2,zero,8005b40 <__mcmp+0x54>
 8005afc:	18c7883a 	add	r3,r3,r3
 8005b00:	18c7883a 	add	r3,r3,r3
 8005b04:	21000504 	addi	r4,r4,20
 8005b08:	29400504 	addi	r5,r5,20
 8005b0c:	20c5883a 	add	r2,r4,r3
 8005b10:	28cb883a 	add	r5,r5,r3
 8005b14:	00000106 	br	8005b1c <__mcmp+0x30>
 8005b18:	20800a2e 	bgeu	r4,r2,8005b44 <__mcmp+0x58>
 8005b1c:	10bfff04 	addi	r2,r2,-4
 8005b20:	297fff04 	addi	r5,r5,-4
 8005b24:	11800017 	ldw	r6,0(r2)
 8005b28:	28c00017 	ldw	r3,0(r5)
 8005b2c:	30fffa26 	beq	r6,r3,8005b18 <__alt_data_end+0xfc005b18>
 8005b30:	30c00236 	bltu	r6,r3,8005b3c <__mcmp+0x50>
 8005b34:	00800044 	movi	r2,1
 8005b38:	f800283a 	ret
 8005b3c:	00bfffc4 	movi	r2,-1
 8005b40:	f800283a 	ret
 8005b44:	0005883a 	mov	r2,zero
 8005b48:	f800283a 	ret

08005b4c <__mdiff>:
 8005b4c:	28c00417 	ldw	r3,16(r5)
 8005b50:	30800417 	ldw	r2,16(r6)
 8005b54:	defffa04 	addi	sp,sp,-24
 8005b58:	dcc00315 	stw	r19,12(sp)
 8005b5c:	dc800215 	stw	r18,8(sp)
 8005b60:	dfc00515 	stw	ra,20(sp)
 8005b64:	dd000415 	stw	r20,16(sp)
 8005b68:	dc400115 	stw	r17,4(sp)
 8005b6c:	dc000015 	stw	r16,0(sp)
 8005b70:	1887c83a 	sub	r3,r3,r2
 8005b74:	2825883a 	mov	r18,r5
 8005b78:	3027883a 	mov	r19,r6
 8005b7c:	1800141e 	bne	r3,zero,8005bd0 <__mdiff+0x84>
 8005b80:	1085883a 	add	r2,r2,r2
 8005b84:	1085883a 	add	r2,r2,r2
 8005b88:	2a000504 	addi	r8,r5,20
 8005b8c:	34000504 	addi	r16,r6,20
 8005b90:	4087883a 	add	r3,r8,r2
 8005b94:	8085883a 	add	r2,r16,r2
 8005b98:	00000106 	br	8005ba0 <__mdiff+0x54>
 8005b9c:	40c0592e 	bgeu	r8,r3,8005d04 <__mdiff+0x1b8>
 8005ba0:	18ffff04 	addi	r3,r3,-4
 8005ba4:	10bfff04 	addi	r2,r2,-4
 8005ba8:	19c00017 	ldw	r7,0(r3)
 8005bac:	11400017 	ldw	r5,0(r2)
 8005bb0:	397ffa26 	beq	r7,r5,8005b9c <__alt_data_end+0xfc005b9c>
 8005bb4:	3940592e 	bgeu	r7,r5,8005d1c <__mdiff+0x1d0>
 8005bb8:	9005883a 	mov	r2,r18
 8005bbc:	4023883a 	mov	r17,r8
 8005bc0:	9825883a 	mov	r18,r19
 8005bc4:	05000044 	movi	r20,1
 8005bc8:	1027883a 	mov	r19,r2
 8005bcc:	00000406 	br	8005be0 <__mdiff+0x94>
 8005bd0:	18005616 	blt	r3,zero,8005d2c <__mdiff+0x1e0>
 8005bd4:	34400504 	addi	r17,r6,20
 8005bd8:	2c000504 	addi	r16,r5,20
 8005bdc:	0029883a 	mov	r20,zero
 8005be0:	91400117 	ldw	r5,4(r18)
 8005be4:	80051680 	call	8005168 <_Balloc>
 8005be8:	92400417 	ldw	r9,16(r18)
 8005bec:	9b000417 	ldw	r12,16(r19)
 8005bf0:	12c00504 	addi	r11,r2,20
 8005bf4:	4a51883a 	add	r8,r9,r9
 8005bf8:	6319883a 	add	r12,r12,r12
 8005bfc:	4211883a 	add	r8,r8,r8
 8005c00:	6319883a 	add	r12,r12,r12
 8005c04:	15000315 	stw	r20,12(r2)
 8005c08:	8211883a 	add	r8,r16,r8
 8005c0c:	8b19883a 	add	r12,r17,r12
 8005c10:	0007883a 	mov	r3,zero
 8005c14:	81400017 	ldw	r5,0(r16)
 8005c18:	89c00017 	ldw	r7,0(r17)
 8005c1c:	59800104 	addi	r6,r11,4
 8005c20:	293fffcc 	andi	r4,r5,65535
 8005c24:	20c7883a 	add	r3,r4,r3
 8005c28:	393fffcc 	andi	r4,r7,65535
 8005c2c:	1909c83a 	sub	r4,r3,r4
 8005c30:	280ad43a 	srli	r5,r5,16
 8005c34:	380ed43a 	srli	r7,r7,16
 8005c38:	2007d43a 	srai	r3,r4,16
 8005c3c:	213fffcc 	andi	r4,r4,65535
 8005c40:	29cbc83a 	sub	r5,r5,r7
 8005c44:	28c7883a 	add	r3,r5,r3
 8005c48:	180a943a 	slli	r5,r3,16
 8005c4c:	8c400104 	addi	r17,r17,4
 8005c50:	84000104 	addi	r16,r16,4
 8005c54:	2908b03a 	or	r4,r5,r4
 8005c58:	59000015 	stw	r4,0(r11)
 8005c5c:	1807d43a 	srai	r3,r3,16
 8005c60:	3015883a 	mov	r10,r6
 8005c64:	3017883a 	mov	r11,r6
 8005c68:	8b3fea36 	bltu	r17,r12,8005c14 <__alt_data_end+0xfc005c14>
 8005c6c:	8200162e 	bgeu	r16,r8,8005cc8 <__mdiff+0x17c>
 8005c70:	8017883a 	mov	r11,r16
 8005c74:	59400017 	ldw	r5,0(r11)
 8005c78:	31800104 	addi	r6,r6,4
 8005c7c:	5ac00104 	addi	r11,r11,4
 8005c80:	293fffcc 	andi	r4,r5,65535
 8005c84:	20c7883a 	add	r3,r4,r3
 8005c88:	280ed43a 	srli	r7,r5,16
 8005c8c:	180bd43a 	srai	r5,r3,16
 8005c90:	193fffcc 	andi	r4,r3,65535
 8005c94:	3947883a 	add	r3,r7,r5
 8005c98:	180a943a 	slli	r5,r3,16
 8005c9c:	1807d43a 	srai	r3,r3,16
 8005ca0:	2908b03a 	or	r4,r5,r4
 8005ca4:	313fff15 	stw	r4,-4(r6)
 8005ca8:	5a3ff236 	bltu	r11,r8,8005c74 <__alt_data_end+0xfc005c74>
 8005cac:	0406303a 	nor	r3,zero,r16
 8005cb0:	1a07883a 	add	r3,r3,r8
 8005cb4:	1806d0ba 	srli	r3,r3,2
 8005cb8:	18c00044 	addi	r3,r3,1
 8005cbc:	18c7883a 	add	r3,r3,r3
 8005cc0:	18c7883a 	add	r3,r3,r3
 8005cc4:	50d5883a 	add	r10,r10,r3
 8005cc8:	50ffff04 	addi	r3,r10,-4
 8005ccc:	2000041e 	bne	r4,zero,8005ce0 <__mdiff+0x194>
 8005cd0:	18ffff04 	addi	r3,r3,-4
 8005cd4:	19000017 	ldw	r4,0(r3)
 8005cd8:	4a7fffc4 	addi	r9,r9,-1
 8005cdc:	203ffc26 	beq	r4,zero,8005cd0 <__alt_data_end+0xfc005cd0>
 8005ce0:	12400415 	stw	r9,16(r2)
 8005ce4:	dfc00517 	ldw	ra,20(sp)
 8005ce8:	dd000417 	ldw	r20,16(sp)
 8005cec:	dcc00317 	ldw	r19,12(sp)
 8005cf0:	dc800217 	ldw	r18,8(sp)
 8005cf4:	dc400117 	ldw	r17,4(sp)
 8005cf8:	dc000017 	ldw	r16,0(sp)
 8005cfc:	dec00604 	addi	sp,sp,24
 8005d00:	f800283a 	ret
 8005d04:	000b883a 	mov	r5,zero
 8005d08:	80051680 	call	8005168 <_Balloc>
 8005d0c:	00c00044 	movi	r3,1
 8005d10:	10c00415 	stw	r3,16(r2)
 8005d14:	10000515 	stw	zero,20(r2)
 8005d18:	003ff206 	br	8005ce4 <__alt_data_end+0xfc005ce4>
 8005d1c:	8023883a 	mov	r17,r16
 8005d20:	0029883a 	mov	r20,zero
 8005d24:	4021883a 	mov	r16,r8
 8005d28:	003fad06 	br	8005be0 <__alt_data_end+0xfc005be0>
 8005d2c:	9005883a 	mov	r2,r18
 8005d30:	94400504 	addi	r17,r18,20
 8005d34:	9c000504 	addi	r16,r19,20
 8005d38:	9825883a 	mov	r18,r19
 8005d3c:	05000044 	movi	r20,1
 8005d40:	1027883a 	mov	r19,r2
 8005d44:	003fa606 	br	8005be0 <__alt_data_end+0xfc005be0>

08005d48 <__ulp>:
 8005d48:	295ffc2c 	andhi	r5,r5,32752
 8005d4c:	00bf3034 	movhi	r2,64704
 8005d50:	2887883a 	add	r3,r5,r2
 8005d54:	00c0020e 	bge	zero,r3,8005d60 <__ulp+0x18>
 8005d58:	0005883a 	mov	r2,zero
 8005d5c:	f800283a 	ret
 8005d60:	00c7c83a 	sub	r3,zero,r3
 8005d64:	1807d53a 	srai	r3,r3,20
 8005d68:	008004c4 	movi	r2,19
 8005d6c:	10c00b0e 	bge	r2,r3,8005d9c <__ulp+0x54>
 8005d70:	18bffb04 	addi	r2,r3,-20
 8005d74:	01000784 	movi	r4,30
 8005d78:	0007883a 	mov	r3,zero
 8005d7c:	20800516 	blt	r4,r2,8005d94 <__ulp+0x4c>
 8005d80:	010007c4 	movi	r4,31
 8005d84:	2089c83a 	sub	r4,r4,r2
 8005d88:	00800044 	movi	r2,1
 8005d8c:	1104983a 	sll	r2,r2,r4
 8005d90:	f800283a 	ret
 8005d94:	00800044 	movi	r2,1
 8005d98:	f800283a 	ret
 8005d9c:	01400234 	movhi	r5,8
 8005da0:	28c7d83a 	sra	r3,r5,r3
 8005da4:	0005883a 	mov	r2,zero
 8005da8:	f800283a 	ret

08005dac <__b2d>:
 8005dac:	defffa04 	addi	sp,sp,-24
 8005db0:	dc000015 	stw	r16,0(sp)
 8005db4:	24000417 	ldw	r16,16(r4)
 8005db8:	dc400115 	stw	r17,4(sp)
 8005dbc:	24400504 	addi	r17,r4,20
 8005dc0:	8421883a 	add	r16,r16,r16
 8005dc4:	8421883a 	add	r16,r16,r16
 8005dc8:	8c21883a 	add	r16,r17,r16
 8005dcc:	dc800215 	stw	r18,8(sp)
 8005dd0:	84bfff17 	ldw	r18,-4(r16)
 8005dd4:	dd000415 	stw	r20,16(sp)
 8005dd8:	dcc00315 	stw	r19,12(sp)
 8005ddc:	9009883a 	mov	r4,r18
 8005de0:	2829883a 	mov	r20,r5
 8005de4:	dfc00515 	stw	ra,20(sp)
 8005de8:	80054840 	call	8005484 <__hi0bits>
 8005dec:	00c00804 	movi	r3,32
 8005df0:	1889c83a 	sub	r4,r3,r2
 8005df4:	a1000015 	stw	r4,0(r20)
 8005df8:	01000284 	movi	r4,10
 8005dfc:	84ffff04 	addi	r19,r16,-4
 8005e00:	20801216 	blt	r4,r2,8005e4c <__b2d+0xa0>
 8005e04:	018002c4 	movi	r6,11
 8005e08:	308dc83a 	sub	r6,r6,r2
 8005e0c:	9186d83a 	srl	r3,r18,r6
 8005e10:	18cffc34 	orhi	r3,r3,16368
 8005e14:	8cc0212e 	bgeu	r17,r19,8005e9c <__b2d+0xf0>
 8005e18:	813ffe17 	ldw	r4,-8(r16)
 8005e1c:	218cd83a 	srl	r6,r4,r6
 8005e20:	10800544 	addi	r2,r2,21
 8005e24:	9084983a 	sll	r2,r18,r2
 8005e28:	1184b03a 	or	r2,r2,r6
 8005e2c:	dfc00517 	ldw	ra,20(sp)
 8005e30:	dd000417 	ldw	r20,16(sp)
 8005e34:	dcc00317 	ldw	r19,12(sp)
 8005e38:	dc800217 	ldw	r18,8(sp)
 8005e3c:	dc400117 	ldw	r17,4(sp)
 8005e40:	dc000017 	ldw	r16,0(sp)
 8005e44:	dec00604 	addi	sp,sp,24
 8005e48:	f800283a 	ret
 8005e4c:	8cc00f2e 	bgeu	r17,r19,8005e8c <__b2d+0xe0>
 8005e50:	117ffd44 	addi	r5,r2,-11
 8005e54:	80bffe17 	ldw	r2,-8(r16)
 8005e58:	28000e26 	beq	r5,zero,8005e94 <__b2d+0xe8>
 8005e5c:	1949c83a 	sub	r4,r3,r5
 8005e60:	9164983a 	sll	r18,r18,r5
 8005e64:	1106d83a 	srl	r3,r2,r4
 8005e68:	81bffe04 	addi	r6,r16,-8
 8005e6c:	948ffc34 	orhi	r18,r18,16368
 8005e70:	90c6b03a 	or	r3,r18,r3
 8005e74:	89800e2e 	bgeu	r17,r6,8005eb0 <__b2d+0x104>
 8005e78:	81bffd17 	ldw	r6,-12(r16)
 8005e7c:	1144983a 	sll	r2,r2,r5
 8005e80:	310ad83a 	srl	r5,r6,r4
 8005e84:	2884b03a 	or	r2,r5,r2
 8005e88:	003fe806 	br	8005e2c <__alt_data_end+0xfc005e2c>
 8005e8c:	10bffd44 	addi	r2,r2,-11
 8005e90:	1000041e 	bne	r2,zero,8005ea4 <__b2d+0xf8>
 8005e94:	90cffc34 	orhi	r3,r18,16368
 8005e98:	003fe406 	br	8005e2c <__alt_data_end+0xfc005e2c>
 8005e9c:	000d883a 	mov	r6,zero
 8005ea0:	003fdf06 	br	8005e20 <__alt_data_end+0xfc005e20>
 8005ea4:	90a4983a 	sll	r18,r18,r2
 8005ea8:	0005883a 	mov	r2,zero
 8005eac:	003ff906 	br	8005e94 <__alt_data_end+0xfc005e94>
 8005eb0:	1144983a 	sll	r2,r2,r5
 8005eb4:	003fdd06 	br	8005e2c <__alt_data_end+0xfc005e2c>

08005eb8 <__d2b>:
 8005eb8:	defff804 	addi	sp,sp,-32
 8005ebc:	dc000215 	stw	r16,8(sp)
 8005ec0:	3021883a 	mov	r16,r6
 8005ec4:	dc400315 	stw	r17,12(sp)
 8005ec8:	8022907a 	slli	r17,r16,1
 8005ecc:	dd000615 	stw	r20,24(sp)
 8005ed0:	2829883a 	mov	r20,r5
 8005ed4:	01400044 	movi	r5,1
 8005ed8:	dcc00515 	stw	r19,20(sp)
 8005edc:	dc800415 	stw	r18,16(sp)
 8005ee0:	dfc00715 	stw	ra,28(sp)
 8005ee4:	3825883a 	mov	r18,r7
 8005ee8:	8822d57a 	srli	r17,r17,21
 8005eec:	80051680 	call	8005168 <_Balloc>
 8005ef0:	1027883a 	mov	r19,r2
 8005ef4:	00800434 	movhi	r2,16
 8005ef8:	10bfffc4 	addi	r2,r2,-1
 8005efc:	808c703a 	and	r6,r16,r2
 8005f00:	88000126 	beq	r17,zero,8005f08 <__d2b+0x50>
 8005f04:	31800434 	orhi	r6,r6,16
 8005f08:	d9800015 	stw	r6,0(sp)
 8005f0c:	a0002426 	beq	r20,zero,8005fa0 <__d2b+0xe8>
 8005f10:	d9000104 	addi	r4,sp,4
 8005f14:	dd000115 	stw	r20,4(sp)
 8005f18:	80054ec0 	call	80054ec <__lo0bits>
 8005f1c:	d8c00017 	ldw	r3,0(sp)
 8005f20:	10002f1e 	bne	r2,zero,8005fe0 <__d2b+0x128>
 8005f24:	d9000117 	ldw	r4,4(sp)
 8005f28:	99000515 	stw	r4,20(r19)
 8005f2c:	1821003a 	cmpeq	r16,r3,zero
 8005f30:	01000084 	movi	r4,2
 8005f34:	2421c83a 	sub	r16,r4,r16
 8005f38:	98c00615 	stw	r3,24(r19)
 8005f3c:	9c000415 	stw	r16,16(r19)
 8005f40:	88001f1e 	bne	r17,zero,8005fc0 <__d2b+0x108>
 8005f44:	10bef384 	addi	r2,r2,-1074
 8005f48:	90800015 	stw	r2,0(r18)
 8005f4c:	00900034 	movhi	r2,16384
 8005f50:	10bfffc4 	addi	r2,r2,-1
 8005f54:	8085883a 	add	r2,r16,r2
 8005f58:	1085883a 	add	r2,r2,r2
 8005f5c:	1085883a 	add	r2,r2,r2
 8005f60:	9885883a 	add	r2,r19,r2
 8005f64:	11000517 	ldw	r4,20(r2)
 8005f68:	8020917a 	slli	r16,r16,5
 8005f6c:	80054840 	call	8005484 <__hi0bits>
 8005f70:	d8c00817 	ldw	r3,32(sp)
 8005f74:	8085c83a 	sub	r2,r16,r2
 8005f78:	18800015 	stw	r2,0(r3)
 8005f7c:	9805883a 	mov	r2,r19
 8005f80:	dfc00717 	ldw	ra,28(sp)
 8005f84:	dd000617 	ldw	r20,24(sp)
 8005f88:	dcc00517 	ldw	r19,20(sp)
 8005f8c:	dc800417 	ldw	r18,16(sp)
 8005f90:	dc400317 	ldw	r17,12(sp)
 8005f94:	dc000217 	ldw	r16,8(sp)
 8005f98:	dec00804 	addi	sp,sp,32
 8005f9c:	f800283a 	ret
 8005fa0:	d809883a 	mov	r4,sp
 8005fa4:	80054ec0 	call	80054ec <__lo0bits>
 8005fa8:	d8c00017 	ldw	r3,0(sp)
 8005fac:	04000044 	movi	r16,1
 8005fb0:	9c000415 	stw	r16,16(r19)
 8005fb4:	98c00515 	stw	r3,20(r19)
 8005fb8:	10800804 	addi	r2,r2,32
 8005fbc:	883fe126 	beq	r17,zero,8005f44 <__alt_data_end+0xfc005f44>
 8005fc0:	00c00d44 	movi	r3,53
 8005fc4:	8c7ef344 	addi	r17,r17,-1075
 8005fc8:	88a3883a 	add	r17,r17,r2
 8005fcc:	1885c83a 	sub	r2,r3,r2
 8005fd0:	d8c00817 	ldw	r3,32(sp)
 8005fd4:	94400015 	stw	r17,0(r18)
 8005fd8:	18800015 	stw	r2,0(r3)
 8005fdc:	003fe706 	br	8005f7c <__alt_data_end+0xfc005f7c>
 8005fe0:	01000804 	movi	r4,32
 8005fe4:	2089c83a 	sub	r4,r4,r2
 8005fe8:	1908983a 	sll	r4,r3,r4
 8005fec:	d9400117 	ldw	r5,4(sp)
 8005ff0:	1886d83a 	srl	r3,r3,r2
 8005ff4:	2148b03a 	or	r4,r4,r5
 8005ff8:	99000515 	stw	r4,20(r19)
 8005ffc:	d8c00015 	stw	r3,0(sp)
 8006000:	003fca06 	br	8005f2c <__alt_data_end+0xfc005f2c>

08006004 <__ratio>:
 8006004:	defff904 	addi	sp,sp,-28
 8006008:	dc400315 	stw	r17,12(sp)
 800600c:	2823883a 	mov	r17,r5
 8006010:	d9400104 	addi	r5,sp,4
 8006014:	dfc00615 	stw	ra,24(sp)
 8006018:	dcc00515 	stw	r19,20(sp)
 800601c:	dc800415 	stw	r18,16(sp)
 8006020:	2027883a 	mov	r19,r4
 8006024:	dc000215 	stw	r16,8(sp)
 8006028:	8005dac0 	call	8005dac <__b2d>
 800602c:	d80b883a 	mov	r5,sp
 8006030:	8809883a 	mov	r4,r17
 8006034:	1025883a 	mov	r18,r2
 8006038:	1821883a 	mov	r16,r3
 800603c:	8005dac0 	call	8005dac <__b2d>
 8006040:	8a000417 	ldw	r8,16(r17)
 8006044:	99000417 	ldw	r4,16(r19)
 8006048:	d9400117 	ldw	r5,4(sp)
 800604c:	2209c83a 	sub	r4,r4,r8
 8006050:	2010917a 	slli	r8,r4,5
 8006054:	d9000017 	ldw	r4,0(sp)
 8006058:	2909c83a 	sub	r4,r5,r4
 800605c:	4109883a 	add	r4,r8,r4
 8006060:	01000e0e 	bge	zero,r4,800609c <__ratio+0x98>
 8006064:	2008953a 	slli	r4,r4,20
 8006068:	2421883a 	add	r16,r4,r16
 800606c:	100d883a 	mov	r6,r2
 8006070:	180f883a 	mov	r7,r3
 8006074:	9009883a 	mov	r4,r18
 8006078:	800b883a 	mov	r5,r16
 800607c:	8009ba40 	call	8009ba4 <__divdf3>
 8006080:	dfc00617 	ldw	ra,24(sp)
 8006084:	dcc00517 	ldw	r19,20(sp)
 8006088:	dc800417 	ldw	r18,16(sp)
 800608c:	dc400317 	ldw	r17,12(sp)
 8006090:	dc000217 	ldw	r16,8(sp)
 8006094:	dec00704 	addi	sp,sp,28
 8006098:	f800283a 	ret
 800609c:	2008953a 	slli	r4,r4,20
 80060a0:	1907c83a 	sub	r3,r3,r4
 80060a4:	003ff106 	br	800606c <__alt_data_end+0xfc00606c>

080060a8 <_mprec_log10>:
 80060a8:	defffe04 	addi	sp,sp,-8
 80060ac:	dc000015 	stw	r16,0(sp)
 80060b0:	dfc00115 	stw	ra,4(sp)
 80060b4:	008005c4 	movi	r2,23
 80060b8:	2021883a 	mov	r16,r4
 80060bc:	11000d0e 	bge	r2,r4,80060f4 <_mprec_log10+0x4c>
 80060c0:	0005883a 	mov	r2,zero
 80060c4:	00cffc34 	movhi	r3,16368
 80060c8:	843fffc4 	addi	r16,r16,-1
 80060cc:	000d883a 	mov	r6,zero
 80060d0:	01d00934 	movhi	r7,16420
 80060d4:	1009883a 	mov	r4,r2
 80060d8:	180b883a 	mov	r5,r3
 80060dc:	800a7cc0 	call	800a7cc <__muldf3>
 80060e0:	803ff91e 	bne	r16,zero,80060c8 <__alt_data_end+0xfc0060c8>
 80060e4:	dfc00117 	ldw	ra,4(sp)
 80060e8:	dc000017 	ldw	r16,0(sp)
 80060ec:	dec00204 	addi	sp,sp,8
 80060f0:	f800283a 	ret
 80060f4:	202090fa 	slli	r16,r4,3
 80060f8:	00820074 	movhi	r2,2049
 80060fc:	10b81704 	addi	r2,r2,-8100
 8006100:	1421883a 	add	r16,r2,r16
 8006104:	80800017 	ldw	r2,0(r16)
 8006108:	80c00117 	ldw	r3,4(r16)
 800610c:	dfc00117 	ldw	ra,4(sp)
 8006110:	dc000017 	ldw	r16,0(sp)
 8006114:	dec00204 	addi	sp,sp,8
 8006118:	f800283a 	ret

0800611c <__copybits>:
 800611c:	297fffc4 	addi	r5,r5,-1
 8006120:	280fd17a 	srai	r7,r5,5
 8006124:	30c00417 	ldw	r3,16(r6)
 8006128:	30800504 	addi	r2,r6,20
 800612c:	39c00044 	addi	r7,r7,1
 8006130:	18c7883a 	add	r3,r3,r3
 8006134:	39cf883a 	add	r7,r7,r7
 8006138:	18c7883a 	add	r3,r3,r3
 800613c:	39cf883a 	add	r7,r7,r7
 8006140:	10c7883a 	add	r3,r2,r3
 8006144:	21cf883a 	add	r7,r4,r7
 8006148:	10c00d2e 	bgeu	r2,r3,8006180 <__copybits+0x64>
 800614c:	200b883a 	mov	r5,r4
 8006150:	12000017 	ldw	r8,0(r2)
 8006154:	29400104 	addi	r5,r5,4
 8006158:	10800104 	addi	r2,r2,4
 800615c:	2a3fff15 	stw	r8,-4(r5)
 8006160:	10fffb36 	bltu	r2,r3,8006150 <__alt_data_end+0xfc006150>
 8006164:	1985c83a 	sub	r2,r3,r6
 8006168:	10bffac4 	addi	r2,r2,-21
 800616c:	1004d0ba 	srli	r2,r2,2
 8006170:	10800044 	addi	r2,r2,1
 8006174:	1085883a 	add	r2,r2,r2
 8006178:	1085883a 	add	r2,r2,r2
 800617c:	2089883a 	add	r4,r4,r2
 8006180:	21c0032e 	bgeu	r4,r7,8006190 <__copybits+0x74>
 8006184:	20000015 	stw	zero,0(r4)
 8006188:	21000104 	addi	r4,r4,4
 800618c:	21fffd36 	bltu	r4,r7,8006184 <__alt_data_end+0xfc006184>
 8006190:	f800283a 	ret

08006194 <__any_on>:
 8006194:	20c00417 	ldw	r3,16(r4)
 8006198:	2805d17a 	srai	r2,r5,5
 800619c:	21000504 	addi	r4,r4,20
 80061a0:	18800d0e 	bge	r3,r2,80061d8 <__any_on+0x44>
 80061a4:	18c7883a 	add	r3,r3,r3
 80061a8:	18c7883a 	add	r3,r3,r3
 80061ac:	20c7883a 	add	r3,r4,r3
 80061b0:	20c0192e 	bgeu	r4,r3,8006218 <__any_on+0x84>
 80061b4:	18bfff17 	ldw	r2,-4(r3)
 80061b8:	18ffff04 	addi	r3,r3,-4
 80061bc:	1000041e 	bne	r2,zero,80061d0 <__any_on+0x3c>
 80061c0:	20c0142e 	bgeu	r4,r3,8006214 <__any_on+0x80>
 80061c4:	18ffff04 	addi	r3,r3,-4
 80061c8:	19400017 	ldw	r5,0(r3)
 80061cc:	283ffc26 	beq	r5,zero,80061c0 <__alt_data_end+0xfc0061c0>
 80061d0:	00800044 	movi	r2,1
 80061d4:	f800283a 	ret
 80061d8:	10c00a0e 	bge	r2,r3,8006204 <__any_on+0x70>
 80061dc:	1085883a 	add	r2,r2,r2
 80061e0:	1085883a 	add	r2,r2,r2
 80061e4:	294007cc 	andi	r5,r5,31
 80061e8:	2087883a 	add	r3,r4,r2
 80061ec:	283ff026 	beq	r5,zero,80061b0 <__alt_data_end+0xfc0061b0>
 80061f0:	19800017 	ldw	r6,0(r3)
 80061f4:	3144d83a 	srl	r2,r6,r5
 80061f8:	114a983a 	sll	r5,r2,r5
 80061fc:	317ff41e 	bne	r6,r5,80061d0 <__alt_data_end+0xfc0061d0>
 8006200:	003feb06 	br	80061b0 <__alt_data_end+0xfc0061b0>
 8006204:	1085883a 	add	r2,r2,r2
 8006208:	1085883a 	add	r2,r2,r2
 800620c:	2087883a 	add	r3,r4,r2
 8006210:	003fe706 	br	80061b0 <__alt_data_end+0xfc0061b0>
 8006214:	f800283a 	ret
 8006218:	0005883a 	mov	r2,zero
 800621c:	f800283a 	ret

08006220 <__fpclassifyd>:
 8006220:	00a00034 	movhi	r2,32768
 8006224:	10bfffc4 	addi	r2,r2,-1
 8006228:	2884703a 	and	r2,r5,r2
 800622c:	10000726 	beq	r2,zero,800624c <__fpclassifyd+0x2c>
 8006230:	00fffc34 	movhi	r3,65520
 8006234:	019ff834 	movhi	r6,32736
 8006238:	28c7883a 	add	r3,r5,r3
 800623c:	31bfffc4 	addi	r6,r6,-1
 8006240:	30c00536 	bltu	r6,r3,8006258 <__fpclassifyd+0x38>
 8006244:	00800104 	movi	r2,4
 8006248:	f800283a 	ret
 800624c:	2000021e 	bne	r4,zero,8006258 <__fpclassifyd+0x38>
 8006250:	00800084 	movi	r2,2
 8006254:	f800283a 	ret
 8006258:	00dffc34 	movhi	r3,32752
 800625c:	019ff834 	movhi	r6,32736
 8006260:	28cb883a 	add	r5,r5,r3
 8006264:	31bfffc4 	addi	r6,r6,-1
 8006268:	317ff62e 	bgeu	r6,r5,8006244 <__alt_data_end+0xfc006244>
 800626c:	01400434 	movhi	r5,16
 8006270:	297fffc4 	addi	r5,r5,-1
 8006274:	28800236 	bltu	r5,r2,8006280 <__fpclassifyd+0x60>
 8006278:	008000c4 	movi	r2,3
 800627c:	f800283a 	ret
 8006280:	10c00226 	beq	r2,r3,800628c <__fpclassifyd+0x6c>
 8006284:	0005883a 	mov	r2,zero
 8006288:	f800283a 	ret
 800628c:	2005003a 	cmpeq	r2,r4,zero
 8006290:	f800283a 	ret

08006294 <_sbrk_r>:
 8006294:	defffd04 	addi	sp,sp,-12
 8006298:	dc000015 	stw	r16,0(sp)
 800629c:	04020074 	movhi	r16,2049
 80062a0:	dc400115 	stw	r17,4(sp)
 80062a4:	84078c04 	addi	r16,r16,7728
 80062a8:	2023883a 	mov	r17,r4
 80062ac:	2809883a 	mov	r4,r5
 80062b0:	dfc00215 	stw	ra,8(sp)
 80062b4:	80000015 	stw	zero,0(r16)
 80062b8:	800bd4c0 	call	800bd4c <sbrk>
 80062bc:	00ffffc4 	movi	r3,-1
 80062c0:	10c00526 	beq	r2,r3,80062d8 <_sbrk_r+0x44>
 80062c4:	dfc00217 	ldw	ra,8(sp)
 80062c8:	dc400117 	ldw	r17,4(sp)
 80062cc:	dc000017 	ldw	r16,0(sp)
 80062d0:	dec00304 	addi	sp,sp,12
 80062d4:	f800283a 	ret
 80062d8:	80c00017 	ldw	r3,0(r16)
 80062dc:	183ff926 	beq	r3,zero,80062c4 <__alt_data_end+0xfc0062c4>
 80062e0:	88c00015 	stw	r3,0(r17)
 80062e4:	003ff706 	br	80062c4 <__alt_data_end+0xfc0062c4>

080062e8 <strcmp>:
 80062e8:	2144b03a 	or	r2,r4,r5
 80062ec:	108000cc 	andi	r2,r2,3
 80062f0:	1000171e 	bne	r2,zero,8006350 <strcmp+0x68>
 80062f4:	20800017 	ldw	r2,0(r4)
 80062f8:	28c00017 	ldw	r3,0(r5)
 80062fc:	10c0141e 	bne	r2,r3,8006350 <strcmp+0x68>
 8006300:	027fbff4 	movhi	r9,65279
 8006304:	4a7fbfc4 	addi	r9,r9,-257
 8006308:	0086303a 	nor	r3,zero,r2
 800630c:	02202074 	movhi	r8,32897
 8006310:	1245883a 	add	r2,r2,r9
 8006314:	42202004 	addi	r8,r8,-32640
 8006318:	10c4703a 	and	r2,r2,r3
 800631c:	1204703a 	and	r2,r2,r8
 8006320:	10000226 	beq	r2,zero,800632c <strcmp+0x44>
 8006324:	00002306 	br	80063b4 <strcmp+0xcc>
 8006328:	1000221e 	bne	r2,zero,80063b4 <strcmp+0xcc>
 800632c:	21000104 	addi	r4,r4,4
 8006330:	20c00017 	ldw	r3,0(r4)
 8006334:	29400104 	addi	r5,r5,4
 8006338:	29800017 	ldw	r6,0(r5)
 800633c:	1a4f883a 	add	r7,r3,r9
 8006340:	00c4303a 	nor	r2,zero,r3
 8006344:	3884703a 	and	r2,r7,r2
 8006348:	1204703a 	and	r2,r2,r8
 800634c:	19bff626 	beq	r3,r6,8006328 <__alt_data_end+0xfc006328>
 8006350:	20800003 	ldbu	r2,0(r4)
 8006354:	10c03fcc 	andi	r3,r2,255
 8006358:	18c0201c 	xori	r3,r3,128
 800635c:	18ffe004 	addi	r3,r3,-128
 8006360:	18000c26 	beq	r3,zero,8006394 <strcmp+0xac>
 8006364:	29800007 	ldb	r6,0(r5)
 8006368:	19800326 	beq	r3,r6,8006378 <strcmp+0x90>
 800636c:	00001306 	br	80063bc <strcmp+0xd4>
 8006370:	29800007 	ldb	r6,0(r5)
 8006374:	11800b1e 	bne	r2,r6,80063a4 <strcmp+0xbc>
 8006378:	21000044 	addi	r4,r4,1
 800637c:	20c00003 	ldbu	r3,0(r4)
 8006380:	29400044 	addi	r5,r5,1
 8006384:	18803fcc 	andi	r2,r3,255
 8006388:	1080201c 	xori	r2,r2,128
 800638c:	10bfe004 	addi	r2,r2,-128
 8006390:	103ff71e 	bne	r2,zero,8006370 <__alt_data_end+0xfc006370>
 8006394:	0007883a 	mov	r3,zero
 8006398:	28800003 	ldbu	r2,0(r5)
 800639c:	1885c83a 	sub	r2,r3,r2
 80063a0:	f800283a 	ret
 80063a4:	28800003 	ldbu	r2,0(r5)
 80063a8:	18c03fcc 	andi	r3,r3,255
 80063ac:	1885c83a 	sub	r2,r3,r2
 80063b0:	f800283a 	ret
 80063b4:	0005883a 	mov	r2,zero
 80063b8:	f800283a 	ret
 80063bc:	10c03fcc 	andi	r3,r2,255
 80063c0:	003ff506 	br	8006398 <__alt_data_end+0xfc006398>

080063c4 <__ssprint_r>:
 80063c4:	30800217 	ldw	r2,8(r6)
 80063c8:	defff604 	addi	sp,sp,-40
 80063cc:	dc800215 	stw	r18,8(sp)
 80063d0:	dfc00915 	stw	ra,36(sp)
 80063d4:	df000815 	stw	fp,32(sp)
 80063d8:	ddc00715 	stw	r23,28(sp)
 80063dc:	dd800615 	stw	r22,24(sp)
 80063e0:	dd400515 	stw	r21,20(sp)
 80063e4:	dd000415 	stw	r20,16(sp)
 80063e8:	dcc00315 	stw	r19,12(sp)
 80063ec:	dc400115 	stw	r17,4(sp)
 80063f0:	dc000015 	stw	r16,0(sp)
 80063f4:	3025883a 	mov	r18,r6
 80063f8:	10005826 	beq	r2,zero,800655c <__ssprint_r+0x198>
 80063fc:	2027883a 	mov	r19,r4
 8006400:	35c00017 	ldw	r23,0(r6)
 8006404:	29000017 	ldw	r4,0(r5)
 8006408:	28800217 	ldw	r2,8(r5)
 800640c:	2823883a 	mov	r17,r5
 8006410:	0039883a 	mov	fp,zero
 8006414:	0021883a 	mov	r16,zero
 8006418:	80003926 	beq	r16,zero,8006500 <__ssprint_r+0x13c>
 800641c:	102b883a 	mov	r21,r2
 8006420:	102d883a 	mov	r22,r2
 8006424:	80803a36 	bltu	r16,r2,8006510 <__ssprint_r+0x14c>
 8006428:	88c0030b 	ldhu	r3,12(r17)
 800642c:	1881200c 	andi	r2,r3,1152
 8006430:	10002626 	beq	r2,zero,80064cc <__ssprint_r+0x108>
 8006434:	88800517 	ldw	r2,20(r17)
 8006438:	89400417 	ldw	r5,16(r17)
 800643c:	81800044 	addi	r6,r16,1
 8006440:	108f883a 	add	r7,r2,r2
 8006444:	3885883a 	add	r2,r7,r2
 8006448:	100ed7fa 	srli	r7,r2,31
 800644c:	216dc83a 	sub	r22,r4,r5
 8006450:	3589883a 	add	r4,r6,r22
 8006454:	3885883a 	add	r2,r7,r2
 8006458:	102bd07a 	srai	r21,r2,1
 800645c:	a80d883a 	mov	r6,r21
 8006460:	a900022e 	bgeu	r21,r4,800646c <__ssprint_r+0xa8>
 8006464:	202b883a 	mov	r21,r4
 8006468:	200d883a 	mov	r6,r4
 800646c:	18c1000c 	andi	r3,r3,1024
 8006470:	18002a26 	beq	r3,zero,800651c <__ssprint_r+0x158>
 8006474:	300b883a 	mov	r5,r6
 8006478:	9809883a 	mov	r4,r19
 800647c:	80047300 	call	8004730 <_malloc_r>
 8006480:	1029883a 	mov	r20,r2
 8006484:	10002c26 	beq	r2,zero,8006538 <__ssprint_r+0x174>
 8006488:	89400417 	ldw	r5,16(r17)
 800648c:	b00d883a 	mov	r6,r22
 8006490:	1009883a 	mov	r4,r2
 8006494:	80050200 	call	8005020 <memcpy>
 8006498:	8880030b 	ldhu	r2,12(r17)
 800649c:	00fedfc4 	movi	r3,-1153
 80064a0:	10c4703a 	and	r2,r2,r3
 80064a4:	10802014 	ori	r2,r2,128
 80064a8:	8880030d 	sth	r2,12(r17)
 80064ac:	a589883a 	add	r4,r20,r22
 80064b0:	adadc83a 	sub	r22,r21,r22
 80064b4:	8d400515 	stw	r21,20(r17)
 80064b8:	8d800215 	stw	r22,8(r17)
 80064bc:	8d000415 	stw	r20,16(r17)
 80064c0:	89000015 	stw	r4,0(r17)
 80064c4:	802b883a 	mov	r21,r16
 80064c8:	802d883a 	mov	r22,r16
 80064cc:	b00d883a 	mov	r6,r22
 80064d0:	e00b883a 	mov	r5,fp
 80064d4:	8007e440 	call	8007e44 <memmove>
 80064d8:	88800217 	ldw	r2,8(r17)
 80064dc:	89000017 	ldw	r4,0(r17)
 80064e0:	90c00217 	ldw	r3,8(r18)
 80064e4:	1545c83a 	sub	r2,r2,r21
 80064e8:	2589883a 	add	r4,r4,r22
 80064ec:	88800215 	stw	r2,8(r17)
 80064f0:	89000015 	stw	r4,0(r17)
 80064f4:	1c21c83a 	sub	r16,r3,r16
 80064f8:	94000215 	stw	r16,8(r18)
 80064fc:	80001726 	beq	r16,zero,800655c <__ssprint_r+0x198>
 8006500:	bf000017 	ldw	fp,0(r23)
 8006504:	bc000117 	ldw	r16,4(r23)
 8006508:	bdc00204 	addi	r23,r23,8
 800650c:	003fc206 	br	8006418 <__alt_data_end+0xfc006418>
 8006510:	802b883a 	mov	r21,r16
 8006514:	802d883a 	mov	r22,r16
 8006518:	003fec06 	br	80064cc <__alt_data_end+0xfc0064cc>
 800651c:	9809883a 	mov	r4,r19
 8006520:	80080c80 	call	80080c8 <_realloc_r>
 8006524:	1029883a 	mov	r20,r2
 8006528:	103fe01e 	bne	r2,zero,80064ac <__alt_data_end+0xfc0064ac>
 800652c:	89400417 	ldw	r5,16(r17)
 8006530:	9809883a 	mov	r4,r19
 8006534:	8007b340 	call	8007b34 <_free_r>
 8006538:	88c0030b 	ldhu	r3,12(r17)
 800653c:	00800304 	movi	r2,12
 8006540:	98800015 	stw	r2,0(r19)
 8006544:	18c01014 	ori	r3,r3,64
 8006548:	88c0030d 	sth	r3,12(r17)
 800654c:	00bfffc4 	movi	r2,-1
 8006550:	90000215 	stw	zero,8(r18)
 8006554:	90000115 	stw	zero,4(r18)
 8006558:	00000206 	br	8006564 <__ssprint_r+0x1a0>
 800655c:	90000115 	stw	zero,4(r18)
 8006560:	0005883a 	mov	r2,zero
 8006564:	dfc00917 	ldw	ra,36(sp)
 8006568:	df000817 	ldw	fp,32(sp)
 800656c:	ddc00717 	ldw	r23,28(sp)
 8006570:	dd800617 	ldw	r22,24(sp)
 8006574:	dd400517 	ldw	r21,20(sp)
 8006578:	dd000417 	ldw	r20,16(sp)
 800657c:	dcc00317 	ldw	r19,12(sp)
 8006580:	dc800217 	ldw	r18,8(sp)
 8006584:	dc400117 	ldw	r17,4(sp)
 8006588:	dc000017 	ldw	r16,0(sp)
 800658c:	dec00a04 	addi	sp,sp,40
 8006590:	f800283a 	ret

08006594 <___svfiprintf_internal_r>:
 8006594:	2880030b 	ldhu	r2,12(r5)
 8006598:	deffc804 	addi	sp,sp,-224
 800659c:	dcc03115 	stw	r19,196(sp)
 80065a0:	dfc03715 	stw	ra,220(sp)
 80065a4:	df003615 	stw	fp,216(sp)
 80065a8:	ddc03515 	stw	r23,212(sp)
 80065ac:	dd803415 	stw	r22,208(sp)
 80065b0:	dd403315 	stw	r21,204(sp)
 80065b4:	dd003215 	stw	r20,200(sp)
 80065b8:	dc803015 	stw	r18,192(sp)
 80065bc:	dc402f15 	stw	r17,188(sp)
 80065c0:	dc002e15 	stw	r16,184(sp)
 80065c4:	d9402315 	stw	r5,140(sp)
 80065c8:	d9002715 	stw	r4,156(sp)
 80065cc:	1080200c 	andi	r2,r2,128
 80065d0:	d9c02415 	stw	r7,144(sp)
 80065d4:	3027883a 	mov	r19,r6
 80065d8:	10000226 	beq	r2,zero,80065e4 <___svfiprintf_internal_r+0x50>
 80065dc:	28800417 	ldw	r2,16(r5)
 80065e0:	10046d26 	beq	r2,zero,8007798 <___svfiprintf_internal_r+0x1204>
 80065e4:	d8801a04 	addi	r2,sp,104
 80065e8:	d8c019c4 	addi	r3,sp,103
 80065ec:	05820074 	movhi	r22,2049
 80065f0:	10c9c83a 	sub	r4,r2,r3
 80065f4:	b5b84904 	addi	r22,r22,-7900
 80065f8:	d8801e15 	stw	r2,120(sp)
 80065fc:	d8c01f15 	stw	r3,124(sp)
 8006600:	dec01a15 	stw	sp,104(sp)
 8006604:	d8001c15 	stw	zero,112(sp)
 8006608:	d8001b15 	stw	zero,108(sp)
 800660c:	d811883a 	mov	r8,sp
 8006610:	d8002915 	stw	zero,164(sp)
 8006614:	d8002615 	stw	zero,152(sp)
 8006618:	d9002c15 	stw	r4,176(sp)
 800661c:	98800007 	ldb	r2,0(r19)
 8006620:	10031426 	beq	r2,zero,8007274 <___svfiprintf_internal_r+0xce0>
 8006624:	00c00944 	movi	r3,37
 8006628:	9825883a 	mov	r18,r19
 800662c:	10c0021e 	bne	r2,r3,8006638 <___svfiprintf_internal_r+0xa4>
 8006630:	00001406 	br	8006684 <___svfiprintf_internal_r+0xf0>
 8006634:	10c00326 	beq	r2,r3,8006644 <___svfiprintf_internal_r+0xb0>
 8006638:	94800044 	addi	r18,r18,1
 800663c:	90800007 	ldb	r2,0(r18)
 8006640:	103ffc1e 	bne	r2,zero,8006634 <__alt_data_end+0xfc006634>
 8006644:	94e1c83a 	sub	r16,r18,r19
 8006648:	80000e26 	beq	r16,zero,8006684 <___svfiprintf_internal_r+0xf0>
 800664c:	d8c01c17 	ldw	r3,112(sp)
 8006650:	d8801b17 	ldw	r2,108(sp)
 8006654:	44c00015 	stw	r19,0(r8)
 8006658:	1c07883a 	add	r3,r3,r16
 800665c:	10800044 	addi	r2,r2,1
 8006660:	d8c01c15 	stw	r3,112(sp)
 8006664:	44000115 	stw	r16,4(r8)
 8006668:	d8801b15 	stw	r2,108(sp)
 800666c:	00c001c4 	movi	r3,7
 8006670:	18835c16 	blt	r3,r2,80073e4 <___svfiprintf_internal_r+0xe50>
 8006674:	42000204 	addi	r8,r8,8
 8006678:	d9402617 	ldw	r5,152(sp)
 800667c:	2c0b883a 	add	r5,r5,r16
 8006680:	d9402615 	stw	r5,152(sp)
 8006684:	90800007 	ldb	r2,0(r18)
 8006688:	1002fc26 	beq	r2,zero,800727c <___svfiprintf_internal_r+0xce8>
 800668c:	0023883a 	mov	r17,zero
 8006690:	00bfffc4 	movi	r2,-1
 8006694:	0021883a 	mov	r16,zero
 8006698:	94c00044 	addi	r19,r18,1
 800669c:	90c00047 	ldb	r3,1(r18)
 80066a0:	dc402105 	stb	r17,132(sp)
 80066a4:	d8001d85 	stb	zero,118(sp)
 80066a8:	002b883a 	mov	r21,zero
 80066ac:	d8802015 	stw	r2,128(sp)
 80066b0:	d8002515 	stw	zero,148(sp)
 80066b4:	04801604 	movi	r18,88
 80066b8:	05000244 	movi	r20,9
 80066bc:	402f883a 	mov	r23,r8
 80066c0:	8023883a 	mov	r17,r16
 80066c4:	9cc00044 	addi	r19,r19,1
 80066c8:	18bff804 	addi	r2,r3,-32
 80066cc:	9081fb36 	bltu	r18,r2,8006ebc <___svfiprintf_internal_r+0x928>
 80066d0:	100490ba 	slli	r2,r2,2
 80066d4:	01020034 	movhi	r4,2048
 80066d8:	2119ba04 	addi	r4,r4,26344
 80066dc:	1105883a 	add	r2,r2,r4
 80066e0:	10800017 	ldw	r2,0(r2)
 80066e4:	1000683a 	jmp	r2
 80066e8:	080068e8 	cmpgeui	zero,at,419
 80066ec:	08006ebc 	xorhi	zero,at,442
 80066f0:	08006ebc 	xorhi	zero,at,442
 80066f4:	080068dc 	xori	zero,at,419
 80066f8:	08006ebc 	xorhi	zero,at,442
 80066fc:	08006ebc 	xorhi	zero,at,442
 8006700:	08006ebc 	xorhi	zero,at,442
 8006704:	08006ebc 	xorhi	zero,at,442
 8006708:	08006ebc 	xorhi	zero,at,442
 800670c:	08006ebc 	xorhi	zero,at,442
 8006710:	0800684c 	andi	zero,at,417
 8006714:	08006a48 	cmpgei	zero,at,425
 8006718:	08006ebc 	xorhi	zero,at,442
 800671c:	08006874 	orhi	zero,at,417
 8006720:	08006ef8 	rdprs	zero,at,443
 8006724:	08006ebc 	xorhi	zero,at,442
 8006728:	08006eec 	andhi	zero,at,443
 800672c:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 8006730:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 8006734:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 8006738:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 800673c:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 8006740:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 8006744:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 8006748:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 800674c:	08006e80 	call	8006e8 <__alt_mem_onchip_memory2_0+0x8006e8>
 8006750:	08006ebc 	xorhi	zero,at,442
 8006754:	08006ebc 	xorhi	zero,at,442
 8006758:	08006ebc 	xorhi	zero,at,442
 800675c:	08006ebc 	xorhi	zero,at,442
 8006760:	08006ebc 	xorhi	zero,at,442
 8006764:	08006ebc 	xorhi	zero,at,442
 8006768:	08006ebc 	xorhi	zero,at,442
 800676c:	08006ebc 	xorhi	zero,at,442
 8006770:	08006ebc 	xorhi	zero,at,442
 8006774:	08006ebc 	xorhi	zero,at,442
 8006778:	08006e04 	addi	zero,at,440
 800677c:	08006ebc 	xorhi	zero,at,442
 8006780:	08006ebc 	xorhi	zero,at,442
 8006784:	08006ebc 	xorhi	zero,at,442
 8006788:	08006ebc 	xorhi	zero,at,442
 800678c:	08006ebc 	xorhi	zero,at,442
 8006790:	08006ebc 	xorhi	zero,at,442
 8006794:	08006ebc 	xorhi	zero,at,442
 8006798:	08006ebc 	xorhi	zero,at,442
 800679c:	08006ebc 	xorhi	zero,at,442
 80067a0:	08006ebc 	xorhi	zero,at,442
 80067a4:	08006fb4 	orhi	zero,at,446
 80067a8:	08006ebc 	xorhi	zero,at,442
 80067ac:	08006ebc 	xorhi	zero,at,442
 80067b0:	08006ebc 	xorhi	zero,at,442
 80067b4:	08006ebc 	xorhi	zero,at,442
 80067b8:	08006ebc 	xorhi	zero,at,442
 80067bc:	08006f40 	call	8006f4 <__alt_mem_onchip_memory2_0+0x8006f4>
 80067c0:	08006ebc 	xorhi	zero,at,442
 80067c4:	08006ebc 	xorhi	zero,at,442
 80067c8:	08006c40 	call	8006c4 <__alt_mem_onchip_memory2_0+0x8006c4>
 80067cc:	08006ebc 	xorhi	zero,at,442
 80067d0:	08006ebc 	xorhi	zero,at,442
 80067d4:	08006ebc 	xorhi	zero,at,442
 80067d8:	08006ebc 	xorhi	zero,at,442
 80067dc:	08006ebc 	xorhi	zero,at,442
 80067e0:	08006ebc 	xorhi	zero,at,442
 80067e4:	08006ebc 	xorhi	zero,at,442
 80067e8:	08006ebc 	xorhi	zero,at,442
 80067ec:	08006ebc 	xorhi	zero,at,442
 80067f0:	08006ebc 	xorhi	zero,at,442
 80067f4:	08006b0c 	andi	zero,at,428
 80067f8:	08006cf0 	cmpltui	zero,at,435
 80067fc:	08006ebc 	xorhi	zero,at,442
 8006800:	08006ebc 	xorhi	zero,at,442
 8006804:	08006ebc 	xorhi	zero,at,442
 8006808:	08006ce4 	muli	zero,at,435
 800680c:	08006cf0 	cmpltui	zero,at,435
 8006810:	08006ebc 	xorhi	zero,at,442
 8006814:	08006ebc 	xorhi	zero,at,442
 8006818:	08006cd0 	cmplti	zero,at,435
 800681c:	08006ebc 	xorhi	zero,at,442
 8006820:	08006c90 	cmplti	zero,at,434
 8006824:	08006a5c 	xori	zero,at,425
 8006828:	08006880 	call	800688 <__alt_mem_onchip_memory2_0+0x800688>
 800682c:	08006df8 	rdprs	zero,at,439
 8006830:	08006ebc 	xorhi	zero,at,442
 8006834:	08006da4 	muli	zero,at,438
 8006838:	08006ebc 	xorhi	zero,at,442
 800683c:	080069c0 	call	80069c <__alt_mem_onchip_memory2_0+0x80069c>
 8006840:	08006ebc 	xorhi	zero,at,442
 8006844:	08006ebc 	xorhi	zero,at,442
 8006848:	0800690c 	andi	zero,at,420
 800684c:	d9002417 	ldw	r4,144(sp)
 8006850:	d9402417 	ldw	r5,144(sp)
 8006854:	21000017 	ldw	r4,0(r4)
 8006858:	28800104 	addi	r2,r5,4
 800685c:	d9002515 	stw	r4,148(sp)
 8006860:	20032b0e 	bge	r4,zero,8007510 <___svfiprintf_internal_r+0xf7c>
 8006864:	d8c02517 	ldw	r3,148(sp)
 8006868:	d8802415 	stw	r2,144(sp)
 800686c:	00c7c83a 	sub	r3,zero,r3
 8006870:	d8c02515 	stw	r3,148(sp)
 8006874:	8c400114 	ori	r17,r17,4
 8006878:	98c00007 	ldb	r3,0(r19)
 800687c:	003f9106 	br	80066c4 <__alt_data_end+0xfc0066c4>
 8006880:	00800c04 	movi	r2,48
 8006884:	d9402417 	ldw	r5,144(sp)
 8006888:	d9002017 	ldw	r4,128(sp)
 800688c:	d8801d05 	stb	r2,116(sp)
 8006890:	00801e04 	movi	r2,120
 8006894:	d8801d45 	stb	r2,117(sp)
 8006898:	d8001d85 	stb	zero,118(sp)
 800689c:	b811883a 	mov	r8,r23
 80068a0:	28c00104 	addi	r3,r5,4
 80068a4:	2c800017 	ldw	r18,0(r5)
 80068a8:	0029883a 	mov	r20,zero
 80068ac:	88800094 	ori	r2,r17,2
 80068b0:	20036316 	blt	r4,zero,8007640 <___svfiprintf_internal_r+0x10ac>
 80068b4:	00bfdfc4 	movi	r2,-129
 80068b8:	88a0703a 	and	r16,r17,r2
 80068bc:	d8c02415 	stw	r3,144(sp)
 80068c0:	84000094 	ori	r16,r16,2
 80068c4:	90031c26 	beq	r18,zero,8007538 <___svfiprintf_internal_r+0xfa4>
 80068c8:	01420074 	movhi	r5,2049
 80068cc:	2977e804 	addi	r5,r5,-8288
 80068d0:	002b883a 	mov	r21,zero
 80068d4:	d9402915 	stw	r5,164(sp)
 80068d8:	00002906 	br	8006980 <___svfiprintf_internal_r+0x3ec>
 80068dc:	8c400054 	ori	r17,r17,1
 80068e0:	98c00007 	ldb	r3,0(r19)
 80068e4:	003f7706 	br	80066c4 <__alt_data_end+0xfc0066c4>
 80068e8:	a8803fcc 	andi	r2,r21,255
 80068ec:	1080201c 	xori	r2,r2,128
 80068f0:	10bfe004 	addi	r2,r2,-128
 80068f4:	10032a1e 	bne	r2,zero,80075a0 <___svfiprintf_internal_r+0x100c>
 80068f8:	00c00044 	movi	r3,1
 80068fc:	d8c02105 	stb	r3,132(sp)
 8006900:	05400804 	movi	r21,32
 8006904:	98c00007 	ldb	r3,0(r19)
 8006908:	003f6e06 	br	80066c4 <__alt_data_end+0xfc0066c4>
 800690c:	8821883a 	mov	r16,r17
 8006910:	dc402103 	ldbu	r17,132(sp)
 8006914:	b811883a 	mov	r8,r23
 8006918:	8c403fcc 	andi	r17,r17,255
 800691c:	8803f01e 	bne	r17,zero,80078e0 <___svfiprintf_internal_r+0x134c>
 8006920:	00820074 	movhi	r2,2049
 8006924:	10b7e804 	addi	r2,r2,-8288
 8006928:	d8802915 	stw	r2,164(sp)
 800692c:	8080080c 	andi	r2,r16,32
 8006930:	1000cd26 	beq	r2,zero,8006c68 <___svfiprintf_internal_r+0x6d4>
 8006934:	d9002417 	ldw	r4,144(sp)
 8006938:	24800017 	ldw	r18,0(r4)
 800693c:	25000117 	ldw	r20,4(r4)
 8006940:	21000204 	addi	r4,r4,8
 8006944:	d9002415 	stw	r4,144(sp)
 8006948:	8080004c 	andi	r2,r16,1
 800694c:	1002c726 	beq	r2,zero,800746c <___svfiprintf_internal_r+0xed8>
 8006950:	9504b03a 	or	r2,r18,r20
 8006954:	1003061e 	bne	r2,zero,8007570 <___svfiprintf_internal_r+0xfdc>
 8006958:	d9002017 	ldw	r4,128(sp)
 800695c:	d8001d85 	stb	zero,118(sp)
 8006960:	20033e16 	blt	r4,zero,800765c <___svfiprintf_internal_r+0x10c8>
 8006964:	00bfdfc4 	movi	r2,-129
 8006968:	80a0703a 	and	r16,r16,r2
 800696c:	d9402017 	ldw	r5,128(sp)
 8006970:	002b883a 	mov	r21,zero
 8006974:	28002826 	beq	r5,zero,8006a18 <___svfiprintf_internal_r+0x484>
 8006978:	0025883a 	mov	r18,zero
 800697c:	0029883a 	mov	r20,zero
 8006980:	d9002917 	ldw	r4,164(sp)
 8006984:	dc401a04 	addi	r17,sp,104
 8006988:	908003cc 	andi	r2,r18,15
 800698c:	a006973a 	slli	r3,r20,28
 8006990:	2085883a 	add	r2,r4,r2
 8006994:	9024d13a 	srli	r18,r18,4
 8006998:	10800003 	ldbu	r2,0(r2)
 800699c:	a028d13a 	srli	r20,r20,4
 80069a0:	8c7fffc4 	addi	r17,r17,-1
 80069a4:	1ca4b03a 	or	r18,r3,r18
 80069a8:	88800005 	stb	r2,0(r17)
 80069ac:	9504b03a 	or	r2,r18,r20
 80069b0:	103ff51e 	bne	r2,zero,8006988 <__alt_data_end+0xfc006988>
 80069b4:	d8801e17 	ldw	r2,120(sp)
 80069b8:	1469c83a 	sub	r20,r2,r17
 80069bc:	00001906 	br	8006a24 <___svfiprintf_internal_r+0x490>
 80069c0:	8821883a 	mov	r16,r17
 80069c4:	dc402103 	ldbu	r17,132(sp)
 80069c8:	b811883a 	mov	r8,r23
 80069cc:	8c403fcc 	andi	r17,r17,255
 80069d0:	8803d01e 	bne	r17,zero,8007914 <___svfiprintf_internal_r+0x1380>
 80069d4:	8080080c 	andi	r2,r16,32
 80069d8:	10016126 	beq	r2,zero,8006f60 <___svfiprintf_internal_r+0x9cc>
 80069dc:	d9002417 	ldw	r4,144(sp)
 80069e0:	d9402017 	ldw	r5,128(sp)
 80069e4:	d8001d85 	stb	zero,118(sp)
 80069e8:	20c00204 	addi	r3,r4,8
 80069ec:	24800017 	ldw	r18,0(r4)
 80069f0:	25000117 	ldw	r20,4(r4)
 80069f4:	28030f16 	blt	r5,zero,8007634 <___svfiprintf_internal_r+0x10a0>
 80069f8:	013fdfc4 	movi	r4,-129
 80069fc:	9504b03a 	or	r2,r18,r20
 8006a00:	d8c02415 	stw	r3,144(sp)
 8006a04:	8120703a 	and	r16,r16,r4
 8006a08:	002b883a 	mov	r21,zero
 8006a0c:	1000cd1e 	bne	r2,zero,8006d44 <___svfiprintf_internal_r+0x7b0>
 8006a10:	d8c02017 	ldw	r3,128(sp)
 8006a14:	1803141e 	bne	r3,zero,8007668 <___svfiprintf_internal_r+0x10d4>
 8006a18:	d8002015 	stw	zero,128(sp)
 8006a1c:	0029883a 	mov	r20,zero
 8006a20:	dc401a04 	addi	r17,sp,104
 8006a24:	dc802017 	ldw	r18,128(sp)
 8006a28:	9500010e 	bge	r18,r20,8006a30 <___svfiprintf_internal_r+0x49c>
 8006a2c:	a025883a 	mov	r18,r20
 8006a30:	ad403fcc 	andi	r21,r21,255
 8006a34:	ad40201c 	xori	r21,r21,128
 8006a38:	ad7fe004 	addi	r21,r21,-128
 8006a3c:	a8003f26 	beq	r21,zero,8006b3c <___svfiprintf_internal_r+0x5a8>
 8006a40:	94800044 	addi	r18,r18,1
 8006a44:	00003d06 	br	8006b3c <___svfiprintf_internal_r+0x5a8>
 8006a48:	00c00044 	movi	r3,1
 8006a4c:	d8c02105 	stb	r3,132(sp)
 8006a50:	05400ac4 	movi	r21,43
 8006a54:	98c00007 	ldb	r3,0(r19)
 8006a58:	003f1a06 	br	80066c4 <__alt_data_end+0xfc0066c4>
 8006a5c:	8821883a 	mov	r16,r17
 8006a60:	dc402103 	ldbu	r17,132(sp)
 8006a64:	b811883a 	mov	r8,r23
 8006a68:	8c403fcc 	andi	r17,r17,255
 8006a6c:	8803a71e 	bne	r17,zero,800790c <___svfiprintf_internal_r+0x1378>
 8006a70:	8080080c 	andi	r2,r16,32
 8006a74:	10015726 	beq	r2,zero,8006fd4 <___svfiprintf_internal_r+0xa40>
 8006a78:	d8c02417 	ldw	r3,144(sp)
 8006a7c:	d9002017 	ldw	r4,128(sp)
 8006a80:	d8001d85 	stb	zero,118(sp)
 8006a84:	18800204 	addi	r2,r3,8
 8006a88:	1c800017 	ldw	r18,0(r3)
 8006a8c:	1d000117 	ldw	r20,4(r3)
 8006a90:	2002db16 	blt	r4,zero,8007600 <___svfiprintf_internal_r+0x106c>
 8006a94:	013fdfc4 	movi	r4,-129
 8006a98:	9506b03a 	or	r3,r18,r20
 8006a9c:	d8802415 	stw	r2,144(sp)
 8006aa0:	8120703a 	and	r16,r16,r4
 8006aa4:	18015826 	beq	r3,zero,8007008 <___svfiprintf_internal_r+0xa74>
 8006aa8:	002b883a 	mov	r21,zero
 8006aac:	dc401a04 	addi	r17,sp,104
 8006ab0:	9006d0fa 	srli	r3,r18,3
 8006ab4:	a008977a 	slli	r4,r20,29
 8006ab8:	a028d0fa 	srli	r20,r20,3
 8006abc:	948001cc 	andi	r18,r18,7
 8006ac0:	90800c04 	addi	r2,r18,48
 8006ac4:	8c7fffc4 	addi	r17,r17,-1
 8006ac8:	20e4b03a 	or	r18,r4,r3
 8006acc:	88800005 	stb	r2,0(r17)
 8006ad0:	9506b03a 	or	r3,r18,r20
 8006ad4:	183ff61e 	bne	r3,zero,8006ab0 <__alt_data_end+0xfc006ab0>
 8006ad8:	80c0004c 	andi	r3,r16,1
 8006adc:	18028926 	beq	r3,zero,8007504 <___svfiprintf_internal_r+0xf70>
 8006ae0:	10803fcc 	andi	r2,r2,255
 8006ae4:	1080201c 	xori	r2,r2,128
 8006ae8:	10bfe004 	addi	r2,r2,-128
 8006aec:	00c00c04 	movi	r3,48
 8006af0:	10ffb026 	beq	r2,r3,80069b4 <__alt_data_end+0xfc0069b4>
 8006af4:	88ffffc5 	stb	r3,-1(r17)
 8006af8:	d8c01e17 	ldw	r3,120(sp)
 8006afc:	88bfffc4 	addi	r2,r17,-1
 8006b00:	1023883a 	mov	r17,r2
 8006b04:	18a9c83a 	sub	r20,r3,r2
 8006b08:	003fc606 	br	8006a24 <__alt_data_end+0xfc006a24>
 8006b0c:	d8c02417 	ldw	r3,144(sp)
 8006b10:	04800044 	movi	r18,1
 8006b14:	8821883a 	mov	r16,r17
 8006b18:	18800017 	ldw	r2,0(r3)
 8006b1c:	18c00104 	addi	r3,r3,4
 8006b20:	b811883a 	mov	r8,r23
 8006b24:	d8001d85 	stb	zero,118(sp)
 8006b28:	d8801005 	stb	r2,64(sp)
 8006b2c:	d8c02415 	stw	r3,144(sp)
 8006b30:	9029883a 	mov	r20,r18
 8006b34:	dc401004 	addi	r17,sp,64
 8006b38:	d8002015 	stw	zero,128(sp)
 8006b3c:	80c0008c 	andi	r3,r16,2
 8006b40:	d8c02115 	stw	r3,132(sp)
 8006b44:	18000126 	beq	r3,zero,8006b4c <___svfiprintf_internal_r+0x5b8>
 8006b48:	94800084 	addi	r18,r18,2
 8006b4c:	80c0210c 	andi	r3,r16,132
 8006b50:	d8c02215 	stw	r3,136(sp)
 8006b54:	1801321e 	bne	r3,zero,8007020 <___svfiprintf_internal_r+0xa8c>
 8006b58:	d9002517 	ldw	r4,148(sp)
 8006b5c:	24b9c83a 	sub	fp,r4,r18
 8006b60:	07012f0e 	bge	zero,fp,8007020 <___svfiprintf_internal_r+0xa8c>
 8006b64:	02400404 	movi	r9,16
 8006b68:	d8c01c17 	ldw	r3,112(sp)
 8006b6c:	d8801b17 	ldw	r2,108(sp)
 8006b70:	4f03250e 	bge	r9,fp,8007808 <___svfiprintf_internal_r+0x1274>
 8006b74:	01020074 	movhi	r4,2049
 8006b78:	21384d04 	addi	r4,r4,-7884
 8006b7c:	dc002a15 	stw	r16,168(sp)
 8006b80:	dc402b15 	stw	r17,172(sp)
 8006b84:	d9002815 	stw	r4,160(sp)
 8006b88:	e023883a 	mov	r17,fp
 8006b8c:	482f883a 	mov	r23,r9
 8006b90:	9839883a 	mov	fp,r19
 8006b94:	054001c4 	movi	r21,7
 8006b98:	9027883a 	mov	r19,r18
 8006b9c:	dc002717 	ldw	r16,156(sp)
 8006ba0:	dc802317 	ldw	r18,140(sp)
 8006ba4:	00000306 	br	8006bb4 <___svfiprintf_internal_r+0x620>
 8006ba8:	8c7ffc04 	addi	r17,r17,-16
 8006bac:	42000204 	addi	r8,r8,8
 8006bb0:	bc40130e 	bge	r23,r17,8006c00 <___svfiprintf_internal_r+0x66c>
 8006bb4:	01420074 	movhi	r5,2049
 8006bb8:	18c00404 	addi	r3,r3,16
 8006bbc:	10800044 	addi	r2,r2,1
 8006bc0:	29784d04 	addi	r5,r5,-7884
 8006bc4:	41400015 	stw	r5,0(r8)
 8006bc8:	45c00115 	stw	r23,4(r8)
 8006bcc:	d8c01c15 	stw	r3,112(sp)
 8006bd0:	d8801b15 	stw	r2,108(sp)
 8006bd4:	a8bff40e 	bge	r21,r2,8006ba8 <__alt_data_end+0xfc006ba8>
 8006bd8:	d9801a04 	addi	r6,sp,104
 8006bdc:	900b883a 	mov	r5,r18
 8006be0:	8009883a 	mov	r4,r16
 8006be4:	80063c40 	call	80063c4 <__ssprint_r>
 8006be8:	1001aa1e 	bne	r2,zero,8007294 <___svfiprintf_internal_r+0xd00>
 8006bec:	8c7ffc04 	addi	r17,r17,-16
 8006bf0:	d8c01c17 	ldw	r3,112(sp)
 8006bf4:	d8801b17 	ldw	r2,108(sp)
 8006bf8:	d811883a 	mov	r8,sp
 8006bfc:	bc7fed16 	blt	r23,r17,8006bb4 <__alt_data_end+0xfc006bb4>
 8006c00:	9825883a 	mov	r18,r19
 8006c04:	dc002a17 	ldw	r16,168(sp)
 8006c08:	e027883a 	mov	r19,fp
 8006c0c:	8839883a 	mov	fp,r17
 8006c10:	dc402b17 	ldw	r17,172(sp)
 8006c14:	d9002817 	ldw	r4,160(sp)
 8006c18:	e0c7883a 	add	r3,fp,r3
 8006c1c:	10800044 	addi	r2,r2,1
 8006c20:	41000015 	stw	r4,0(r8)
 8006c24:	47000115 	stw	fp,4(r8)
 8006c28:	d8c01c15 	stw	r3,112(sp)
 8006c2c:	d8801b15 	stw	r2,108(sp)
 8006c30:	010001c4 	movi	r4,7
 8006c34:	20821616 	blt	r4,r2,8007490 <___svfiprintf_internal_r+0xefc>
 8006c38:	42000204 	addi	r8,r8,8
 8006c3c:	0000fa06 	br	8007028 <___svfiprintf_internal_r+0xa94>
 8006c40:	8821883a 	mov	r16,r17
 8006c44:	dc402103 	ldbu	r17,132(sp)
 8006c48:	b811883a 	mov	r8,r23
 8006c4c:	8c403fcc 	andi	r17,r17,255
 8006c50:	8803361e 	bne	r17,zero,800792c <___svfiprintf_internal_r+0x1398>
 8006c54:	01420074 	movhi	r5,2049
 8006c58:	2977e304 	addi	r5,r5,-8308
 8006c5c:	d9402915 	stw	r5,164(sp)
 8006c60:	8080080c 	andi	r2,r16,32
 8006c64:	103f331e 	bne	r2,zero,8006934 <__alt_data_end+0xfc006934>
 8006c68:	8080040c 	andi	r2,r16,16
 8006c6c:	1002551e 	bne	r2,zero,80075c4 <___svfiprintf_internal_r+0x1030>
 8006c70:	8080100c 	andi	r2,r16,64
 8006c74:	1002a626 	beq	r2,zero,8007710 <___svfiprintf_internal_r+0x117c>
 8006c78:	d8802417 	ldw	r2,144(sp)
 8006c7c:	0029883a 	mov	r20,zero
 8006c80:	1480000b 	ldhu	r18,0(r2)
 8006c84:	10800104 	addi	r2,r2,4
 8006c88:	d8802415 	stw	r2,144(sp)
 8006c8c:	003f2e06 	br	8006948 <__alt_data_end+0xfc006948>
 8006c90:	8821883a 	mov	r16,r17
 8006c94:	dc402103 	ldbu	r17,132(sp)
 8006c98:	b811883a 	mov	r8,r23
 8006c9c:	8c403fcc 	andi	r17,r17,255
 8006ca0:	88030b1e 	bne	r17,zero,80078d0 <___svfiprintf_internal_r+0x133c>
 8006ca4:	8080080c 	andi	r2,r16,32
 8006ca8:	1002271e 	bne	r2,zero,8007548 <___svfiprintf_internal_r+0xfb4>
 8006cac:	8080040c 	andi	r2,r16,16
 8006cb0:	10028e26 	beq	r2,zero,80076ec <___svfiprintf_internal_r+0x1158>
 8006cb4:	d8c02417 	ldw	r3,144(sp)
 8006cb8:	d9002617 	ldw	r4,152(sp)
 8006cbc:	18800017 	ldw	r2,0(r3)
 8006cc0:	18c00104 	addi	r3,r3,4
 8006cc4:	d8c02415 	stw	r3,144(sp)
 8006cc8:	11000015 	stw	r4,0(r2)
 8006ccc:	003e5306 	br	800661c <__alt_data_end+0xfc00661c>
 8006cd0:	98c00007 	ldb	r3,0(r19)
 8006cd4:	01401b04 	movi	r5,108
 8006cd8:	19424f26 	beq	r3,r5,8007618 <___svfiprintf_internal_r+0x1084>
 8006cdc:	8c400414 	ori	r17,r17,16
 8006ce0:	003e7806 	br	80066c4 <__alt_data_end+0xfc0066c4>
 8006ce4:	8c401014 	ori	r17,r17,64
 8006ce8:	98c00007 	ldb	r3,0(r19)
 8006cec:	003e7506 	br	80066c4 <__alt_data_end+0xfc0066c4>
 8006cf0:	8821883a 	mov	r16,r17
 8006cf4:	dc402103 	ldbu	r17,132(sp)
 8006cf8:	b811883a 	mov	r8,r23
 8006cfc:	8c403fcc 	andi	r17,r17,255
 8006d00:	8802fe1e 	bne	r17,zero,80078fc <___svfiprintf_internal_r+0x1368>
 8006d04:	8080080c 	andi	r2,r16,32
 8006d08:	10004626 	beq	r2,zero,8006e24 <___svfiprintf_internal_r+0x890>
 8006d0c:	d9002417 	ldw	r4,144(sp)
 8006d10:	20800117 	ldw	r2,4(r4)
 8006d14:	24800017 	ldw	r18,0(r4)
 8006d18:	21000204 	addi	r4,r4,8
 8006d1c:	d9002415 	stw	r4,144(sp)
 8006d20:	1029883a 	mov	r20,r2
 8006d24:	10004a16 	blt	r2,zero,8006e50 <___svfiprintf_internal_r+0x8bc>
 8006d28:	d9002017 	ldw	r4,128(sp)
 8006d2c:	dd401d83 	ldbu	r21,118(sp)
 8006d30:	2001eb16 	blt	r4,zero,80074e0 <___svfiprintf_internal_r+0xf4c>
 8006d34:	00ffdfc4 	movi	r3,-129
 8006d38:	9504b03a 	or	r2,r18,r20
 8006d3c:	80e0703a 	and	r16,r16,r3
 8006d40:	103f3326 	beq	r2,zero,8006a10 <__alt_data_end+0xfc006a10>
 8006d44:	a0009426 	beq	r20,zero,8006f98 <___svfiprintf_internal_r+0xa04>
 8006d48:	dc401a04 	addi	r17,sp,104
 8006d4c:	402f883a 	mov	r23,r8
 8006d50:	9009883a 	mov	r4,r18
 8006d54:	a00b883a 	mov	r5,r20
 8006d58:	01800284 	movi	r6,10
 8006d5c:	000f883a 	mov	r7,zero
 8006d60:	8008d340 	call	8008d34 <__umoddi3>
 8006d64:	10800c04 	addi	r2,r2,48
 8006d68:	8c7fffc4 	addi	r17,r17,-1
 8006d6c:	9009883a 	mov	r4,r18
 8006d70:	a00b883a 	mov	r5,r20
 8006d74:	88800005 	stb	r2,0(r17)
 8006d78:	01800284 	movi	r6,10
 8006d7c:	000f883a 	mov	r7,zero
 8006d80:	80087380 	call	8008738 <__udivdi3>
 8006d84:	1025883a 	mov	r18,r2
 8006d88:	10c4b03a 	or	r2,r2,r3
 8006d8c:	1829883a 	mov	r20,r3
 8006d90:	103fef1e 	bne	r2,zero,8006d50 <__alt_data_end+0xfc006d50>
 8006d94:	d9001e17 	ldw	r4,120(sp)
 8006d98:	b811883a 	mov	r8,r23
 8006d9c:	2469c83a 	sub	r20,r4,r17
 8006da0:	003f2006 	br	8006a24 <__alt_data_end+0xfc006a24>
 8006da4:	d8802417 	ldw	r2,144(sp)
 8006da8:	8821883a 	mov	r16,r17
 8006dac:	d8001d85 	stb	zero,118(sp)
 8006db0:	14400017 	ldw	r17,0(r2)
 8006db4:	b811883a 	mov	r8,r23
 8006db8:	15c00104 	addi	r23,r2,4
 8006dbc:	88026c26 	beq	r17,zero,8007770 <___svfiprintf_internal_r+0x11dc>
 8006dc0:	d8c02017 	ldw	r3,128(sp)
 8006dc4:	18025f16 	blt	r3,zero,8007744 <___svfiprintf_internal_r+0x11b0>
 8006dc8:	180d883a 	mov	r6,r3
 8006dcc:	000b883a 	mov	r5,zero
 8006dd0:	8809883a 	mov	r4,r17
 8006dd4:	da002d15 	stw	r8,180(sp)
 8006dd8:	8004f3c0 	call	8004f3c <memchr>
 8006ddc:	da002d17 	ldw	r8,180(sp)
 8006de0:	1002a526 	beq	r2,zero,8007878 <___svfiprintf_internal_r+0x12e4>
 8006de4:	1469c83a 	sub	r20,r2,r17
 8006de8:	dd401d83 	ldbu	r21,118(sp)
 8006dec:	ddc02415 	stw	r23,144(sp)
 8006df0:	d8002015 	stw	zero,128(sp)
 8006df4:	003f0b06 	br	8006a24 <__alt_data_end+0xfc006a24>
 8006df8:	8c400814 	ori	r17,r17,32
 8006dfc:	98c00007 	ldb	r3,0(r19)
 8006e00:	003e3006 	br	80066c4 <__alt_data_end+0xfc0066c4>
 8006e04:	8821883a 	mov	r16,r17
 8006e08:	dc402103 	ldbu	r17,132(sp)
 8006e0c:	b811883a 	mov	r8,r23
 8006e10:	8c403fcc 	andi	r17,r17,255
 8006e14:	8802b01e 	bne	r17,zero,80078d8 <___svfiprintf_internal_r+0x1344>
 8006e18:	84000414 	ori	r16,r16,16
 8006e1c:	8080080c 	andi	r2,r16,32
 8006e20:	103fba1e 	bne	r2,zero,8006d0c <__alt_data_end+0xfc006d0c>
 8006e24:	8080040c 	andi	r2,r16,16
 8006e28:	1001df1e 	bne	r2,zero,80075a8 <___svfiprintf_internal_r+0x1014>
 8006e2c:	8080100c 	andi	r2,r16,64
 8006e30:	10023d26 	beq	r2,zero,8007728 <___svfiprintf_internal_r+0x1194>
 8006e34:	d8802417 	ldw	r2,144(sp)
 8006e38:	1480000f 	ldh	r18,0(r2)
 8006e3c:	10800104 	addi	r2,r2,4
 8006e40:	d8802415 	stw	r2,144(sp)
 8006e44:	9029d7fa 	srai	r20,r18,31
 8006e48:	a005883a 	mov	r2,r20
 8006e4c:	103fb60e 	bge	r2,zero,8006d28 <__alt_data_end+0xfc006d28>
 8006e50:	d9402017 	ldw	r5,128(sp)
 8006e54:	04a5c83a 	sub	r18,zero,r18
 8006e58:	05400b44 	movi	r21,45
 8006e5c:	9004c03a 	cmpne	r2,r18,zero
 8006e60:	0529c83a 	sub	r20,zero,r20
 8006e64:	dd401d85 	stb	r21,118(sp)
 8006e68:	a0a9c83a 	sub	r20,r20,r2
 8006e6c:	28026c16 	blt	r5,zero,8007820 <___svfiprintf_internal_r+0x128c>
 8006e70:	00bfdfc4 	movi	r2,-129
 8006e74:	80a0703a 	and	r16,r16,r2
 8006e78:	a03fb31e 	bne	r20,zero,8006d48 <__alt_data_end+0xfc006d48>
 8006e7c:	00004606 	br	8006f98 <___svfiprintf_internal_r+0xa04>
 8006e80:	9839883a 	mov	fp,r19
 8006e84:	d8002515 	stw	zero,148(sp)
 8006e88:	1c3ff404 	addi	r16,r3,-48
 8006e8c:	0009883a 	mov	r4,zero
 8006e90:	01400284 	movi	r5,10
 8006e94:	80008e80 	call	80008e8 <__mulsi3>
 8006e98:	e0c00007 	ldb	r3,0(fp)
 8006e9c:	8089883a 	add	r4,r16,r2
 8006ea0:	9cc00044 	addi	r19,r19,1
 8006ea4:	1c3ff404 	addi	r16,r3,-48
 8006ea8:	9839883a 	mov	fp,r19
 8006eac:	a43ff82e 	bgeu	r20,r16,8006e90 <__alt_data_end+0xfc006e90>
 8006eb0:	d9002515 	stw	r4,148(sp)
 8006eb4:	18bff804 	addi	r2,r3,-32
 8006eb8:	90be052e 	bgeu	r18,r2,80066d0 <__alt_data_end+0xfc0066d0>
 8006ebc:	8821883a 	mov	r16,r17
 8006ec0:	dc402103 	ldbu	r17,132(sp)
 8006ec4:	b811883a 	mov	r8,r23
 8006ec8:	8c403fcc 	andi	r17,r17,255
 8006ecc:	88028d1e 	bne	r17,zero,8007904 <___svfiprintf_internal_r+0x1370>
 8006ed0:	1800ea26 	beq	r3,zero,800727c <___svfiprintf_internal_r+0xce8>
 8006ed4:	04800044 	movi	r18,1
 8006ed8:	d8c01005 	stb	r3,64(sp)
 8006edc:	d8001d85 	stb	zero,118(sp)
 8006ee0:	9029883a 	mov	r20,r18
 8006ee4:	dc401004 	addi	r17,sp,64
 8006ee8:	003f1306 	br	8006b38 <__alt_data_end+0xfc006b38>
 8006eec:	8c402014 	ori	r17,r17,128
 8006ef0:	98c00007 	ldb	r3,0(r19)
 8006ef4:	003df306 	br	80066c4 <__alt_data_end+0xfc0066c4>
 8006ef8:	98c00007 	ldb	r3,0(r19)
 8006efc:	01000a84 	movi	r4,42
 8006f00:	9f000044 	addi	fp,r19,1
 8006f04:	19026326 	beq	r3,r4,8007894 <___svfiprintf_internal_r+0x1300>
 8006f08:	1c3ff404 	addi	r16,r3,-48
 8006f0c:	0009883a 	mov	r4,zero
 8006f10:	a4025636 	bltu	r20,r16,800786c <___svfiprintf_internal_r+0x12d8>
 8006f14:	01400284 	movi	r5,10
 8006f18:	80008e80 	call	80008e8 <__mulsi3>
 8006f1c:	e0c00007 	ldb	r3,0(fp)
 8006f20:	1409883a 	add	r4,r2,r16
 8006f24:	e4c00044 	addi	r19,fp,1
 8006f28:	1c3ff404 	addi	r16,r3,-48
 8006f2c:	9839883a 	mov	fp,r19
 8006f30:	a43ff82e 	bgeu	r20,r16,8006f14 <__alt_data_end+0xfc006f14>
 8006f34:	20020c16 	blt	r4,zero,8007768 <___svfiprintf_internal_r+0x11d4>
 8006f38:	d9002015 	stw	r4,128(sp)
 8006f3c:	003de206 	br	80066c8 <__alt_data_end+0xfc0066c8>
 8006f40:	8821883a 	mov	r16,r17
 8006f44:	dc402103 	ldbu	r17,132(sp)
 8006f48:	b811883a 	mov	r8,r23
 8006f4c:	8c403fcc 	andi	r17,r17,255
 8006f50:	8802721e 	bne	r17,zero,800791c <___svfiprintf_internal_r+0x1388>
 8006f54:	84000414 	ori	r16,r16,16
 8006f58:	8080080c 	andi	r2,r16,32
 8006f5c:	103e9f1e 	bne	r2,zero,80069dc <__alt_data_end+0xfc0069dc>
 8006f60:	8080040c 	andi	r2,r16,16
 8006f64:	10015326 	beq	r2,zero,80074b4 <___svfiprintf_internal_r+0xf20>
 8006f68:	d8c02417 	ldw	r3,144(sp)
 8006f6c:	d9002017 	ldw	r4,128(sp)
 8006f70:	d8001d85 	stb	zero,118(sp)
 8006f74:	18800104 	addi	r2,r3,4
 8006f78:	1c800017 	ldw	r18,0(r3)
 8006f7c:	0029883a 	mov	r20,zero
 8006f80:	20015516 	blt	r4,zero,80074d8 <___svfiprintf_internal_r+0xf44>
 8006f84:	00ffdfc4 	movi	r3,-129
 8006f88:	d8802415 	stw	r2,144(sp)
 8006f8c:	80e0703a 	and	r16,r16,r3
 8006f90:	002b883a 	mov	r21,zero
 8006f94:	903e9e26 	beq	r18,zero,8006a10 <__alt_data_end+0xfc006a10>
 8006f98:	00800244 	movi	r2,9
 8006f9c:	14bf6a36 	bltu	r2,r18,8006d48 <__alt_data_end+0xfc006d48>
 8006fa0:	94800c04 	addi	r18,r18,48
 8006fa4:	dc8019c5 	stb	r18,103(sp)
 8006fa8:	dd002c17 	ldw	r20,176(sp)
 8006fac:	dc4019c4 	addi	r17,sp,103
 8006fb0:	003e9c06 	br	8006a24 <__alt_data_end+0xfc006a24>
 8006fb4:	8821883a 	mov	r16,r17
 8006fb8:	dc402103 	ldbu	r17,132(sp)
 8006fbc:	b811883a 	mov	r8,r23
 8006fc0:	8c403fcc 	andi	r17,r17,255
 8006fc4:	8802571e 	bne	r17,zero,8007924 <___svfiprintf_internal_r+0x1390>
 8006fc8:	84000414 	ori	r16,r16,16
 8006fcc:	8080080c 	andi	r2,r16,32
 8006fd0:	103ea91e 	bne	r2,zero,8006a78 <__alt_data_end+0xfc006a78>
 8006fd4:	8080040c 	andi	r2,r16,16
 8006fd8:	10018026 	beq	r2,zero,80075dc <___svfiprintf_internal_r+0x1048>
 8006fdc:	d9402417 	ldw	r5,144(sp)
 8006fe0:	d8c02017 	ldw	r3,128(sp)
 8006fe4:	d8001d85 	stb	zero,118(sp)
 8006fe8:	28800104 	addi	r2,r5,4
 8006fec:	2c800017 	ldw	r18,0(r5)
 8006ff0:	0029883a 	mov	r20,zero
 8006ff4:	18018216 	blt	r3,zero,8007600 <___svfiprintf_internal_r+0x106c>
 8006ff8:	00ffdfc4 	movi	r3,-129
 8006ffc:	d8802415 	stw	r2,144(sp)
 8007000:	80e0703a 	and	r16,r16,r3
 8007004:	903ea81e 	bne	r18,zero,8006aa8 <__alt_data_end+0xfc006aa8>
 8007008:	d8802017 	ldw	r2,128(sp)
 800700c:	002b883a 	mov	r21,zero
 8007010:	1001f226 	beq	r2,zero,80077dc <___svfiprintf_internal_r+0x1248>
 8007014:	0025883a 	mov	r18,zero
 8007018:	0029883a 	mov	r20,zero
 800701c:	003ea306 	br	8006aac <__alt_data_end+0xfc006aac>
 8007020:	d8c01c17 	ldw	r3,112(sp)
 8007024:	d8801b17 	ldw	r2,108(sp)
 8007028:	d9001d87 	ldb	r4,118(sp)
 800702c:	20000b26 	beq	r4,zero,800705c <___svfiprintf_internal_r+0xac8>
 8007030:	d9001d84 	addi	r4,sp,118
 8007034:	18c00044 	addi	r3,r3,1
 8007038:	10800044 	addi	r2,r2,1
 800703c:	41000015 	stw	r4,0(r8)
 8007040:	01000044 	movi	r4,1
 8007044:	41000115 	stw	r4,4(r8)
 8007048:	d8c01c15 	stw	r3,112(sp)
 800704c:	d8801b15 	stw	r2,108(sp)
 8007050:	010001c4 	movi	r4,7
 8007054:	2080f316 	blt	r4,r2,8007424 <___svfiprintf_internal_r+0xe90>
 8007058:	42000204 	addi	r8,r8,8
 800705c:	d9402117 	ldw	r5,132(sp)
 8007060:	28000b26 	beq	r5,zero,8007090 <___svfiprintf_internal_r+0xafc>
 8007064:	d9001d04 	addi	r4,sp,116
 8007068:	18c00084 	addi	r3,r3,2
 800706c:	10800044 	addi	r2,r2,1
 8007070:	41000015 	stw	r4,0(r8)
 8007074:	01000084 	movi	r4,2
 8007078:	41000115 	stw	r4,4(r8)
 800707c:	d8c01c15 	stw	r3,112(sp)
 8007080:	d8801b15 	stw	r2,108(sp)
 8007084:	010001c4 	movi	r4,7
 8007088:	2080ef16 	blt	r4,r2,8007448 <___svfiprintf_internal_r+0xeb4>
 800708c:	42000204 	addi	r8,r8,8
 8007090:	d9402217 	ldw	r5,136(sp)
 8007094:	01002004 	movi	r4,128
 8007098:	29008f26 	beq	r5,r4,80072d8 <___svfiprintf_internal_r+0xd44>
 800709c:	d9002017 	ldw	r4,128(sp)
 80070a0:	252fc83a 	sub	r23,r4,r20
 80070a4:	05c0310e 	bge	zero,r23,800716c <___svfiprintf_internal_r+0xbd8>
 80070a8:	07000404 	movi	fp,16
 80070ac:	e5c17d0e 	bge	fp,r23,80076a4 <___svfiprintf_internal_r+0x1110>
 80070b0:	01020074 	movhi	r4,2049
 80070b4:	21384904 	addi	r4,r4,-7900
 80070b8:	dc002015 	stw	r16,128(sp)
 80070bc:	dc402215 	stw	r17,136(sp)
 80070c0:	d9002115 	stw	r4,132(sp)
 80070c4:	b823883a 	mov	r17,r23
 80070c8:	054001c4 	movi	r21,7
 80070cc:	982f883a 	mov	r23,r19
 80070d0:	dc002717 	ldw	r16,156(sp)
 80070d4:	9027883a 	mov	r19,r18
 80070d8:	dc802317 	ldw	r18,140(sp)
 80070dc:	00000306 	br	80070ec <___svfiprintf_internal_r+0xb58>
 80070e0:	8c7ffc04 	addi	r17,r17,-16
 80070e4:	42000204 	addi	r8,r8,8
 80070e8:	e440110e 	bge	fp,r17,8007130 <___svfiprintf_internal_r+0xb9c>
 80070ec:	18c00404 	addi	r3,r3,16
 80070f0:	10800044 	addi	r2,r2,1
 80070f4:	45800015 	stw	r22,0(r8)
 80070f8:	47000115 	stw	fp,4(r8)
 80070fc:	d8c01c15 	stw	r3,112(sp)
 8007100:	d8801b15 	stw	r2,108(sp)
 8007104:	a8bff60e 	bge	r21,r2,80070e0 <__alt_data_end+0xfc0070e0>
 8007108:	d9801a04 	addi	r6,sp,104
 800710c:	900b883a 	mov	r5,r18
 8007110:	8009883a 	mov	r4,r16
 8007114:	80063c40 	call	80063c4 <__ssprint_r>
 8007118:	10005e1e 	bne	r2,zero,8007294 <___svfiprintf_internal_r+0xd00>
 800711c:	8c7ffc04 	addi	r17,r17,-16
 8007120:	d8c01c17 	ldw	r3,112(sp)
 8007124:	d8801b17 	ldw	r2,108(sp)
 8007128:	d811883a 	mov	r8,sp
 800712c:	e47fef16 	blt	fp,r17,80070ec <__alt_data_end+0xfc0070ec>
 8007130:	9825883a 	mov	r18,r19
 8007134:	dc002017 	ldw	r16,128(sp)
 8007138:	b827883a 	mov	r19,r23
 800713c:	882f883a 	mov	r23,r17
 8007140:	dc402217 	ldw	r17,136(sp)
 8007144:	d9402117 	ldw	r5,132(sp)
 8007148:	1dc7883a 	add	r3,r3,r23
 800714c:	10800044 	addi	r2,r2,1
 8007150:	41400015 	stw	r5,0(r8)
 8007154:	45c00115 	stw	r23,4(r8)
 8007158:	d8c01c15 	stw	r3,112(sp)
 800715c:	d8801b15 	stw	r2,108(sp)
 8007160:	010001c4 	movi	r4,7
 8007164:	2080a616 	blt	r4,r2,8007400 <___svfiprintf_internal_r+0xe6c>
 8007168:	42000204 	addi	r8,r8,8
 800716c:	a0c7883a 	add	r3,r20,r3
 8007170:	10800044 	addi	r2,r2,1
 8007174:	44400015 	stw	r17,0(r8)
 8007178:	45000115 	stw	r20,4(r8)
 800717c:	d8c01c15 	stw	r3,112(sp)
 8007180:	d8801b15 	stw	r2,108(sp)
 8007184:	010001c4 	movi	r4,7
 8007188:	20808816 	blt	r4,r2,80073ac <___svfiprintf_internal_r+0xe18>
 800718c:	42000204 	addi	r8,r8,8
 8007190:	8400010c 	andi	r16,r16,4
 8007194:	80002c26 	beq	r16,zero,8007248 <___svfiprintf_internal_r+0xcb4>
 8007198:	d8802517 	ldw	r2,148(sp)
 800719c:	14a1c83a 	sub	r16,r2,r18
 80071a0:	0400290e 	bge	zero,r16,8007248 <___svfiprintf_internal_r+0xcb4>
 80071a4:	04400404 	movi	r17,16
 80071a8:	d8801b17 	ldw	r2,108(sp)
 80071ac:	8c01a70e 	bge	r17,r16,800784c <___svfiprintf_internal_r+0x12b8>
 80071b0:	01420074 	movhi	r5,2049
 80071b4:	29784d04 	addi	r5,r5,-7884
 80071b8:	d9402815 	stw	r5,160(sp)
 80071bc:	050001c4 	movi	r20,7
 80071c0:	dd402717 	ldw	r21,156(sp)
 80071c4:	ddc02317 	ldw	r23,140(sp)
 80071c8:	00000306 	br	80071d8 <___svfiprintf_internal_r+0xc44>
 80071cc:	843ffc04 	addi	r16,r16,-16
 80071d0:	42000204 	addi	r8,r8,8
 80071d4:	8c00130e 	bge	r17,r16,8007224 <___svfiprintf_internal_r+0xc90>
 80071d8:	01020074 	movhi	r4,2049
 80071dc:	18c00404 	addi	r3,r3,16
 80071e0:	10800044 	addi	r2,r2,1
 80071e4:	21384d04 	addi	r4,r4,-7884
 80071e8:	41000015 	stw	r4,0(r8)
 80071ec:	44400115 	stw	r17,4(r8)
 80071f0:	d8c01c15 	stw	r3,112(sp)
 80071f4:	d8801b15 	stw	r2,108(sp)
 80071f8:	a0bff40e 	bge	r20,r2,80071cc <__alt_data_end+0xfc0071cc>
 80071fc:	d9801a04 	addi	r6,sp,104
 8007200:	b80b883a 	mov	r5,r23
 8007204:	a809883a 	mov	r4,r21
 8007208:	80063c40 	call	80063c4 <__ssprint_r>
 800720c:	1000211e 	bne	r2,zero,8007294 <___svfiprintf_internal_r+0xd00>
 8007210:	843ffc04 	addi	r16,r16,-16
 8007214:	d8c01c17 	ldw	r3,112(sp)
 8007218:	d8801b17 	ldw	r2,108(sp)
 800721c:	d811883a 	mov	r8,sp
 8007220:	8c3fed16 	blt	r17,r16,80071d8 <__alt_data_end+0xfc0071d8>
 8007224:	d9402817 	ldw	r5,160(sp)
 8007228:	1c07883a 	add	r3,r3,r16
 800722c:	10800044 	addi	r2,r2,1
 8007230:	41400015 	stw	r5,0(r8)
 8007234:	44000115 	stw	r16,4(r8)
 8007238:	d8c01c15 	stw	r3,112(sp)
 800723c:	d8801b15 	stw	r2,108(sp)
 8007240:	010001c4 	movi	r4,7
 8007244:	2080b516 	blt	r4,r2,800751c <___svfiprintf_internal_r+0xf88>
 8007248:	d8802517 	ldw	r2,148(sp)
 800724c:	1480010e 	bge	r2,r18,8007254 <___svfiprintf_internal_r+0xcc0>
 8007250:	9005883a 	mov	r2,r18
 8007254:	d9002617 	ldw	r4,152(sp)
 8007258:	2089883a 	add	r4,r4,r2
 800725c:	d9002615 	stw	r4,152(sp)
 8007260:	18005a1e 	bne	r3,zero,80073cc <___svfiprintf_internal_r+0xe38>
 8007264:	98800007 	ldb	r2,0(r19)
 8007268:	d8001b15 	stw	zero,108(sp)
 800726c:	d811883a 	mov	r8,sp
 8007270:	103cec1e 	bne	r2,zero,8006624 <__alt_data_end+0xfc006624>
 8007274:	9825883a 	mov	r18,r19
 8007278:	003d0206 	br	8006684 <__alt_data_end+0xfc006684>
 800727c:	d8801c17 	ldw	r2,112(sp)
 8007280:	10000426 	beq	r2,zero,8007294 <___svfiprintf_internal_r+0xd00>
 8007284:	d9402317 	ldw	r5,140(sp)
 8007288:	d9002717 	ldw	r4,156(sp)
 800728c:	d9801a04 	addi	r6,sp,104
 8007290:	80063c40 	call	80063c4 <__ssprint_r>
 8007294:	d9402317 	ldw	r5,140(sp)
 8007298:	d8802617 	ldw	r2,152(sp)
 800729c:	28c0030b 	ldhu	r3,12(r5)
 80072a0:	18c0100c 	andi	r3,r3,64
 80072a4:	18015c1e 	bne	r3,zero,8007818 <___svfiprintf_internal_r+0x1284>
 80072a8:	dfc03717 	ldw	ra,220(sp)
 80072ac:	df003617 	ldw	fp,216(sp)
 80072b0:	ddc03517 	ldw	r23,212(sp)
 80072b4:	dd803417 	ldw	r22,208(sp)
 80072b8:	dd403317 	ldw	r21,204(sp)
 80072bc:	dd003217 	ldw	r20,200(sp)
 80072c0:	dcc03117 	ldw	r19,196(sp)
 80072c4:	dc803017 	ldw	r18,192(sp)
 80072c8:	dc402f17 	ldw	r17,188(sp)
 80072cc:	dc002e17 	ldw	r16,184(sp)
 80072d0:	dec03804 	addi	sp,sp,224
 80072d4:	f800283a 	ret
 80072d8:	d9002517 	ldw	r4,148(sp)
 80072dc:	24afc83a 	sub	r23,r4,r18
 80072e0:	05ff6e0e 	bge	zero,r23,800709c <__alt_data_end+0xfc00709c>
 80072e4:	07000404 	movi	fp,16
 80072e8:	e5c15c0e 	bge	fp,r23,800785c <___svfiprintf_internal_r+0x12c8>
 80072ec:	01020074 	movhi	r4,2049
 80072f0:	21384904 	addi	r4,r4,-7900
 80072f4:	dc002215 	stw	r16,136(sp)
 80072f8:	dc402815 	stw	r17,160(sp)
 80072fc:	d9002115 	stw	r4,132(sp)
 8007300:	b823883a 	mov	r17,r23
 8007304:	054001c4 	movi	r21,7
 8007308:	982f883a 	mov	r23,r19
 800730c:	dc002717 	ldw	r16,156(sp)
 8007310:	9027883a 	mov	r19,r18
 8007314:	dc802317 	ldw	r18,140(sp)
 8007318:	00000306 	br	8007328 <___svfiprintf_internal_r+0xd94>
 800731c:	8c7ffc04 	addi	r17,r17,-16
 8007320:	42000204 	addi	r8,r8,8
 8007324:	e440110e 	bge	fp,r17,800736c <___svfiprintf_internal_r+0xdd8>
 8007328:	18c00404 	addi	r3,r3,16
 800732c:	10800044 	addi	r2,r2,1
 8007330:	45800015 	stw	r22,0(r8)
 8007334:	47000115 	stw	fp,4(r8)
 8007338:	d8c01c15 	stw	r3,112(sp)
 800733c:	d8801b15 	stw	r2,108(sp)
 8007340:	a8bff60e 	bge	r21,r2,800731c <__alt_data_end+0xfc00731c>
 8007344:	d9801a04 	addi	r6,sp,104
 8007348:	900b883a 	mov	r5,r18
 800734c:	8009883a 	mov	r4,r16
 8007350:	80063c40 	call	80063c4 <__ssprint_r>
 8007354:	103fcf1e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 8007358:	8c7ffc04 	addi	r17,r17,-16
 800735c:	d8c01c17 	ldw	r3,112(sp)
 8007360:	d8801b17 	ldw	r2,108(sp)
 8007364:	d811883a 	mov	r8,sp
 8007368:	e47fef16 	blt	fp,r17,8007328 <__alt_data_end+0xfc007328>
 800736c:	9825883a 	mov	r18,r19
 8007370:	dc002217 	ldw	r16,136(sp)
 8007374:	b827883a 	mov	r19,r23
 8007378:	882f883a 	mov	r23,r17
 800737c:	dc402817 	ldw	r17,160(sp)
 8007380:	d9402117 	ldw	r5,132(sp)
 8007384:	1dc7883a 	add	r3,r3,r23
 8007388:	10800044 	addi	r2,r2,1
 800738c:	41400015 	stw	r5,0(r8)
 8007390:	45c00115 	stw	r23,4(r8)
 8007394:	d8c01c15 	stw	r3,112(sp)
 8007398:	d8801b15 	stw	r2,108(sp)
 800739c:	010001c4 	movi	r4,7
 80073a0:	2080b716 	blt	r4,r2,8007680 <___svfiprintf_internal_r+0x10ec>
 80073a4:	42000204 	addi	r8,r8,8
 80073a8:	003f3c06 	br	800709c <__alt_data_end+0xfc00709c>
 80073ac:	d9402317 	ldw	r5,140(sp)
 80073b0:	d9002717 	ldw	r4,156(sp)
 80073b4:	d9801a04 	addi	r6,sp,104
 80073b8:	80063c40 	call	80063c4 <__ssprint_r>
 80073bc:	103fb51e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 80073c0:	d8c01c17 	ldw	r3,112(sp)
 80073c4:	d811883a 	mov	r8,sp
 80073c8:	003f7106 	br	8007190 <__alt_data_end+0xfc007190>
 80073cc:	d9402317 	ldw	r5,140(sp)
 80073d0:	d9002717 	ldw	r4,156(sp)
 80073d4:	d9801a04 	addi	r6,sp,104
 80073d8:	80063c40 	call	80063c4 <__ssprint_r>
 80073dc:	103fa126 	beq	r2,zero,8007264 <__alt_data_end+0xfc007264>
 80073e0:	003fac06 	br	8007294 <__alt_data_end+0xfc007294>
 80073e4:	d9402317 	ldw	r5,140(sp)
 80073e8:	d9002717 	ldw	r4,156(sp)
 80073ec:	d9801a04 	addi	r6,sp,104
 80073f0:	80063c40 	call	80063c4 <__ssprint_r>
 80073f4:	103fa71e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 80073f8:	d811883a 	mov	r8,sp
 80073fc:	003c9e06 	br	8006678 <__alt_data_end+0xfc006678>
 8007400:	d9402317 	ldw	r5,140(sp)
 8007404:	d9002717 	ldw	r4,156(sp)
 8007408:	d9801a04 	addi	r6,sp,104
 800740c:	80063c40 	call	80063c4 <__ssprint_r>
 8007410:	103fa01e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 8007414:	d8c01c17 	ldw	r3,112(sp)
 8007418:	d8801b17 	ldw	r2,108(sp)
 800741c:	d811883a 	mov	r8,sp
 8007420:	003f5206 	br	800716c <__alt_data_end+0xfc00716c>
 8007424:	d9402317 	ldw	r5,140(sp)
 8007428:	d9002717 	ldw	r4,156(sp)
 800742c:	d9801a04 	addi	r6,sp,104
 8007430:	80063c40 	call	80063c4 <__ssprint_r>
 8007434:	103f971e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 8007438:	d8c01c17 	ldw	r3,112(sp)
 800743c:	d8801b17 	ldw	r2,108(sp)
 8007440:	d811883a 	mov	r8,sp
 8007444:	003f0506 	br	800705c <__alt_data_end+0xfc00705c>
 8007448:	d9402317 	ldw	r5,140(sp)
 800744c:	d9002717 	ldw	r4,156(sp)
 8007450:	d9801a04 	addi	r6,sp,104
 8007454:	80063c40 	call	80063c4 <__ssprint_r>
 8007458:	103f8e1e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 800745c:	d8c01c17 	ldw	r3,112(sp)
 8007460:	d8801b17 	ldw	r2,108(sp)
 8007464:	d811883a 	mov	r8,sp
 8007468:	003f0906 	br	8007090 <__alt_data_end+0xfc007090>
 800746c:	d9402017 	ldw	r5,128(sp)
 8007470:	d8001d85 	stb	zero,118(sp)
 8007474:	28007716 	blt	r5,zero,8007654 <___svfiprintf_internal_r+0x10c0>
 8007478:	00ffdfc4 	movi	r3,-129
 800747c:	9504b03a 	or	r2,r18,r20
 8007480:	80e0703a 	and	r16,r16,r3
 8007484:	103d3926 	beq	r2,zero,800696c <__alt_data_end+0xfc00696c>
 8007488:	002b883a 	mov	r21,zero
 800748c:	003d3c06 	br	8006980 <__alt_data_end+0xfc006980>
 8007490:	d9402317 	ldw	r5,140(sp)
 8007494:	d9002717 	ldw	r4,156(sp)
 8007498:	d9801a04 	addi	r6,sp,104
 800749c:	80063c40 	call	80063c4 <__ssprint_r>
 80074a0:	103f7c1e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 80074a4:	d8c01c17 	ldw	r3,112(sp)
 80074a8:	d8801b17 	ldw	r2,108(sp)
 80074ac:	d811883a 	mov	r8,sp
 80074b0:	003edd06 	br	8007028 <__alt_data_end+0xfc007028>
 80074b4:	8080100c 	andi	r2,r16,64
 80074b8:	d8001d85 	stb	zero,118(sp)
 80074bc:	10008426 	beq	r2,zero,80076d0 <___svfiprintf_internal_r+0x113c>
 80074c0:	d9402417 	ldw	r5,144(sp)
 80074c4:	d8c02017 	ldw	r3,128(sp)
 80074c8:	0029883a 	mov	r20,zero
 80074cc:	28800104 	addi	r2,r5,4
 80074d0:	2c80000b 	ldhu	r18,0(r5)
 80074d4:	183eab0e 	bge	r3,zero,8006f84 <__alt_data_end+0xfc006f84>
 80074d8:	d8802415 	stw	r2,144(sp)
 80074dc:	002b883a 	mov	r21,zero
 80074e0:	9504b03a 	or	r2,r18,r20
 80074e4:	103e171e 	bne	r2,zero,8006d44 <__alt_data_end+0xfc006d44>
 80074e8:	00800044 	movi	r2,1
 80074ec:	10803fcc 	andi	r2,r2,255
 80074f0:	00c00044 	movi	r3,1
 80074f4:	10c05c26 	beq	r2,r3,8007668 <___svfiprintf_internal_r+0x10d4>
 80074f8:	00c00084 	movi	r3,2
 80074fc:	10fd1e26 	beq	r2,r3,8006978 <__alt_data_end+0xfc006978>
 8007500:	003ec406 	br	8007014 <__alt_data_end+0xfc007014>
 8007504:	d9401e17 	ldw	r5,120(sp)
 8007508:	2c69c83a 	sub	r20,r5,r17
 800750c:	003d4506 	br	8006a24 <__alt_data_end+0xfc006a24>
 8007510:	d8802415 	stw	r2,144(sp)
 8007514:	98c00007 	ldb	r3,0(r19)
 8007518:	003c6a06 	br	80066c4 <__alt_data_end+0xfc0066c4>
 800751c:	d9402317 	ldw	r5,140(sp)
 8007520:	d9002717 	ldw	r4,156(sp)
 8007524:	d9801a04 	addi	r6,sp,104
 8007528:	80063c40 	call	80063c4 <__ssprint_r>
 800752c:	103f591e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 8007530:	d8c01c17 	ldw	r3,112(sp)
 8007534:	003f4406 	br	8007248 <__alt_data_end+0xfc007248>
 8007538:	01420074 	movhi	r5,2049
 800753c:	2977e804 	addi	r5,r5,-8288
 8007540:	d9402915 	stw	r5,164(sp)
 8007544:	003d0906 	br	800696c <__alt_data_end+0xfc00696c>
 8007548:	d8c02417 	ldw	r3,144(sp)
 800754c:	d9002617 	ldw	r4,152(sp)
 8007550:	d9402417 	ldw	r5,144(sp)
 8007554:	18800017 	ldw	r2,0(r3)
 8007558:	2007d7fa 	srai	r3,r4,31
 800755c:	29400104 	addi	r5,r5,4
 8007560:	d9402415 	stw	r5,144(sp)
 8007564:	11000015 	stw	r4,0(r2)
 8007568:	10c00115 	stw	r3,4(r2)
 800756c:	003c2b06 	br	800661c <__alt_data_end+0xfc00661c>
 8007570:	d8c01d45 	stb	r3,117(sp)
 8007574:	d8c02017 	ldw	r3,128(sp)
 8007578:	00800c04 	movi	r2,48
 800757c:	d8801d05 	stb	r2,116(sp)
 8007580:	d8001d85 	stb	zero,118(sp)
 8007584:	80800094 	ori	r2,r16,2
 8007588:	1800ac16 	blt	r3,zero,800783c <___svfiprintf_internal_r+0x12a8>
 800758c:	00bfdfc4 	movi	r2,-129
 8007590:	80a0703a 	and	r16,r16,r2
 8007594:	84000094 	ori	r16,r16,2
 8007598:	002b883a 	mov	r21,zero
 800759c:	003cf806 	br	8006980 <__alt_data_end+0xfc006980>
 80075a0:	98c00007 	ldb	r3,0(r19)
 80075a4:	003c4706 	br	80066c4 <__alt_data_end+0xfc0066c4>
 80075a8:	d9402417 	ldw	r5,144(sp)
 80075ac:	2c800017 	ldw	r18,0(r5)
 80075b0:	29400104 	addi	r5,r5,4
 80075b4:	d9402415 	stw	r5,144(sp)
 80075b8:	9029d7fa 	srai	r20,r18,31
 80075bc:	a005883a 	mov	r2,r20
 80075c0:	003dd806 	br	8006d24 <__alt_data_end+0xfc006d24>
 80075c4:	d9402417 	ldw	r5,144(sp)
 80075c8:	0029883a 	mov	r20,zero
 80075cc:	2c800017 	ldw	r18,0(r5)
 80075d0:	29400104 	addi	r5,r5,4
 80075d4:	d9402415 	stw	r5,144(sp)
 80075d8:	003cdb06 	br	8006948 <__alt_data_end+0xfc006948>
 80075dc:	8080100c 	andi	r2,r16,64
 80075e0:	d8001d85 	stb	zero,118(sp)
 80075e4:	10003326 	beq	r2,zero,80076b4 <___svfiprintf_internal_r+0x1120>
 80075e8:	d9002417 	ldw	r4,144(sp)
 80075ec:	d9402017 	ldw	r5,128(sp)
 80075f0:	0029883a 	mov	r20,zero
 80075f4:	20800104 	addi	r2,r4,4
 80075f8:	2480000b 	ldhu	r18,0(r4)
 80075fc:	283e7e0e 	bge	r5,zero,8006ff8 <__alt_data_end+0xfc006ff8>
 8007600:	9506b03a 	or	r3,r18,r20
 8007604:	d8802415 	stw	r2,144(sp)
 8007608:	183d271e 	bne	r3,zero,8006aa8 <__alt_data_end+0xfc006aa8>
 800760c:	002b883a 	mov	r21,zero
 8007610:	0005883a 	mov	r2,zero
 8007614:	003fb506 	br	80074ec <__alt_data_end+0xfc0074ec>
 8007618:	98c00043 	ldbu	r3,1(r19)
 800761c:	8c400814 	ori	r17,r17,32
 8007620:	9cc00044 	addi	r19,r19,1
 8007624:	18c03fcc 	andi	r3,r3,255
 8007628:	18c0201c 	xori	r3,r3,128
 800762c:	18ffe004 	addi	r3,r3,-128
 8007630:	003c2406 	br	80066c4 <__alt_data_end+0xfc0066c4>
 8007634:	d8c02415 	stw	r3,144(sp)
 8007638:	002b883a 	mov	r21,zero
 800763c:	003fa806 	br	80074e0 <__alt_data_end+0xfc0074e0>
 8007640:	01020074 	movhi	r4,2049
 8007644:	2137e804 	addi	r4,r4,-8288
 8007648:	d9002915 	stw	r4,164(sp)
 800764c:	d8c02415 	stw	r3,144(sp)
 8007650:	1021883a 	mov	r16,r2
 8007654:	9504b03a 	or	r2,r18,r20
 8007658:	103f8b1e 	bne	r2,zero,8007488 <__alt_data_end+0xfc007488>
 800765c:	002b883a 	mov	r21,zero
 8007660:	00800084 	movi	r2,2
 8007664:	003fa106 	br	80074ec <__alt_data_end+0xfc0074ec>
 8007668:	0025883a 	mov	r18,zero
 800766c:	94800c04 	addi	r18,r18,48
 8007670:	dc8019c5 	stb	r18,103(sp)
 8007674:	dd002c17 	ldw	r20,176(sp)
 8007678:	dc4019c4 	addi	r17,sp,103
 800767c:	003ce906 	br	8006a24 <__alt_data_end+0xfc006a24>
 8007680:	d9402317 	ldw	r5,140(sp)
 8007684:	d9002717 	ldw	r4,156(sp)
 8007688:	d9801a04 	addi	r6,sp,104
 800768c:	80063c40 	call	80063c4 <__ssprint_r>
 8007690:	103f001e 	bne	r2,zero,8007294 <__alt_data_end+0xfc007294>
 8007694:	d8c01c17 	ldw	r3,112(sp)
 8007698:	d8801b17 	ldw	r2,108(sp)
 800769c:	d811883a 	mov	r8,sp
 80076a0:	003e7e06 	br	800709c <__alt_data_end+0xfc00709c>
 80076a4:	01420074 	movhi	r5,2049
 80076a8:	29784904 	addi	r5,r5,-7900
 80076ac:	d9402115 	stw	r5,132(sp)
 80076b0:	003ea406 	br	8007144 <__alt_data_end+0xfc007144>
 80076b4:	d8c02417 	ldw	r3,144(sp)
 80076b8:	d9002017 	ldw	r4,128(sp)
 80076bc:	0029883a 	mov	r20,zero
 80076c0:	18800104 	addi	r2,r3,4
 80076c4:	1c800017 	ldw	r18,0(r3)
 80076c8:	203e4b0e 	bge	r4,zero,8006ff8 <__alt_data_end+0xfc006ff8>
 80076cc:	003fcc06 	br	8007600 <__alt_data_end+0xfc007600>
 80076d0:	d9002417 	ldw	r4,144(sp)
 80076d4:	d9402017 	ldw	r5,128(sp)
 80076d8:	0029883a 	mov	r20,zero
 80076dc:	20800104 	addi	r2,r4,4
 80076e0:	24800017 	ldw	r18,0(r4)
 80076e4:	283e270e 	bge	r5,zero,8006f84 <__alt_data_end+0xfc006f84>
 80076e8:	003f7b06 	br	80074d8 <__alt_data_end+0xfc0074d8>
 80076ec:	8400100c 	andi	r16,r16,64
 80076f0:	80003326 	beq	r16,zero,80077c0 <___svfiprintf_internal_r+0x122c>
 80076f4:	d9402417 	ldw	r5,144(sp)
 80076f8:	d8c02617 	ldw	r3,152(sp)
 80076fc:	28800017 	ldw	r2,0(r5)
 8007700:	29400104 	addi	r5,r5,4
 8007704:	d9402415 	stw	r5,144(sp)
 8007708:	10c0000d 	sth	r3,0(r2)
 800770c:	003bc306 	br	800661c <__alt_data_end+0xfc00661c>
 8007710:	d9002417 	ldw	r4,144(sp)
 8007714:	0029883a 	mov	r20,zero
 8007718:	24800017 	ldw	r18,0(r4)
 800771c:	21000104 	addi	r4,r4,4
 8007720:	d9002415 	stw	r4,144(sp)
 8007724:	003c8806 	br	8006948 <__alt_data_end+0xfc006948>
 8007728:	d8c02417 	ldw	r3,144(sp)
 800772c:	1c800017 	ldw	r18,0(r3)
 8007730:	18c00104 	addi	r3,r3,4
 8007734:	d8c02415 	stw	r3,144(sp)
 8007738:	9029d7fa 	srai	r20,r18,31
 800773c:	a005883a 	mov	r2,r20
 8007740:	003d7806 	br	8006d24 <__alt_data_end+0xfc006d24>
 8007744:	8809883a 	mov	r4,r17
 8007748:	da002d15 	stw	r8,180(sp)
 800774c:	8000a500 	call	8000a50 <strlen>
 8007750:	1029883a 	mov	r20,r2
 8007754:	dd401d83 	ldbu	r21,118(sp)
 8007758:	ddc02415 	stw	r23,144(sp)
 800775c:	d8002015 	stw	zero,128(sp)
 8007760:	da002d17 	ldw	r8,180(sp)
 8007764:	003caf06 	br	8006a24 <__alt_data_end+0xfc006a24>
 8007768:	013fffc4 	movi	r4,-1
 800776c:	003df206 	br	8006f38 <__alt_data_end+0xfc006f38>
 8007770:	dd002017 	ldw	r20,128(sp)
 8007774:	00800184 	movi	r2,6
 8007778:	1500012e 	bgeu	r2,r20,8007780 <___svfiprintf_internal_r+0x11ec>
 800777c:	1029883a 	mov	r20,r2
 8007780:	a025883a 	mov	r18,r20
 8007784:	a0004116 	blt	r20,zero,800788c <___svfiprintf_internal_r+0x12f8>
 8007788:	04420074 	movhi	r17,2049
 800778c:	ddc02415 	stw	r23,144(sp)
 8007790:	8c77ed04 	addi	r17,r17,-8268
 8007794:	003ce806 	br	8006b38 <__alt_data_end+0xfc006b38>
 8007798:	04001004 	movi	r16,64
 800779c:	800b883a 	mov	r5,r16
 80077a0:	80047300 	call	8004730 <_malloc_r>
 80077a4:	d8c02317 	ldw	r3,140(sp)
 80077a8:	18800015 	stw	r2,0(r3)
 80077ac:	18800415 	stw	r2,16(r3)
 80077b0:	10004d26 	beq	r2,zero,80078e8 <___svfiprintf_internal_r+0x1354>
 80077b4:	d9402317 	ldw	r5,140(sp)
 80077b8:	2c000515 	stw	r16,20(r5)
 80077bc:	003b8906 	br	80065e4 <__alt_data_end+0xfc0065e4>
 80077c0:	d9002417 	ldw	r4,144(sp)
 80077c4:	d9402617 	ldw	r5,152(sp)
 80077c8:	20800017 	ldw	r2,0(r4)
 80077cc:	21000104 	addi	r4,r4,4
 80077d0:	d9002415 	stw	r4,144(sp)
 80077d4:	11400015 	stw	r5,0(r2)
 80077d8:	003b9006 	br	800661c <__alt_data_end+0xfc00661c>
 80077dc:	8080004c 	andi	r2,r16,1
 80077e0:	002b883a 	mov	r21,zero
 80077e4:	10000526 	beq	r2,zero,80077fc <___svfiprintf_internal_r+0x1268>
 80077e8:	00800c04 	movi	r2,48
 80077ec:	d88019c5 	stb	r2,103(sp)
 80077f0:	dd002c17 	ldw	r20,176(sp)
 80077f4:	dc4019c4 	addi	r17,sp,103
 80077f8:	003c8a06 	br	8006a24 <__alt_data_end+0xfc006a24>
 80077fc:	0029883a 	mov	r20,zero
 8007800:	dc401a04 	addi	r17,sp,104
 8007804:	003c8706 	br	8006a24 <__alt_data_end+0xfc006a24>
 8007808:	01420074 	movhi	r5,2049
 800780c:	29784d04 	addi	r5,r5,-7884
 8007810:	d9402815 	stw	r5,160(sp)
 8007814:	003cff06 	br	8006c14 <__alt_data_end+0xfc006c14>
 8007818:	00bfffc4 	movi	r2,-1
 800781c:	003ea206 	br	80072a8 <__alt_data_end+0xfc0072a8>
 8007820:	00800044 	movi	r2,1
 8007824:	10803fcc 	andi	r2,r2,255
 8007828:	00c00044 	movi	r3,1
 800782c:	10fd4526 	beq	r2,r3,8006d44 <__alt_data_end+0xfc006d44>
 8007830:	00c00084 	movi	r3,2
 8007834:	10fc5226 	beq	r2,r3,8006980 <__alt_data_end+0xfc006980>
 8007838:	003c9c06 	br	8006aac <__alt_data_end+0xfc006aac>
 800783c:	1021883a 	mov	r16,r2
 8007840:	002b883a 	mov	r21,zero
 8007844:	00800084 	movi	r2,2
 8007848:	003ff606 	br	8007824 <__alt_data_end+0xfc007824>
 800784c:	01020074 	movhi	r4,2049
 8007850:	21384d04 	addi	r4,r4,-7884
 8007854:	d9002815 	stw	r4,160(sp)
 8007858:	003e7206 	br	8007224 <__alt_data_end+0xfc007224>
 800785c:	01420074 	movhi	r5,2049
 8007860:	29784904 	addi	r5,r5,-7900
 8007864:	d9402115 	stw	r5,132(sp)
 8007868:	003ec506 	br	8007380 <__alt_data_end+0xfc007380>
 800786c:	e027883a 	mov	r19,fp
 8007870:	d8002015 	stw	zero,128(sp)
 8007874:	003b9406 	br	80066c8 <__alt_data_end+0xfc0066c8>
 8007878:	dd002017 	ldw	r20,128(sp)
 800787c:	dd401d83 	ldbu	r21,118(sp)
 8007880:	ddc02415 	stw	r23,144(sp)
 8007884:	d8002015 	stw	zero,128(sp)
 8007888:	003c6606 	br	8006a24 <__alt_data_end+0xfc006a24>
 800788c:	0025883a 	mov	r18,zero
 8007890:	003fbd06 	br	8007788 <__alt_data_end+0xfc007788>
 8007894:	d9402417 	ldw	r5,144(sp)
 8007898:	d8c02417 	ldw	r3,144(sp)
 800789c:	29400017 	ldw	r5,0(r5)
 80078a0:	19000104 	addi	r4,r3,4
 80078a4:	d9002415 	stw	r4,144(sp)
 80078a8:	d9402015 	stw	r5,128(sp)
 80078ac:	98c00043 	ldbu	r3,1(r19)
 80078b0:	e027883a 	mov	r19,fp
 80078b4:	283f5b0e 	bge	r5,zero,8007624 <__alt_data_end+0xfc007624>
 80078b8:	18c03fcc 	andi	r3,r3,255
 80078bc:	013fffc4 	movi	r4,-1
 80078c0:	18c0201c 	xori	r3,r3,128
 80078c4:	d9002015 	stw	r4,128(sp)
 80078c8:	18ffe004 	addi	r3,r3,-128
 80078cc:	003b7d06 	br	80066c4 <__alt_data_end+0xfc0066c4>
 80078d0:	dd401d85 	stb	r21,118(sp)
 80078d4:	003cf306 	br	8006ca4 <__alt_data_end+0xfc006ca4>
 80078d8:	dd401d85 	stb	r21,118(sp)
 80078dc:	003d4e06 	br	8006e18 <__alt_data_end+0xfc006e18>
 80078e0:	dd401d85 	stb	r21,118(sp)
 80078e4:	003c0e06 	br	8006920 <__alt_data_end+0xfc006920>
 80078e8:	d9002717 	ldw	r4,156(sp)
 80078ec:	00800304 	movi	r2,12
 80078f0:	20800015 	stw	r2,0(r4)
 80078f4:	00bfffc4 	movi	r2,-1
 80078f8:	003e6b06 	br	80072a8 <__alt_data_end+0xfc0072a8>
 80078fc:	dd401d85 	stb	r21,118(sp)
 8007900:	003d0006 	br	8006d04 <__alt_data_end+0xfc006d04>
 8007904:	dd401d85 	stb	r21,118(sp)
 8007908:	003d7106 	br	8006ed0 <__alt_data_end+0xfc006ed0>
 800790c:	dd401d85 	stb	r21,118(sp)
 8007910:	003c5706 	br	8006a70 <__alt_data_end+0xfc006a70>
 8007914:	dd401d85 	stb	r21,118(sp)
 8007918:	003c2e06 	br	80069d4 <__alt_data_end+0xfc0069d4>
 800791c:	dd401d85 	stb	r21,118(sp)
 8007920:	003d8c06 	br	8006f54 <__alt_data_end+0xfc006f54>
 8007924:	dd401d85 	stb	r21,118(sp)
 8007928:	003da706 	br	8006fc8 <__alt_data_end+0xfc006fc8>
 800792c:	dd401d85 	stb	r21,118(sp)
 8007930:	003cc806 	br	8006c54 <__alt_data_end+0xfc006c54>

08007934 <_calloc_r>:
 8007934:	defffe04 	addi	sp,sp,-8
 8007938:	2805883a 	mov	r2,r5
 800793c:	dc000015 	stw	r16,0(sp)
 8007940:	300b883a 	mov	r5,r6
 8007944:	2021883a 	mov	r16,r4
 8007948:	1009883a 	mov	r4,r2
 800794c:	dfc00115 	stw	ra,4(sp)
 8007950:	80008e80 	call	80008e8 <__mulsi3>
 8007954:	100b883a 	mov	r5,r2
 8007958:	8009883a 	mov	r4,r16
 800795c:	80047300 	call	8004730 <_malloc_r>
 8007960:	10002926 	beq	r2,zero,8007a08 <_calloc_r+0xd4>
 8007964:	11bfff17 	ldw	r6,-4(r2)
 8007968:	1021883a 	mov	r16,r2
 800796c:	00bfff04 	movi	r2,-4
 8007970:	308c703a 	and	r6,r6,r2
 8007974:	00c00904 	movi	r3,36
 8007978:	308d883a 	add	r6,r6,r2
 800797c:	19801636 	bltu	r3,r6,80079d8 <_calloc_r+0xa4>
 8007980:	008004c4 	movi	r2,19
 8007984:	11800b2e 	bgeu	r2,r6,80079b4 <_calloc_r+0x80>
 8007988:	80000015 	stw	zero,0(r16)
 800798c:	80000115 	stw	zero,4(r16)
 8007990:	008006c4 	movi	r2,27
 8007994:	11801a2e 	bgeu	r2,r6,8007a00 <_calloc_r+0xcc>
 8007998:	80000215 	stw	zero,8(r16)
 800799c:	80000315 	stw	zero,12(r16)
 80079a0:	30c0151e 	bne	r6,r3,80079f8 <_calloc_r+0xc4>
 80079a4:	80000415 	stw	zero,16(r16)
 80079a8:	80800604 	addi	r2,r16,24
 80079ac:	80000515 	stw	zero,20(r16)
 80079b0:	00000106 	br	80079b8 <_calloc_r+0x84>
 80079b4:	8005883a 	mov	r2,r16
 80079b8:	10000015 	stw	zero,0(r2)
 80079bc:	10000115 	stw	zero,4(r2)
 80079c0:	10000215 	stw	zero,8(r2)
 80079c4:	8005883a 	mov	r2,r16
 80079c8:	dfc00117 	ldw	ra,4(sp)
 80079cc:	dc000017 	ldw	r16,0(sp)
 80079d0:	dec00204 	addi	sp,sp,8
 80079d4:	f800283a 	ret
 80079d8:	000b883a 	mov	r5,zero
 80079dc:	8009883a 	mov	r4,r16
 80079e0:	8007fa00 	call	8007fa0 <memset>
 80079e4:	8005883a 	mov	r2,r16
 80079e8:	dfc00117 	ldw	ra,4(sp)
 80079ec:	dc000017 	ldw	r16,0(sp)
 80079f0:	dec00204 	addi	sp,sp,8
 80079f4:	f800283a 	ret
 80079f8:	80800404 	addi	r2,r16,16
 80079fc:	003fee06 	br	80079b8 <__alt_data_end+0xfc0079b8>
 8007a00:	80800204 	addi	r2,r16,8
 8007a04:	003fec06 	br	80079b8 <__alt_data_end+0xfc0079b8>
 8007a08:	0005883a 	mov	r2,zero
 8007a0c:	003fee06 	br	80079c8 <__alt_data_end+0xfc0079c8>

08007a10 <_malloc_trim_r>:
 8007a10:	defffb04 	addi	sp,sp,-20
 8007a14:	dcc00315 	stw	r19,12(sp)
 8007a18:	04c20074 	movhi	r19,2049
 8007a1c:	dc800215 	stw	r18,8(sp)
 8007a20:	dc400115 	stw	r17,4(sp)
 8007a24:	dc000015 	stw	r16,0(sp)
 8007a28:	dfc00415 	stw	ra,16(sp)
 8007a2c:	2821883a 	mov	r16,r5
 8007a30:	9cfa7d04 	addi	r19,r19,-5644
 8007a34:	2025883a 	mov	r18,r4
 8007a38:	800bd040 	call	800bd04 <__malloc_lock>
 8007a3c:	98800217 	ldw	r2,8(r19)
 8007a40:	14400117 	ldw	r17,4(r2)
 8007a44:	00bfff04 	movi	r2,-4
 8007a48:	88a2703a 	and	r17,r17,r2
 8007a4c:	8c21c83a 	sub	r16,r17,r16
 8007a50:	8403fbc4 	addi	r16,r16,4079
 8007a54:	8020d33a 	srli	r16,r16,12
 8007a58:	0083ffc4 	movi	r2,4095
 8007a5c:	843fffc4 	addi	r16,r16,-1
 8007a60:	8020933a 	slli	r16,r16,12
 8007a64:	1400060e 	bge	r2,r16,8007a80 <_malloc_trim_r+0x70>
 8007a68:	000b883a 	mov	r5,zero
 8007a6c:	9009883a 	mov	r4,r18
 8007a70:	80062940 	call	8006294 <_sbrk_r>
 8007a74:	98c00217 	ldw	r3,8(r19)
 8007a78:	1c47883a 	add	r3,r3,r17
 8007a7c:	10c00a26 	beq	r2,r3,8007aa8 <_malloc_trim_r+0x98>
 8007a80:	9009883a 	mov	r4,r18
 8007a84:	800bd280 	call	800bd28 <__malloc_unlock>
 8007a88:	0005883a 	mov	r2,zero
 8007a8c:	dfc00417 	ldw	ra,16(sp)
 8007a90:	dcc00317 	ldw	r19,12(sp)
 8007a94:	dc800217 	ldw	r18,8(sp)
 8007a98:	dc400117 	ldw	r17,4(sp)
 8007a9c:	dc000017 	ldw	r16,0(sp)
 8007aa0:	dec00504 	addi	sp,sp,20
 8007aa4:	f800283a 	ret
 8007aa8:	040bc83a 	sub	r5,zero,r16
 8007aac:	9009883a 	mov	r4,r18
 8007ab0:	80062940 	call	8006294 <_sbrk_r>
 8007ab4:	00ffffc4 	movi	r3,-1
 8007ab8:	10c00d26 	beq	r2,r3,8007af0 <_malloc_trim_r+0xe0>
 8007abc:	00c20074 	movhi	r3,2049
 8007ac0:	18c79404 	addi	r3,r3,7760
 8007ac4:	18800017 	ldw	r2,0(r3)
 8007ac8:	99000217 	ldw	r4,8(r19)
 8007acc:	8c23c83a 	sub	r17,r17,r16
 8007ad0:	8c400054 	ori	r17,r17,1
 8007ad4:	1421c83a 	sub	r16,r2,r16
 8007ad8:	24400115 	stw	r17,4(r4)
 8007adc:	9009883a 	mov	r4,r18
 8007ae0:	1c000015 	stw	r16,0(r3)
 8007ae4:	800bd280 	call	800bd28 <__malloc_unlock>
 8007ae8:	00800044 	movi	r2,1
 8007aec:	003fe706 	br	8007a8c <__alt_data_end+0xfc007a8c>
 8007af0:	000b883a 	mov	r5,zero
 8007af4:	9009883a 	mov	r4,r18
 8007af8:	80062940 	call	8006294 <_sbrk_r>
 8007afc:	99000217 	ldw	r4,8(r19)
 8007b00:	014003c4 	movi	r5,15
 8007b04:	1107c83a 	sub	r3,r2,r4
 8007b08:	28ffdd0e 	bge	r5,r3,8007a80 <__alt_data_end+0xfc007a80>
 8007b0c:	01420074 	movhi	r5,2049
 8007b10:	29400604 	addi	r5,r5,24
 8007b14:	29400017 	ldw	r5,0(r5)
 8007b18:	18c00054 	ori	r3,r3,1
 8007b1c:	20c00115 	stw	r3,4(r4)
 8007b20:	00c20074 	movhi	r3,2049
 8007b24:	1145c83a 	sub	r2,r2,r5
 8007b28:	18c79404 	addi	r3,r3,7760
 8007b2c:	18800015 	stw	r2,0(r3)
 8007b30:	003fd306 	br	8007a80 <__alt_data_end+0xfc007a80>

08007b34 <_free_r>:
 8007b34:	28004126 	beq	r5,zero,8007c3c <_free_r+0x108>
 8007b38:	defffd04 	addi	sp,sp,-12
 8007b3c:	dc400115 	stw	r17,4(sp)
 8007b40:	dc000015 	stw	r16,0(sp)
 8007b44:	2023883a 	mov	r17,r4
 8007b48:	2821883a 	mov	r16,r5
 8007b4c:	dfc00215 	stw	ra,8(sp)
 8007b50:	800bd040 	call	800bd04 <__malloc_lock>
 8007b54:	81ffff17 	ldw	r7,-4(r16)
 8007b58:	00bfff84 	movi	r2,-2
 8007b5c:	01020074 	movhi	r4,2049
 8007b60:	81bffe04 	addi	r6,r16,-8
 8007b64:	3884703a 	and	r2,r7,r2
 8007b68:	213a7d04 	addi	r4,r4,-5644
 8007b6c:	308b883a 	add	r5,r6,r2
 8007b70:	2a400117 	ldw	r9,4(r5)
 8007b74:	22000217 	ldw	r8,8(r4)
 8007b78:	00ffff04 	movi	r3,-4
 8007b7c:	48c6703a 	and	r3,r9,r3
 8007b80:	2a005726 	beq	r5,r8,8007ce0 <_free_r+0x1ac>
 8007b84:	28c00115 	stw	r3,4(r5)
 8007b88:	39c0004c 	andi	r7,r7,1
 8007b8c:	3800091e 	bne	r7,zero,8007bb4 <_free_r+0x80>
 8007b90:	823ffe17 	ldw	r8,-8(r16)
 8007b94:	22400204 	addi	r9,r4,8
 8007b98:	320dc83a 	sub	r6,r6,r8
 8007b9c:	31c00217 	ldw	r7,8(r6)
 8007ba0:	1205883a 	add	r2,r2,r8
 8007ba4:	3a406526 	beq	r7,r9,8007d3c <_free_r+0x208>
 8007ba8:	32000317 	ldw	r8,12(r6)
 8007bac:	3a000315 	stw	r8,12(r7)
 8007bb0:	41c00215 	stw	r7,8(r8)
 8007bb4:	28cf883a 	add	r7,r5,r3
 8007bb8:	39c00117 	ldw	r7,4(r7)
 8007bbc:	39c0004c 	andi	r7,r7,1
 8007bc0:	38003a26 	beq	r7,zero,8007cac <_free_r+0x178>
 8007bc4:	10c00054 	ori	r3,r2,1
 8007bc8:	30c00115 	stw	r3,4(r6)
 8007bcc:	3087883a 	add	r3,r6,r2
 8007bd0:	18800015 	stw	r2,0(r3)
 8007bd4:	00c07fc4 	movi	r3,511
 8007bd8:	18801936 	bltu	r3,r2,8007c40 <_free_r+0x10c>
 8007bdc:	1004d0fa 	srli	r2,r2,3
 8007be0:	01c00044 	movi	r7,1
 8007be4:	21400117 	ldw	r5,4(r4)
 8007be8:	10c00044 	addi	r3,r2,1
 8007bec:	18c7883a 	add	r3,r3,r3
 8007bf0:	1005d0ba 	srai	r2,r2,2
 8007bf4:	18c7883a 	add	r3,r3,r3
 8007bf8:	18c7883a 	add	r3,r3,r3
 8007bfc:	1907883a 	add	r3,r3,r4
 8007c00:	3884983a 	sll	r2,r7,r2
 8007c04:	19c00017 	ldw	r7,0(r3)
 8007c08:	1a3ffe04 	addi	r8,r3,-8
 8007c0c:	1144b03a 	or	r2,r2,r5
 8007c10:	32000315 	stw	r8,12(r6)
 8007c14:	31c00215 	stw	r7,8(r6)
 8007c18:	20800115 	stw	r2,4(r4)
 8007c1c:	19800015 	stw	r6,0(r3)
 8007c20:	39800315 	stw	r6,12(r7)
 8007c24:	8809883a 	mov	r4,r17
 8007c28:	dfc00217 	ldw	ra,8(sp)
 8007c2c:	dc400117 	ldw	r17,4(sp)
 8007c30:	dc000017 	ldw	r16,0(sp)
 8007c34:	dec00304 	addi	sp,sp,12
 8007c38:	800bd281 	jmpi	800bd28 <__malloc_unlock>
 8007c3c:	f800283a 	ret
 8007c40:	100ad27a 	srli	r5,r2,9
 8007c44:	00c00104 	movi	r3,4
 8007c48:	19404a36 	bltu	r3,r5,8007d74 <_free_r+0x240>
 8007c4c:	100ad1ba 	srli	r5,r2,6
 8007c50:	28c00e44 	addi	r3,r5,57
 8007c54:	18c7883a 	add	r3,r3,r3
 8007c58:	29400e04 	addi	r5,r5,56
 8007c5c:	18c7883a 	add	r3,r3,r3
 8007c60:	18c7883a 	add	r3,r3,r3
 8007c64:	1909883a 	add	r4,r3,r4
 8007c68:	20c00017 	ldw	r3,0(r4)
 8007c6c:	01c20074 	movhi	r7,2049
 8007c70:	213ffe04 	addi	r4,r4,-8
 8007c74:	39fa7d04 	addi	r7,r7,-5644
 8007c78:	20c04426 	beq	r4,r3,8007d8c <_free_r+0x258>
 8007c7c:	01ffff04 	movi	r7,-4
 8007c80:	19400117 	ldw	r5,4(r3)
 8007c84:	29ca703a 	and	r5,r5,r7
 8007c88:	1140022e 	bgeu	r2,r5,8007c94 <_free_r+0x160>
 8007c8c:	18c00217 	ldw	r3,8(r3)
 8007c90:	20fffb1e 	bne	r4,r3,8007c80 <__alt_data_end+0xfc007c80>
 8007c94:	19000317 	ldw	r4,12(r3)
 8007c98:	31000315 	stw	r4,12(r6)
 8007c9c:	30c00215 	stw	r3,8(r6)
 8007ca0:	21800215 	stw	r6,8(r4)
 8007ca4:	19800315 	stw	r6,12(r3)
 8007ca8:	003fde06 	br	8007c24 <__alt_data_end+0xfc007c24>
 8007cac:	29c00217 	ldw	r7,8(r5)
 8007cb0:	10c5883a 	add	r2,r2,r3
 8007cb4:	00c20074 	movhi	r3,2049
 8007cb8:	18fa7f04 	addi	r3,r3,-5636
 8007cbc:	38c03b26 	beq	r7,r3,8007dac <_free_r+0x278>
 8007cc0:	2a000317 	ldw	r8,12(r5)
 8007cc4:	11400054 	ori	r5,r2,1
 8007cc8:	3087883a 	add	r3,r6,r2
 8007ccc:	3a000315 	stw	r8,12(r7)
 8007cd0:	41c00215 	stw	r7,8(r8)
 8007cd4:	31400115 	stw	r5,4(r6)
 8007cd8:	18800015 	stw	r2,0(r3)
 8007cdc:	003fbd06 	br	8007bd4 <__alt_data_end+0xfc007bd4>
 8007ce0:	39c0004c 	andi	r7,r7,1
 8007ce4:	10c5883a 	add	r2,r2,r3
 8007ce8:	3800071e 	bne	r7,zero,8007d08 <_free_r+0x1d4>
 8007cec:	81fffe17 	ldw	r7,-8(r16)
 8007cf0:	31cdc83a 	sub	r6,r6,r7
 8007cf4:	30c00317 	ldw	r3,12(r6)
 8007cf8:	31400217 	ldw	r5,8(r6)
 8007cfc:	11c5883a 	add	r2,r2,r7
 8007d00:	28c00315 	stw	r3,12(r5)
 8007d04:	19400215 	stw	r5,8(r3)
 8007d08:	10c00054 	ori	r3,r2,1
 8007d0c:	30c00115 	stw	r3,4(r6)
 8007d10:	00c20074 	movhi	r3,2049
 8007d14:	18c00704 	addi	r3,r3,28
 8007d18:	18c00017 	ldw	r3,0(r3)
 8007d1c:	21800215 	stw	r6,8(r4)
 8007d20:	10ffc036 	bltu	r2,r3,8007c24 <__alt_data_end+0xfc007c24>
 8007d24:	00820074 	movhi	r2,2049
 8007d28:	10878b04 	addi	r2,r2,7724
 8007d2c:	11400017 	ldw	r5,0(r2)
 8007d30:	8809883a 	mov	r4,r17
 8007d34:	8007a100 	call	8007a10 <_malloc_trim_r>
 8007d38:	003fba06 	br	8007c24 <__alt_data_end+0xfc007c24>
 8007d3c:	28c9883a 	add	r4,r5,r3
 8007d40:	21000117 	ldw	r4,4(r4)
 8007d44:	2100004c 	andi	r4,r4,1
 8007d48:	2000391e 	bne	r4,zero,8007e30 <_free_r+0x2fc>
 8007d4c:	29c00217 	ldw	r7,8(r5)
 8007d50:	29000317 	ldw	r4,12(r5)
 8007d54:	1885883a 	add	r2,r3,r2
 8007d58:	10c00054 	ori	r3,r2,1
 8007d5c:	39000315 	stw	r4,12(r7)
 8007d60:	21c00215 	stw	r7,8(r4)
 8007d64:	30c00115 	stw	r3,4(r6)
 8007d68:	308d883a 	add	r6,r6,r2
 8007d6c:	30800015 	stw	r2,0(r6)
 8007d70:	003fac06 	br	8007c24 <__alt_data_end+0xfc007c24>
 8007d74:	00c00504 	movi	r3,20
 8007d78:	19401536 	bltu	r3,r5,8007dd0 <_free_r+0x29c>
 8007d7c:	28c01704 	addi	r3,r5,92
 8007d80:	18c7883a 	add	r3,r3,r3
 8007d84:	294016c4 	addi	r5,r5,91
 8007d88:	003fb406 	br	8007c5c <__alt_data_end+0xfc007c5c>
 8007d8c:	280bd0ba 	srai	r5,r5,2
 8007d90:	00c00044 	movi	r3,1
 8007d94:	38800117 	ldw	r2,4(r7)
 8007d98:	194a983a 	sll	r5,r3,r5
 8007d9c:	2007883a 	mov	r3,r4
 8007da0:	2884b03a 	or	r2,r5,r2
 8007da4:	38800115 	stw	r2,4(r7)
 8007da8:	003fbb06 	br	8007c98 <__alt_data_end+0xfc007c98>
 8007dac:	21800515 	stw	r6,20(r4)
 8007db0:	21800415 	stw	r6,16(r4)
 8007db4:	10c00054 	ori	r3,r2,1
 8007db8:	31c00315 	stw	r7,12(r6)
 8007dbc:	31c00215 	stw	r7,8(r6)
 8007dc0:	30c00115 	stw	r3,4(r6)
 8007dc4:	308d883a 	add	r6,r6,r2
 8007dc8:	30800015 	stw	r2,0(r6)
 8007dcc:	003f9506 	br	8007c24 <__alt_data_end+0xfc007c24>
 8007dd0:	00c01504 	movi	r3,84
 8007dd4:	19400536 	bltu	r3,r5,8007dec <_free_r+0x2b8>
 8007dd8:	100ad33a 	srli	r5,r2,12
 8007ddc:	28c01bc4 	addi	r3,r5,111
 8007de0:	18c7883a 	add	r3,r3,r3
 8007de4:	29401b84 	addi	r5,r5,110
 8007de8:	003f9c06 	br	8007c5c <__alt_data_end+0xfc007c5c>
 8007dec:	00c05504 	movi	r3,340
 8007df0:	19400536 	bltu	r3,r5,8007e08 <_free_r+0x2d4>
 8007df4:	100ad3fa 	srli	r5,r2,15
 8007df8:	28c01e04 	addi	r3,r5,120
 8007dfc:	18c7883a 	add	r3,r3,r3
 8007e00:	29401dc4 	addi	r5,r5,119
 8007e04:	003f9506 	br	8007c5c <__alt_data_end+0xfc007c5c>
 8007e08:	00c15504 	movi	r3,1364
 8007e0c:	19400536 	bltu	r3,r5,8007e24 <_free_r+0x2f0>
 8007e10:	100ad4ba 	srli	r5,r2,18
 8007e14:	28c01f44 	addi	r3,r5,125
 8007e18:	18c7883a 	add	r3,r3,r3
 8007e1c:	29401f04 	addi	r5,r5,124
 8007e20:	003f8e06 	br	8007c5c <__alt_data_end+0xfc007c5c>
 8007e24:	00c03f84 	movi	r3,254
 8007e28:	01401f84 	movi	r5,126
 8007e2c:	003f8b06 	br	8007c5c <__alt_data_end+0xfc007c5c>
 8007e30:	10c00054 	ori	r3,r2,1
 8007e34:	30c00115 	stw	r3,4(r6)
 8007e38:	308d883a 	add	r6,r6,r2
 8007e3c:	30800015 	stw	r2,0(r6)
 8007e40:	003f7806 	br	8007c24 <__alt_data_end+0xfc007c24>

08007e44 <memmove>:
 8007e44:	2005883a 	mov	r2,r4
 8007e48:	29000b2e 	bgeu	r5,r4,8007e78 <memmove+0x34>
 8007e4c:	298f883a 	add	r7,r5,r6
 8007e50:	21c0092e 	bgeu	r4,r7,8007e78 <memmove+0x34>
 8007e54:	2187883a 	add	r3,r4,r6
 8007e58:	198bc83a 	sub	r5,r3,r6
 8007e5c:	30004826 	beq	r6,zero,8007f80 <memmove+0x13c>
 8007e60:	39ffffc4 	addi	r7,r7,-1
 8007e64:	39000003 	ldbu	r4,0(r7)
 8007e68:	18ffffc4 	addi	r3,r3,-1
 8007e6c:	19000005 	stb	r4,0(r3)
 8007e70:	28fffb1e 	bne	r5,r3,8007e60 <__alt_data_end+0xfc007e60>
 8007e74:	f800283a 	ret
 8007e78:	00c003c4 	movi	r3,15
 8007e7c:	1980412e 	bgeu	r3,r6,8007f84 <memmove+0x140>
 8007e80:	2886b03a 	or	r3,r5,r2
 8007e84:	18c000cc 	andi	r3,r3,3
 8007e88:	1800401e 	bne	r3,zero,8007f8c <memmove+0x148>
 8007e8c:	33fffc04 	addi	r15,r6,-16
 8007e90:	781ed13a 	srli	r15,r15,4
 8007e94:	28c00104 	addi	r3,r5,4
 8007e98:	13400104 	addi	r13,r2,4
 8007e9c:	781c913a 	slli	r14,r15,4
 8007ea0:	2b000204 	addi	r12,r5,8
 8007ea4:	12c00204 	addi	r11,r2,8
 8007ea8:	73800504 	addi	r14,r14,20
 8007eac:	2a800304 	addi	r10,r5,12
 8007eb0:	12400304 	addi	r9,r2,12
 8007eb4:	2b9d883a 	add	r14,r5,r14
 8007eb8:	2811883a 	mov	r8,r5
 8007ebc:	100f883a 	mov	r7,r2
 8007ec0:	41000017 	ldw	r4,0(r8)
 8007ec4:	39c00404 	addi	r7,r7,16
 8007ec8:	18c00404 	addi	r3,r3,16
 8007ecc:	393ffc15 	stw	r4,-16(r7)
 8007ed0:	193ffc17 	ldw	r4,-16(r3)
 8007ed4:	6b400404 	addi	r13,r13,16
 8007ed8:	5ac00404 	addi	r11,r11,16
 8007edc:	693ffc15 	stw	r4,-16(r13)
 8007ee0:	61000017 	ldw	r4,0(r12)
 8007ee4:	4a400404 	addi	r9,r9,16
 8007ee8:	42000404 	addi	r8,r8,16
 8007eec:	593ffc15 	stw	r4,-16(r11)
 8007ef0:	51000017 	ldw	r4,0(r10)
 8007ef4:	63000404 	addi	r12,r12,16
 8007ef8:	52800404 	addi	r10,r10,16
 8007efc:	493ffc15 	stw	r4,-16(r9)
 8007f00:	1bbfef1e 	bne	r3,r14,8007ec0 <__alt_data_end+0xfc007ec0>
 8007f04:	79000044 	addi	r4,r15,1
 8007f08:	2008913a 	slli	r4,r4,4
 8007f0c:	328003cc 	andi	r10,r6,15
 8007f10:	02c000c4 	movi	r11,3
 8007f14:	1107883a 	add	r3,r2,r4
 8007f18:	290b883a 	add	r5,r5,r4
 8007f1c:	5a801e2e 	bgeu	r11,r10,8007f98 <memmove+0x154>
 8007f20:	1813883a 	mov	r9,r3
 8007f24:	2811883a 	mov	r8,r5
 8007f28:	500f883a 	mov	r7,r10
 8007f2c:	41000017 	ldw	r4,0(r8)
 8007f30:	4a400104 	addi	r9,r9,4
 8007f34:	39ffff04 	addi	r7,r7,-4
 8007f38:	493fff15 	stw	r4,-4(r9)
 8007f3c:	42000104 	addi	r8,r8,4
 8007f40:	59fffa36 	bltu	r11,r7,8007f2c <__alt_data_end+0xfc007f2c>
 8007f44:	513fff04 	addi	r4,r10,-4
 8007f48:	2008d0ba 	srli	r4,r4,2
 8007f4c:	318000cc 	andi	r6,r6,3
 8007f50:	21000044 	addi	r4,r4,1
 8007f54:	2109883a 	add	r4,r4,r4
 8007f58:	2109883a 	add	r4,r4,r4
 8007f5c:	1907883a 	add	r3,r3,r4
 8007f60:	290b883a 	add	r5,r5,r4
 8007f64:	30000b26 	beq	r6,zero,8007f94 <memmove+0x150>
 8007f68:	198d883a 	add	r6,r3,r6
 8007f6c:	29c00003 	ldbu	r7,0(r5)
 8007f70:	18c00044 	addi	r3,r3,1
 8007f74:	29400044 	addi	r5,r5,1
 8007f78:	19ffffc5 	stb	r7,-1(r3)
 8007f7c:	19bffb1e 	bne	r3,r6,8007f6c <__alt_data_end+0xfc007f6c>
 8007f80:	f800283a 	ret
 8007f84:	1007883a 	mov	r3,r2
 8007f88:	003ff606 	br	8007f64 <__alt_data_end+0xfc007f64>
 8007f8c:	1007883a 	mov	r3,r2
 8007f90:	003ff506 	br	8007f68 <__alt_data_end+0xfc007f68>
 8007f94:	f800283a 	ret
 8007f98:	500d883a 	mov	r6,r10
 8007f9c:	003ff106 	br	8007f64 <__alt_data_end+0xfc007f64>

08007fa0 <memset>:
 8007fa0:	20c000cc 	andi	r3,r4,3
 8007fa4:	2005883a 	mov	r2,r4
 8007fa8:	18004426 	beq	r3,zero,80080bc <memset+0x11c>
 8007fac:	31ffffc4 	addi	r7,r6,-1
 8007fb0:	30004026 	beq	r6,zero,80080b4 <memset+0x114>
 8007fb4:	2813883a 	mov	r9,r5
 8007fb8:	200d883a 	mov	r6,r4
 8007fbc:	2007883a 	mov	r3,r4
 8007fc0:	00000406 	br	8007fd4 <memset+0x34>
 8007fc4:	3a3fffc4 	addi	r8,r7,-1
 8007fc8:	31800044 	addi	r6,r6,1
 8007fcc:	38003926 	beq	r7,zero,80080b4 <memset+0x114>
 8007fd0:	400f883a 	mov	r7,r8
 8007fd4:	18c00044 	addi	r3,r3,1
 8007fd8:	32400005 	stb	r9,0(r6)
 8007fdc:	1a0000cc 	andi	r8,r3,3
 8007fe0:	403ff81e 	bne	r8,zero,8007fc4 <__alt_data_end+0xfc007fc4>
 8007fe4:	010000c4 	movi	r4,3
 8007fe8:	21c02d2e 	bgeu	r4,r7,80080a0 <memset+0x100>
 8007fec:	29003fcc 	andi	r4,r5,255
 8007ff0:	200c923a 	slli	r6,r4,8
 8007ff4:	3108b03a 	or	r4,r6,r4
 8007ff8:	200c943a 	slli	r6,r4,16
 8007ffc:	218cb03a 	or	r6,r4,r6
 8008000:	010003c4 	movi	r4,15
 8008004:	21c0182e 	bgeu	r4,r7,8008068 <memset+0xc8>
 8008008:	3b3ffc04 	addi	r12,r7,-16
 800800c:	6018d13a 	srli	r12,r12,4
 8008010:	1a000104 	addi	r8,r3,4
 8008014:	1ac00204 	addi	r11,r3,8
 8008018:	6008913a 	slli	r4,r12,4
 800801c:	1a800304 	addi	r10,r3,12
 8008020:	1813883a 	mov	r9,r3
 8008024:	21000504 	addi	r4,r4,20
 8008028:	1909883a 	add	r4,r3,r4
 800802c:	49800015 	stw	r6,0(r9)
 8008030:	41800015 	stw	r6,0(r8)
 8008034:	59800015 	stw	r6,0(r11)
 8008038:	51800015 	stw	r6,0(r10)
 800803c:	42000404 	addi	r8,r8,16
 8008040:	4a400404 	addi	r9,r9,16
 8008044:	5ac00404 	addi	r11,r11,16
 8008048:	52800404 	addi	r10,r10,16
 800804c:	413ff71e 	bne	r8,r4,800802c <__alt_data_end+0xfc00802c>
 8008050:	63000044 	addi	r12,r12,1
 8008054:	6018913a 	slli	r12,r12,4
 8008058:	39c003cc 	andi	r7,r7,15
 800805c:	010000c4 	movi	r4,3
 8008060:	1b07883a 	add	r3,r3,r12
 8008064:	21c00e2e 	bgeu	r4,r7,80080a0 <memset+0x100>
 8008068:	1813883a 	mov	r9,r3
 800806c:	3811883a 	mov	r8,r7
 8008070:	010000c4 	movi	r4,3
 8008074:	49800015 	stw	r6,0(r9)
 8008078:	423fff04 	addi	r8,r8,-4
 800807c:	4a400104 	addi	r9,r9,4
 8008080:	223ffc36 	bltu	r4,r8,8008074 <__alt_data_end+0xfc008074>
 8008084:	393fff04 	addi	r4,r7,-4
 8008088:	2008d0ba 	srli	r4,r4,2
 800808c:	39c000cc 	andi	r7,r7,3
 8008090:	21000044 	addi	r4,r4,1
 8008094:	2109883a 	add	r4,r4,r4
 8008098:	2109883a 	add	r4,r4,r4
 800809c:	1907883a 	add	r3,r3,r4
 80080a0:	38000526 	beq	r7,zero,80080b8 <memset+0x118>
 80080a4:	19cf883a 	add	r7,r3,r7
 80080a8:	19400005 	stb	r5,0(r3)
 80080ac:	18c00044 	addi	r3,r3,1
 80080b0:	38fffd1e 	bne	r7,r3,80080a8 <__alt_data_end+0xfc0080a8>
 80080b4:	f800283a 	ret
 80080b8:	f800283a 	ret
 80080bc:	2007883a 	mov	r3,r4
 80080c0:	300f883a 	mov	r7,r6
 80080c4:	003fc706 	br	8007fe4 <__alt_data_end+0xfc007fe4>

080080c8 <_realloc_r>:
 80080c8:	defff604 	addi	sp,sp,-40
 80080cc:	dc800215 	stw	r18,8(sp)
 80080d0:	dfc00915 	stw	ra,36(sp)
 80080d4:	df000815 	stw	fp,32(sp)
 80080d8:	ddc00715 	stw	r23,28(sp)
 80080dc:	dd800615 	stw	r22,24(sp)
 80080e0:	dd400515 	stw	r21,20(sp)
 80080e4:	dd000415 	stw	r20,16(sp)
 80080e8:	dcc00315 	stw	r19,12(sp)
 80080ec:	dc400115 	stw	r17,4(sp)
 80080f0:	dc000015 	stw	r16,0(sp)
 80080f4:	3025883a 	mov	r18,r6
 80080f8:	2800b726 	beq	r5,zero,80083d8 <_realloc_r+0x310>
 80080fc:	282b883a 	mov	r21,r5
 8008100:	2029883a 	mov	r20,r4
 8008104:	800bd040 	call	800bd04 <__malloc_lock>
 8008108:	a8bfff17 	ldw	r2,-4(r21)
 800810c:	043fff04 	movi	r16,-4
 8008110:	90c002c4 	addi	r3,r18,11
 8008114:	01000584 	movi	r4,22
 8008118:	acfffe04 	addi	r19,r21,-8
 800811c:	1420703a 	and	r16,r2,r16
 8008120:	20c0332e 	bgeu	r4,r3,80081f0 <_realloc_r+0x128>
 8008124:	047ffe04 	movi	r17,-8
 8008128:	1c62703a 	and	r17,r3,r17
 800812c:	8807883a 	mov	r3,r17
 8008130:	88005816 	blt	r17,zero,8008294 <_realloc_r+0x1cc>
 8008134:	8c805736 	bltu	r17,r18,8008294 <_realloc_r+0x1cc>
 8008138:	80c0300e 	bge	r16,r3,80081fc <_realloc_r+0x134>
 800813c:	07020074 	movhi	fp,2049
 8008140:	e73a7d04 	addi	fp,fp,-5644
 8008144:	e1c00217 	ldw	r7,8(fp)
 8008148:	9c09883a 	add	r4,r19,r16
 800814c:	22000117 	ldw	r8,4(r4)
 8008150:	21c06326 	beq	r4,r7,80082e0 <_realloc_r+0x218>
 8008154:	017fff84 	movi	r5,-2
 8008158:	414a703a 	and	r5,r8,r5
 800815c:	214b883a 	add	r5,r4,r5
 8008160:	29800117 	ldw	r6,4(r5)
 8008164:	3180004c 	andi	r6,r6,1
 8008168:	30003f26 	beq	r6,zero,8008268 <_realloc_r+0x1a0>
 800816c:	1080004c 	andi	r2,r2,1
 8008170:	10008326 	beq	r2,zero,8008380 <_realloc_r+0x2b8>
 8008174:	900b883a 	mov	r5,r18
 8008178:	a009883a 	mov	r4,r20
 800817c:	80047300 	call	8004730 <_malloc_r>
 8008180:	1025883a 	mov	r18,r2
 8008184:	10011e26 	beq	r2,zero,8008600 <_realloc_r+0x538>
 8008188:	a93fff17 	ldw	r4,-4(r21)
 800818c:	10fffe04 	addi	r3,r2,-8
 8008190:	00bfff84 	movi	r2,-2
 8008194:	2084703a 	and	r2,r4,r2
 8008198:	9885883a 	add	r2,r19,r2
 800819c:	1880ee26 	beq	r3,r2,8008558 <_realloc_r+0x490>
 80081a0:	81bfff04 	addi	r6,r16,-4
 80081a4:	00800904 	movi	r2,36
 80081a8:	1180b836 	bltu	r2,r6,800848c <_realloc_r+0x3c4>
 80081ac:	00c004c4 	movi	r3,19
 80081b0:	19809636 	bltu	r3,r6,800840c <_realloc_r+0x344>
 80081b4:	9005883a 	mov	r2,r18
 80081b8:	a807883a 	mov	r3,r21
 80081bc:	19000017 	ldw	r4,0(r3)
 80081c0:	11000015 	stw	r4,0(r2)
 80081c4:	19000117 	ldw	r4,4(r3)
 80081c8:	11000115 	stw	r4,4(r2)
 80081cc:	18c00217 	ldw	r3,8(r3)
 80081d0:	10c00215 	stw	r3,8(r2)
 80081d4:	a80b883a 	mov	r5,r21
 80081d8:	a009883a 	mov	r4,r20
 80081dc:	8007b340 	call	8007b34 <_free_r>
 80081e0:	a009883a 	mov	r4,r20
 80081e4:	800bd280 	call	800bd28 <__malloc_unlock>
 80081e8:	9005883a 	mov	r2,r18
 80081ec:	00001206 	br	8008238 <_realloc_r+0x170>
 80081f0:	00c00404 	movi	r3,16
 80081f4:	1823883a 	mov	r17,r3
 80081f8:	003fce06 	br	8008134 <__alt_data_end+0xfc008134>
 80081fc:	a825883a 	mov	r18,r21
 8008200:	8445c83a 	sub	r2,r16,r17
 8008204:	00c003c4 	movi	r3,15
 8008208:	18802636 	bltu	r3,r2,80082a4 <_realloc_r+0x1dc>
 800820c:	99800117 	ldw	r6,4(r19)
 8008210:	9c07883a 	add	r3,r19,r16
 8008214:	3180004c 	andi	r6,r6,1
 8008218:	3420b03a 	or	r16,r6,r16
 800821c:	9c000115 	stw	r16,4(r19)
 8008220:	18800117 	ldw	r2,4(r3)
 8008224:	10800054 	ori	r2,r2,1
 8008228:	18800115 	stw	r2,4(r3)
 800822c:	a009883a 	mov	r4,r20
 8008230:	800bd280 	call	800bd28 <__malloc_unlock>
 8008234:	9005883a 	mov	r2,r18
 8008238:	dfc00917 	ldw	ra,36(sp)
 800823c:	df000817 	ldw	fp,32(sp)
 8008240:	ddc00717 	ldw	r23,28(sp)
 8008244:	dd800617 	ldw	r22,24(sp)
 8008248:	dd400517 	ldw	r21,20(sp)
 800824c:	dd000417 	ldw	r20,16(sp)
 8008250:	dcc00317 	ldw	r19,12(sp)
 8008254:	dc800217 	ldw	r18,8(sp)
 8008258:	dc400117 	ldw	r17,4(sp)
 800825c:	dc000017 	ldw	r16,0(sp)
 8008260:	dec00a04 	addi	sp,sp,40
 8008264:	f800283a 	ret
 8008268:	017fff04 	movi	r5,-4
 800826c:	414a703a 	and	r5,r8,r5
 8008270:	814d883a 	add	r6,r16,r5
 8008274:	30c01f16 	blt	r6,r3,80082f4 <_realloc_r+0x22c>
 8008278:	20800317 	ldw	r2,12(r4)
 800827c:	20c00217 	ldw	r3,8(r4)
 8008280:	a825883a 	mov	r18,r21
 8008284:	3021883a 	mov	r16,r6
 8008288:	18800315 	stw	r2,12(r3)
 800828c:	10c00215 	stw	r3,8(r2)
 8008290:	003fdb06 	br	8008200 <__alt_data_end+0xfc008200>
 8008294:	00800304 	movi	r2,12
 8008298:	a0800015 	stw	r2,0(r20)
 800829c:	0005883a 	mov	r2,zero
 80082a0:	003fe506 	br	8008238 <__alt_data_end+0xfc008238>
 80082a4:	98c00117 	ldw	r3,4(r19)
 80082a8:	9c4b883a 	add	r5,r19,r17
 80082ac:	11000054 	ori	r4,r2,1
 80082b0:	18c0004c 	andi	r3,r3,1
 80082b4:	1c62b03a 	or	r17,r3,r17
 80082b8:	9c400115 	stw	r17,4(r19)
 80082bc:	29000115 	stw	r4,4(r5)
 80082c0:	2885883a 	add	r2,r5,r2
 80082c4:	10c00117 	ldw	r3,4(r2)
 80082c8:	29400204 	addi	r5,r5,8
 80082cc:	a009883a 	mov	r4,r20
 80082d0:	18c00054 	ori	r3,r3,1
 80082d4:	10c00115 	stw	r3,4(r2)
 80082d8:	8007b340 	call	8007b34 <_free_r>
 80082dc:	003fd306 	br	800822c <__alt_data_end+0xfc00822c>
 80082e0:	017fff04 	movi	r5,-4
 80082e4:	414a703a 	and	r5,r8,r5
 80082e8:	89800404 	addi	r6,r17,16
 80082ec:	8151883a 	add	r8,r16,r5
 80082f0:	4180590e 	bge	r8,r6,8008458 <_realloc_r+0x390>
 80082f4:	1080004c 	andi	r2,r2,1
 80082f8:	103f9e1e 	bne	r2,zero,8008174 <__alt_data_end+0xfc008174>
 80082fc:	adbffe17 	ldw	r22,-8(r21)
 8008300:	00bfff04 	movi	r2,-4
 8008304:	9dadc83a 	sub	r22,r19,r22
 8008308:	b1800117 	ldw	r6,4(r22)
 800830c:	3084703a 	and	r2,r6,r2
 8008310:	20002026 	beq	r4,zero,8008394 <_realloc_r+0x2cc>
 8008314:	80af883a 	add	r23,r16,r2
 8008318:	b96f883a 	add	r23,r23,r5
 800831c:	21c05f26 	beq	r4,r7,800849c <_realloc_r+0x3d4>
 8008320:	b8c01c16 	blt	r23,r3,8008394 <_realloc_r+0x2cc>
 8008324:	20800317 	ldw	r2,12(r4)
 8008328:	20c00217 	ldw	r3,8(r4)
 800832c:	81bfff04 	addi	r6,r16,-4
 8008330:	01000904 	movi	r4,36
 8008334:	18800315 	stw	r2,12(r3)
 8008338:	10c00215 	stw	r3,8(r2)
 800833c:	b0c00217 	ldw	r3,8(r22)
 8008340:	b0800317 	ldw	r2,12(r22)
 8008344:	b4800204 	addi	r18,r22,8
 8008348:	18800315 	stw	r2,12(r3)
 800834c:	10c00215 	stw	r3,8(r2)
 8008350:	21801b36 	bltu	r4,r6,80083c0 <_realloc_r+0x2f8>
 8008354:	008004c4 	movi	r2,19
 8008358:	1180352e 	bgeu	r2,r6,8008430 <_realloc_r+0x368>
 800835c:	a8800017 	ldw	r2,0(r21)
 8008360:	b0800215 	stw	r2,8(r22)
 8008364:	a8800117 	ldw	r2,4(r21)
 8008368:	b0800315 	stw	r2,12(r22)
 800836c:	008006c4 	movi	r2,27
 8008370:	11807f36 	bltu	r2,r6,8008570 <_realloc_r+0x4a8>
 8008374:	b0800404 	addi	r2,r22,16
 8008378:	ad400204 	addi	r21,r21,8
 800837c:	00002d06 	br	8008434 <_realloc_r+0x36c>
 8008380:	adbffe17 	ldw	r22,-8(r21)
 8008384:	00bfff04 	movi	r2,-4
 8008388:	9dadc83a 	sub	r22,r19,r22
 800838c:	b1000117 	ldw	r4,4(r22)
 8008390:	2084703a 	and	r2,r4,r2
 8008394:	b03f7726 	beq	r22,zero,8008174 <__alt_data_end+0xfc008174>
 8008398:	80af883a 	add	r23,r16,r2
 800839c:	b8ff7516 	blt	r23,r3,8008174 <__alt_data_end+0xfc008174>
 80083a0:	b0800317 	ldw	r2,12(r22)
 80083a4:	b0c00217 	ldw	r3,8(r22)
 80083a8:	81bfff04 	addi	r6,r16,-4
 80083ac:	01000904 	movi	r4,36
 80083b0:	18800315 	stw	r2,12(r3)
 80083b4:	10c00215 	stw	r3,8(r2)
 80083b8:	b4800204 	addi	r18,r22,8
 80083bc:	21bfe52e 	bgeu	r4,r6,8008354 <__alt_data_end+0xfc008354>
 80083c0:	a80b883a 	mov	r5,r21
 80083c4:	9009883a 	mov	r4,r18
 80083c8:	8007e440 	call	8007e44 <memmove>
 80083cc:	b821883a 	mov	r16,r23
 80083d0:	b027883a 	mov	r19,r22
 80083d4:	003f8a06 	br	8008200 <__alt_data_end+0xfc008200>
 80083d8:	300b883a 	mov	r5,r6
 80083dc:	dfc00917 	ldw	ra,36(sp)
 80083e0:	df000817 	ldw	fp,32(sp)
 80083e4:	ddc00717 	ldw	r23,28(sp)
 80083e8:	dd800617 	ldw	r22,24(sp)
 80083ec:	dd400517 	ldw	r21,20(sp)
 80083f0:	dd000417 	ldw	r20,16(sp)
 80083f4:	dcc00317 	ldw	r19,12(sp)
 80083f8:	dc800217 	ldw	r18,8(sp)
 80083fc:	dc400117 	ldw	r17,4(sp)
 8008400:	dc000017 	ldw	r16,0(sp)
 8008404:	dec00a04 	addi	sp,sp,40
 8008408:	80047301 	jmpi	8004730 <_malloc_r>
 800840c:	a8c00017 	ldw	r3,0(r21)
 8008410:	90c00015 	stw	r3,0(r18)
 8008414:	a8c00117 	ldw	r3,4(r21)
 8008418:	90c00115 	stw	r3,4(r18)
 800841c:	00c006c4 	movi	r3,27
 8008420:	19804536 	bltu	r3,r6,8008538 <_realloc_r+0x470>
 8008424:	90800204 	addi	r2,r18,8
 8008428:	a8c00204 	addi	r3,r21,8
 800842c:	003f6306 	br	80081bc <__alt_data_end+0xfc0081bc>
 8008430:	9005883a 	mov	r2,r18
 8008434:	a8c00017 	ldw	r3,0(r21)
 8008438:	b821883a 	mov	r16,r23
 800843c:	b027883a 	mov	r19,r22
 8008440:	10c00015 	stw	r3,0(r2)
 8008444:	a8c00117 	ldw	r3,4(r21)
 8008448:	10c00115 	stw	r3,4(r2)
 800844c:	a8c00217 	ldw	r3,8(r21)
 8008450:	10c00215 	stw	r3,8(r2)
 8008454:	003f6a06 	br	8008200 <__alt_data_end+0xfc008200>
 8008458:	9c67883a 	add	r19,r19,r17
 800845c:	4445c83a 	sub	r2,r8,r17
 8008460:	e4c00215 	stw	r19,8(fp)
 8008464:	10800054 	ori	r2,r2,1
 8008468:	98800115 	stw	r2,4(r19)
 800846c:	a8bfff17 	ldw	r2,-4(r21)
 8008470:	a009883a 	mov	r4,r20
 8008474:	1080004c 	andi	r2,r2,1
 8008478:	1462b03a 	or	r17,r2,r17
 800847c:	ac7fff15 	stw	r17,-4(r21)
 8008480:	800bd280 	call	800bd28 <__malloc_unlock>
 8008484:	a805883a 	mov	r2,r21
 8008488:	003f6b06 	br	8008238 <__alt_data_end+0xfc008238>
 800848c:	a80b883a 	mov	r5,r21
 8008490:	9009883a 	mov	r4,r18
 8008494:	8007e440 	call	8007e44 <memmove>
 8008498:	003f4e06 	br	80081d4 <__alt_data_end+0xfc0081d4>
 800849c:	89000404 	addi	r4,r17,16
 80084a0:	b93fbc16 	blt	r23,r4,8008394 <__alt_data_end+0xfc008394>
 80084a4:	b0800317 	ldw	r2,12(r22)
 80084a8:	b0c00217 	ldw	r3,8(r22)
 80084ac:	81bfff04 	addi	r6,r16,-4
 80084b0:	01000904 	movi	r4,36
 80084b4:	18800315 	stw	r2,12(r3)
 80084b8:	10c00215 	stw	r3,8(r2)
 80084bc:	b4800204 	addi	r18,r22,8
 80084c0:	21804336 	bltu	r4,r6,80085d0 <_realloc_r+0x508>
 80084c4:	008004c4 	movi	r2,19
 80084c8:	11803f2e 	bgeu	r2,r6,80085c8 <_realloc_r+0x500>
 80084cc:	a8800017 	ldw	r2,0(r21)
 80084d0:	b0800215 	stw	r2,8(r22)
 80084d4:	a8800117 	ldw	r2,4(r21)
 80084d8:	b0800315 	stw	r2,12(r22)
 80084dc:	008006c4 	movi	r2,27
 80084e0:	11803f36 	bltu	r2,r6,80085e0 <_realloc_r+0x518>
 80084e4:	b0800404 	addi	r2,r22,16
 80084e8:	ad400204 	addi	r21,r21,8
 80084ec:	a8c00017 	ldw	r3,0(r21)
 80084f0:	10c00015 	stw	r3,0(r2)
 80084f4:	a8c00117 	ldw	r3,4(r21)
 80084f8:	10c00115 	stw	r3,4(r2)
 80084fc:	a8c00217 	ldw	r3,8(r21)
 8008500:	10c00215 	stw	r3,8(r2)
 8008504:	b447883a 	add	r3,r22,r17
 8008508:	bc45c83a 	sub	r2,r23,r17
 800850c:	e0c00215 	stw	r3,8(fp)
 8008510:	10800054 	ori	r2,r2,1
 8008514:	18800115 	stw	r2,4(r3)
 8008518:	b0800117 	ldw	r2,4(r22)
 800851c:	a009883a 	mov	r4,r20
 8008520:	1080004c 	andi	r2,r2,1
 8008524:	1462b03a 	or	r17,r2,r17
 8008528:	b4400115 	stw	r17,4(r22)
 800852c:	800bd280 	call	800bd28 <__malloc_unlock>
 8008530:	9005883a 	mov	r2,r18
 8008534:	003f4006 	br	8008238 <__alt_data_end+0xfc008238>
 8008538:	a8c00217 	ldw	r3,8(r21)
 800853c:	90c00215 	stw	r3,8(r18)
 8008540:	a8c00317 	ldw	r3,12(r21)
 8008544:	90c00315 	stw	r3,12(r18)
 8008548:	30801126 	beq	r6,r2,8008590 <_realloc_r+0x4c8>
 800854c:	90800404 	addi	r2,r18,16
 8008550:	a8c00404 	addi	r3,r21,16
 8008554:	003f1906 	br	80081bc <__alt_data_end+0xfc0081bc>
 8008558:	90ffff17 	ldw	r3,-4(r18)
 800855c:	00bfff04 	movi	r2,-4
 8008560:	a825883a 	mov	r18,r21
 8008564:	1884703a 	and	r2,r3,r2
 8008568:	80a1883a 	add	r16,r16,r2
 800856c:	003f2406 	br	8008200 <__alt_data_end+0xfc008200>
 8008570:	a8800217 	ldw	r2,8(r21)
 8008574:	b0800415 	stw	r2,16(r22)
 8008578:	a8800317 	ldw	r2,12(r21)
 800857c:	b0800515 	stw	r2,20(r22)
 8008580:	31000a26 	beq	r6,r4,80085ac <_realloc_r+0x4e4>
 8008584:	b0800604 	addi	r2,r22,24
 8008588:	ad400404 	addi	r21,r21,16
 800858c:	003fa906 	br	8008434 <__alt_data_end+0xfc008434>
 8008590:	a9000417 	ldw	r4,16(r21)
 8008594:	90800604 	addi	r2,r18,24
 8008598:	a8c00604 	addi	r3,r21,24
 800859c:	91000415 	stw	r4,16(r18)
 80085a0:	a9000517 	ldw	r4,20(r21)
 80085a4:	91000515 	stw	r4,20(r18)
 80085a8:	003f0406 	br	80081bc <__alt_data_end+0xfc0081bc>
 80085ac:	a8c00417 	ldw	r3,16(r21)
 80085b0:	ad400604 	addi	r21,r21,24
 80085b4:	b0800804 	addi	r2,r22,32
 80085b8:	b0c00615 	stw	r3,24(r22)
 80085bc:	a8ffff17 	ldw	r3,-4(r21)
 80085c0:	b0c00715 	stw	r3,28(r22)
 80085c4:	003f9b06 	br	8008434 <__alt_data_end+0xfc008434>
 80085c8:	9005883a 	mov	r2,r18
 80085cc:	003fc706 	br	80084ec <__alt_data_end+0xfc0084ec>
 80085d0:	a80b883a 	mov	r5,r21
 80085d4:	9009883a 	mov	r4,r18
 80085d8:	8007e440 	call	8007e44 <memmove>
 80085dc:	003fc906 	br	8008504 <__alt_data_end+0xfc008504>
 80085e0:	a8800217 	ldw	r2,8(r21)
 80085e4:	b0800415 	stw	r2,16(r22)
 80085e8:	a8800317 	ldw	r2,12(r21)
 80085ec:	b0800515 	stw	r2,20(r22)
 80085f0:	31000726 	beq	r6,r4,8008610 <_realloc_r+0x548>
 80085f4:	b0800604 	addi	r2,r22,24
 80085f8:	ad400404 	addi	r21,r21,16
 80085fc:	003fbb06 	br	80084ec <__alt_data_end+0xfc0084ec>
 8008600:	a009883a 	mov	r4,r20
 8008604:	800bd280 	call	800bd28 <__malloc_unlock>
 8008608:	0005883a 	mov	r2,zero
 800860c:	003f0a06 	br	8008238 <__alt_data_end+0xfc008238>
 8008610:	a8c00417 	ldw	r3,16(r21)
 8008614:	ad400604 	addi	r21,r21,24
 8008618:	b0800804 	addi	r2,r22,32
 800861c:	b0c00615 	stw	r3,24(r22)
 8008620:	a8ffff17 	ldw	r3,-4(r21)
 8008624:	b0c00715 	stw	r3,28(r22)
 8008628:	003fb006 	br	80084ec <__alt_data_end+0xfc0084ec>

0800862c <__muldi3>:
 800862c:	defff604 	addi	sp,sp,-40
 8008630:	dd800615 	stw	r22,24(sp)
 8008634:	dd400515 	stw	r21,20(sp)
 8008638:	dc400115 	stw	r17,4(sp)
 800863c:	357fffcc 	andi	r21,r6,65535
 8008640:	2022d43a 	srli	r17,r4,16
 8008644:	25bfffcc 	andi	r22,r4,65535
 8008648:	dcc00315 	stw	r19,12(sp)
 800864c:	dc800215 	stw	r18,8(sp)
 8008650:	2027883a 	mov	r19,r4
 8008654:	2825883a 	mov	r18,r5
 8008658:	b009883a 	mov	r4,r22
 800865c:	a80b883a 	mov	r5,r21
 8008660:	dfc00915 	stw	ra,36(sp)
 8008664:	df000815 	stw	fp,32(sp)
 8008668:	ddc00715 	stw	r23,28(sp)
 800866c:	3839883a 	mov	fp,r7
 8008670:	302ed43a 	srli	r23,r6,16
 8008674:	dd000415 	stw	r20,16(sp)
 8008678:	dc000015 	stw	r16,0(sp)
 800867c:	3029883a 	mov	r20,r6
 8008680:	80008e80 	call	80008e8 <__mulsi3>
 8008684:	a80b883a 	mov	r5,r21
 8008688:	8809883a 	mov	r4,r17
 800868c:	1021883a 	mov	r16,r2
 8008690:	80008e80 	call	80008e8 <__mulsi3>
 8008694:	8809883a 	mov	r4,r17
 8008698:	b80b883a 	mov	r5,r23
 800869c:	102b883a 	mov	r21,r2
 80086a0:	80008e80 	call	80008e8 <__mulsi3>
 80086a4:	b80b883a 	mov	r5,r23
 80086a8:	b009883a 	mov	r4,r22
 80086ac:	1023883a 	mov	r17,r2
 80086b0:	80008e80 	call	80008e8 <__mulsi3>
 80086b4:	8006d43a 	srli	r3,r16,16
 80086b8:	1545883a 	add	r2,r2,r21
 80086bc:	1885883a 	add	r2,r3,r2
 80086c0:	1540022e 	bgeu	r2,r21,80086cc <__muldi3+0xa0>
 80086c4:	00c00074 	movhi	r3,1
 80086c8:	88e3883a 	add	r17,r17,r3
 80086cc:	1006d43a 	srli	r3,r2,16
 80086d0:	1004943a 	slli	r2,r2,16
 80086d4:	e00b883a 	mov	r5,fp
 80086d8:	9809883a 	mov	r4,r19
 80086dc:	843fffcc 	andi	r16,r16,65535
 80086e0:	1c63883a 	add	r17,r3,r17
 80086e4:	1421883a 	add	r16,r2,r16
 80086e8:	80008e80 	call	80008e8 <__mulsi3>
 80086ec:	900b883a 	mov	r5,r18
 80086f0:	a009883a 	mov	r4,r20
 80086f4:	1027883a 	mov	r19,r2
 80086f8:	80008e80 	call	80008e8 <__mulsi3>
 80086fc:	9885883a 	add	r2,r19,r2
 8008700:	1447883a 	add	r3,r2,r17
 8008704:	8005883a 	mov	r2,r16
 8008708:	dfc00917 	ldw	ra,36(sp)
 800870c:	df000817 	ldw	fp,32(sp)
 8008710:	ddc00717 	ldw	r23,28(sp)
 8008714:	dd800617 	ldw	r22,24(sp)
 8008718:	dd400517 	ldw	r21,20(sp)
 800871c:	dd000417 	ldw	r20,16(sp)
 8008720:	dcc00317 	ldw	r19,12(sp)
 8008724:	dc800217 	ldw	r18,8(sp)
 8008728:	dc400117 	ldw	r17,4(sp)
 800872c:	dc000017 	ldw	r16,0(sp)
 8008730:	dec00a04 	addi	sp,sp,40
 8008734:	f800283a 	ret

08008738 <__udivdi3>:
 8008738:	defff404 	addi	sp,sp,-48
 800873c:	dcc00515 	stw	r19,20(sp)
 8008740:	dc000215 	stw	r16,8(sp)
 8008744:	dfc00b15 	stw	ra,44(sp)
 8008748:	df000a15 	stw	fp,40(sp)
 800874c:	ddc00915 	stw	r23,36(sp)
 8008750:	dd800815 	stw	r22,32(sp)
 8008754:	dd400715 	stw	r21,28(sp)
 8008758:	dd000615 	stw	r20,24(sp)
 800875c:	dc800415 	stw	r18,16(sp)
 8008760:	dc400315 	stw	r17,12(sp)
 8008764:	2027883a 	mov	r19,r4
 8008768:	2821883a 	mov	r16,r5
 800876c:	3800461e 	bne	r7,zero,8008888 <__udivdi3+0x150>
 8008770:	3023883a 	mov	r17,r6
 8008774:	2025883a 	mov	r18,r4
 8008778:	2980572e 	bgeu	r5,r6,80088d8 <__udivdi3+0x1a0>
 800877c:	00bfffd4 	movui	r2,65535
 8008780:	282d883a 	mov	r22,r5
 8008784:	1180b236 	bltu	r2,r6,8008a50 <__udivdi3+0x318>
 8008788:	00803fc4 	movi	r2,255
 800878c:	1185803a 	cmpltu	r2,r2,r6
 8008790:	100490fa 	slli	r2,r2,3
 8008794:	3086d83a 	srl	r3,r6,r2
 8008798:	01020074 	movhi	r4,2049
 800879c:	21385104 	addi	r4,r4,-7868
 80087a0:	20c7883a 	add	r3,r4,r3
 80087a4:	18c00003 	ldbu	r3,0(r3)
 80087a8:	1885883a 	add	r2,r3,r2
 80087ac:	00c00804 	movi	r3,32
 80087b0:	1887c83a 	sub	r3,r3,r2
 80087b4:	18000526 	beq	r3,zero,80087cc <__udivdi3+0x94>
 80087b8:	80e0983a 	sll	r16,r16,r3
 80087bc:	9884d83a 	srl	r2,r19,r2
 80087c0:	30e2983a 	sll	r17,r6,r3
 80087c4:	98e4983a 	sll	r18,r19,r3
 80087c8:	142cb03a 	or	r22,r2,r16
 80087cc:	882ad43a 	srli	r21,r17,16
 80087d0:	b009883a 	mov	r4,r22
 80087d4:	8d3fffcc 	andi	r20,r17,65535
 80087d8:	a80b883a 	mov	r5,r21
 80087dc:	80008900 	call	8000890 <__umodsi3>
 80087e0:	b009883a 	mov	r4,r22
 80087e4:	a80b883a 	mov	r5,r21
 80087e8:	1027883a 	mov	r19,r2
 80087ec:	800082c0 	call	800082c <__udivsi3>
 80087f0:	100b883a 	mov	r5,r2
 80087f4:	a009883a 	mov	r4,r20
 80087f8:	102d883a 	mov	r22,r2
 80087fc:	80008e80 	call	80008e8 <__mulsi3>
 8008800:	9826943a 	slli	r19,r19,16
 8008804:	9006d43a 	srli	r3,r18,16
 8008808:	1cc6b03a 	or	r3,r3,r19
 800880c:	1880052e 	bgeu	r3,r2,8008824 <__udivdi3+0xec>
 8008810:	1c47883a 	add	r3,r3,r17
 8008814:	b13fffc4 	addi	r4,r22,-1
 8008818:	1c400136 	bltu	r3,r17,8008820 <__udivdi3+0xe8>
 800881c:	18814236 	bltu	r3,r2,8008d28 <__udivdi3+0x5f0>
 8008820:	202d883a 	mov	r22,r4
 8008824:	18a1c83a 	sub	r16,r3,r2
 8008828:	8009883a 	mov	r4,r16
 800882c:	a80b883a 	mov	r5,r21
 8008830:	80008900 	call	8000890 <__umodsi3>
 8008834:	1027883a 	mov	r19,r2
 8008838:	8009883a 	mov	r4,r16
 800883c:	a80b883a 	mov	r5,r21
 8008840:	9826943a 	slli	r19,r19,16
 8008844:	800082c0 	call	800082c <__udivsi3>
 8008848:	100b883a 	mov	r5,r2
 800884c:	a009883a 	mov	r4,r20
 8008850:	94bfffcc 	andi	r18,r18,65535
 8008854:	1021883a 	mov	r16,r2
 8008858:	94e4b03a 	or	r18,r18,r19
 800885c:	80008e80 	call	80008e8 <__mulsi3>
 8008860:	9080052e 	bgeu	r18,r2,8008878 <__udivdi3+0x140>
 8008864:	8ca5883a 	add	r18,r17,r18
 8008868:	80ffffc4 	addi	r3,r16,-1
 800886c:	94410c36 	bltu	r18,r17,8008ca0 <__udivdi3+0x568>
 8008870:	90810b2e 	bgeu	r18,r2,8008ca0 <__udivdi3+0x568>
 8008874:	843fff84 	addi	r16,r16,-2
 8008878:	b004943a 	slli	r2,r22,16
 800887c:	0007883a 	mov	r3,zero
 8008880:	1404b03a 	or	r2,r2,r16
 8008884:	00005e06 	br	8008a00 <__udivdi3+0x2c8>
 8008888:	29c05b36 	bltu	r5,r7,80089f8 <__udivdi3+0x2c0>
 800888c:	00bfffd4 	movui	r2,65535
 8008890:	11c0672e 	bgeu	r2,r7,8008a30 <__udivdi3+0x2f8>
 8008894:	00804034 	movhi	r2,256
 8008898:	10bfffc4 	addi	r2,r2,-1
 800889c:	11c10a36 	bltu	r2,r7,8008cc8 <__udivdi3+0x590>
 80088a0:	00800404 	movi	r2,16
 80088a4:	3886d83a 	srl	r3,r7,r2
 80088a8:	01020074 	movhi	r4,2049
 80088ac:	21385104 	addi	r4,r4,-7868
 80088b0:	20c7883a 	add	r3,r4,r3
 80088b4:	18c00003 	ldbu	r3,0(r3)
 80088b8:	05c00804 	movi	r23,32
 80088bc:	1885883a 	add	r2,r3,r2
 80088c0:	b8afc83a 	sub	r23,r23,r2
 80088c4:	b800671e 	bne	r23,zero,8008a64 <__udivdi3+0x32c>
 80088c8:	3c010536 	bltu	r7,r16,8008ce0 <__udivdi3+0x5a8>
 80088cc:	9985403a 	cmpgeu	r2,r19,r6
 80088d0:	0007883a 	mov	r3,zero
 80088d4:	00004a06 	br	8008a00 <__udivdi3+0x2c8>
 80088d8:	3000041e 	bne	r6,zero,80088ec <__udivdi3+0x1b4>
 80088dc:	000b883a 	mov	r5,zero
 80088e0:	01000044 	movi	r4,1
 80088e4:	800082c0 	call	800082c <__udivsi3>
 80088e8:	1023883a 	mov	r17,r2
 80088ec:	00bfffd4 	movui	r2,65535
 80088f0:	1440532e 	bgeu	r2,r17,8008a40 <__udivdi3+0x308>
 80088f4:	00804034 	movhi	r2,256
 80088f8:	10bfffc4 	addi	r2,r2,-1
 80088fc:	1440f436 	bltu	r2,r17,8008cd0 <__udivdi3+0x598>
 8008900:	00800404 	movi	r2,16
 8008904:	8886d83a 	srl	r3,r17,r2
 8008908:	01020074 	movhi	r4,2049
 800890c:	21385104 	addi	r4,r4,-7868
 8008910:	20c7883a 	add	r3,r4,r3
 8008914:	18c00003 	ldbu	r3,0(r3)
 8008918:	1885883a 	add	r2,r3,r2
 800891c:	00c00804 	movi	r3,32
 8008920:	1887c83a 	sub	r3,r3,r2
 8008924:	1800a51e 	bne	r3,zero,8008bbc <__udivdi3+0x484>
 8008928:	882ad43a 	srli	r21,r17,16
 800892c:	8461c83a 	sub	r16,r16,r17
 8008930:	8d3fffcc 	andi	r20,r17,65535
 8008934:	00c00044 	movi	r3,1
 8008938:	a80b883a 	mov	r5,r21
 800893c:	8009883a 	mov	r4,r16
 8008940:	d8c00115 	stw	r3,4(sp)
 8008944:	80008900 	call	8000890 <__umodsi3>
 8008948:	a80b883a 	mov	r5,r21
 800894c:	8009883a 	mov	r4,r16
 8008950:	1027883a 	mov	r19,r2
 8008954:	800082c0 	call	800082c <__udivsi3>
 8008958:	a00b883a 	mov	r5,r20
 800895c:	1009883a 	mov	r4,r2
 8008960:	102d883a 	mov	r22,r2
 8008964:	80008e80 	call	80008e8 <__mulsi3>
 8008968:	9826943a 	slli	r19,r19,16
 800896c:	900ed43a 	srli	r7,r18,16
 8008970:	d8c00117 	ldw	r3,4(sp)
 8008974:	3cceb03a 	or	r7,r7,r19
 8008978:	3880052e 	bgeu	r7,r2,8008990 <__udivdi3+0x258>
 800897c:	3c4f883a 	add	r7,r7,r17
 8008980:	b13fffc4 	addi	r4,r22,-1
 8008984:	3c400136 	bltu	r7,r17,800898c <__udivdi3+0x254>
 8008988:	3880e436 	bltu	r7,r2,8008d1c <__udivdi3+0x5e4>
 800898c:	202d883a 	mov	r22,r4
 8008990:	38a1c83a 	sub	r16,r7,r2
 8008994:	8009883a 	mov	r4,r16
 8008998:	a80b883a 	mov	r5,r21
 800899c:	d8c00115 	stw	r3,4(sp)
 80089a0:	80008900 	call	8000890 <__umodsi3>
 80089a4:	1027883a 	mov	r19,r2
 80089a8:	8009883a 	mov	r4,r16
 80089ac:	a80b883a 	mov	r5,r21
 80089b0:	9826943a 	slli	r19,r19,16
 80089b4:	800082c0 	call	800082c <__udivsi3>
 80089b8:	a00b883a 	mov	r5,r20
 80089bc:	1009883a 	mov	r4,r2
 80089c0:	94bfffcc 	andi	r18,r18,65535
 80089c4:	1021883a 	mov	r16,r2
 80089c8:	94e4b03a 	or	r18,r18,r19
 80089cc:	80008e80 	call	80008e8 <__mulsi3>
 80089d0:	d8c00117 	ldw	r3,4(sp)
 80089d4:	9080052e 	bgeu	r18,r2,80089ec <__udivdi3+0x2b4>
 80089d8:	8ca5883a 	add	r18,r17,r18
 80089dc:	813fffc4 	addi	r4,r16,-1
 80089e0:	9440ad36 	bltu	r18,r17,8008c98 <__udivdi3+0x560>
 80089e4:	9080ac2e 	bgeu	r18,r2,8008c98 <__udivdi3+0x560>
 80089e8:	843fff84 	addi	r16,r16,-2
 80089ec:	b004943a 	slli	r2,r22,16
 80089f0:	1404b03a 	or	r2,r2,r16
 80089f4:	00000206 	br	8008a00 <__udivdi3+0x2c8>
 80089f8:	0007883a 	mov	r3,zero
 80089fc:	0005883a 	mov	r2,zero
 8008a00:	dfc00b17 	ldw	ra,44(sp)
 8008a04:	df000a17 	ldw	fp,40(sp)
 8008a08:	ddc00917 	ldw	r23,36(sp)
 8008a0c:	dd800817 	ldw	r22,32(sp)
 8008a10:	dd400717 	ldw	r21,28(sp)
 8008a14:	dd000617 	ldw	r20,24(sp)
 8008a18:	dcc00517 	ldw	r19,20(sp)
 8008a1c:	dc800417 	ldw	r18,16(sp)
 8008a20:	dc400317 	ldw	r17,12(sp)
 8008a24:	dc000217 	ldw	r16,8(sp)
 8008a28:	dec00c04 	addi	sp,sp,48
 8008a2c:	f800283a 	ret
 8008a30:	00803fc4 	movi	r2,255
 8008a34:	11c5803a 	cmpltu	r2,r2,r7
 8008a38:	100490fa 	slli	r2,r2,3
 8008a3c:	003f9906 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008a40:	00803fc4 	movi	r2,255
 8008a44:	1445803a 	cmpltu	r2,r2,r17
 8008a48:	100490fa 	slli	r2,r2,3
 8008a4c:	003fad06 	br	8008904 <__alt_data_end+0xfc008904>
 8008a50:	00804034 	movhi	r2,256
 8008a54:	10bfffc4 	addi	r2,r2,-1
 8008a58:	11809f36 	bltu	r2,r6,8008cd8 <__udivdi3+0x5a0>
 8008a5c:	00800404 	movi	r2,16
 8008a60:	003f4c06 	br	8008794 <__alt_data_end+0xfc008794>
 8008a64:	3dce983a 	sll	r7,r7,r23
 8008a68:	30b8d83a 	srl	fp,r6,r2
 8008a6c:	80a2d83a 	srl	r17,r16,r2
 8008a70:	35cc983a 	sll	r6,r6,r23
 8008a74:	3f38b03a 	or	fp,r7,fp
 8008a78:	e024d43a 	srli	r18,fp,16
 8008a7c:	9884d83a 	srl	r2,r19,r2
 8008a80:	85e0983a 	sll	r16,r16,r23
 8008a84:	8809883a 	mov	r4,r17
 8008a88:	900b883a 	mov	r5,r18
 8008a8c:	d9800015 	stw	r6,0(sp)
 8008a90:	1420b03a 	or	r16,r2,r16
 8008a94:	80008900 	call	8000890 <__umodsi3>
 8008a98:	900b883a 	mov	r5,r18
 8008a9c:	8809883a 	mov	r4,r17
 8008aa0:	1029883a 	mov	r20,r2
 8008aa4:	e5bfffcc 	andi	r22,fp,65535
 8008aa8:	800082c0 	call	800082c <__udivsi3>
 8008aac:	100b883a 	mov	r5,r2
 8008ab0:	b009883a 	mov	r4,r22
 8008ab4:	102b883a 	mov	r21,r2
 8008ab8:	80008e80 	call	80008e8 <__mulsi3>
 8008abc:	a028943a 	slli	r20,r20,16
 8008ac0:	8006d43a 	srli	r3,r16,16
 8008ac4:	1d06b03a 	or	r3,r3,r20
 8008ac8:	1880042e 	bgeu	r3,r2,8008adc <__udivdi3+0x3a4>
 8008acc:	1f07883a 	add	r3,r3,fp
 8008ad0:	a93fffc4 	addi	r4,r21,-1
 8008ad4:	1f00892e 	bgeu	r3,fp,8008cfc <__udivdi3+0x5c4>
 8008ad8:	202b883a 	mov	r21,r4
 8008adc:	18a3c83a 	sub	r17,r3,r2
 8008ae0:	8809883a 	mov	r4,r17
 8008ae4:	900b883a 	mov	r5,r18
 8008ae8:	80008900 	call	8000890 <__umodsi3>
 8008aec:	1029883a 	mov	r20,r2
 8008af0:	8809883a 	mov	r4,r17
 8008af4:	900b883a 	mov	r5,r18
 8008af8:	a028943a 	slli	r20,r20,16
 8008afc:	800082c0 	call	800082c <__udivsi3>
 8008b00:	100b883a 	mov	r5,r2
 8008b04:	b009883a 	mov	r4,r22
 8008b08:	843fffcc 	andi	r16,r16,65535
 8008b0c:	1023883a 	mov	r17,r2
 8008b10:	8520b03a 	or	r16,r16,r20
 8008b14:	80008e80 	call	80008e8 <__mulsi3>
 8008b18:	8080042e 	bgeu	r16,r2,8008b2c <__udivdi3+0x3f4>
 8008b1c:	8721883a 	add	r16,r16,fp
 8008b20:	88ffffc4 	addi	r3,r17,-1
 8008b24:	8700712e 	bgeu	r16,fp,8008cec <__udivdi3+0x5b4>
 8008b28:	1823883a 	mov	r17,r3
 8008b2c:	a80e943a 	slli	r7,r21,16
 8008b30:	d8c00017 	ldw	r3,0(sp)
 8008b34:	80a1c83a 	sub	r16,r16,r2
 8008b38:	3c64b03a 	or	r18,r7,r17
 8008b3c:	1d3fffcc 	andi	r20,r3,65535
 8008b40:	9022d43a 	srli	r17,r18,16
 8008b44:	95bfffcc 	andi	r22,r18,65535
 8008b48:	a00b883a 	mov	r5,r20
 8008b4c:	b009883a 	mov	r4,r22
 8008b50:	182ad43a 	srli	r21,r3,16
 8008b54:	80008e80 	call	80008e8 <__mulsi3>
 8008b58:	a00b883a 	mov	r5,r20
 8008b5c:	8809883a 	mov	r4,r17
 8008b60:	1039883a 	mov	fp,r2
 8008b64:	80008e80 	call	80008e8 <__mulsi3>
 8008b68:	8809883a 	mov	r4,r17
 8008b6c:	a80b883a 	mov	r5,r21
 8008b70:	1029883a 	mov	r20,r2
 8008b74:	80008e80 	call	80008e8 <__mulsi3>
 8008b78:	a80b883a 	mov	r5,r21
 8008b7c:	b009883a 	mov	r4,r22
 8008b80:	1023883a 	mov	r17,r2
 8008b84:	80008e80 	call	80008e8 <__mulsi3>
 8008b88:	e006d43a 	srli	r3,fp,16
 8008b8c:	1505883a 	add	r2,r2,r20
 8008b90:	1887883a 	add	r3,r3,r2
 8008b94:	1d00022e 	bgeu	r3,r20,8008ba0 <__udivdi3+0x468>
 8008b98:	00800074 	movhi	r2,1
 8008b9c:	88a3883a 	add	r17,r17,r2
 8008ba0:	1804d43a 	srli	r2,r3,16
 8008ba4:	1463883a 	add	r17,r2,r17
 8008ba8:	84404436 	bltu	r16,r17,8008cbc <__udivdi3+0x584>
 8008bac:	84403e26 	beq	r16,r17,8008ca8 <__udivdi3+0x570>
 8008bb0:	9005883a 	mov	r2,r18
 8008bb4:	0007883a 	mov	r3,zero
 8008bb8:	003f9106 	br	8008a00 <__alt_data_end+0xfc008a00>
 8008bbc:	88e2983a 	sll	r17,r17,r3
 8008bc0:	80aed83a 	srl	r23,r16,r2
 8008bc4:	80e0983a 	sll	r16,r16,r3
 8008bc8:	882ad43a 	srli	r21,r17,16
 8008bcc:	9884d83a 	srl	r2,r19,r2
 8008bd0:	b809883a 	mov	r4,r23
 8008bd4:	a80b883a 	mov	r5,r21
 8008bd8:	98e4983a 	sll	r18,r19,r3
 8008bdc:	142cb03a 	or	r22,r2,r16
 8008be0:	80008900 	call	8000890 <__umodsi3>
 8008be4:	b809883a 	mov	r4,r23
 8008be8:	a80b883a 	mov	r5,r21
 8008bec:	1027883a 	mov	r19,r2
 8008bf0:	8d3fffcc 	andi	r20,r17,65535
 8008bf4:	800082c0 	call	800082c <__udivsi3>
 8008bf8:	a009883a 	mov	r4,r20
 8008bfc:	100b883a 	mov	r5,r2
 8008c00:	102f883a 	mov	r23,r2
 8008c04:	80008e80 	call	80008e8 <__mulsi3>
 8008c08:	9826943a 	slli	r19,r19,16
 8008c0c:	b008d43a 	srli	r4,r22,16
 8008c10:	24c8b03a 	or	r4,r4,r19
 8008c14:	2080062e 	bgeu	r4,r2,8008c30 <__udivdi3+0x4f8>
 8008c18:	2449883a 	add	r4,r4,r17
 8008c1c:	b8ffffc4 	addi	r3,r23,-1
 8008c20:	24403c36 	bltu	r4,r17,8008d14 <__udivdi3+0x5dc>
 8008c24:	20803b2e 	bgeu	r4,r2,8008d14 <__udivdi3+0x5dc>
 8008c28:	bdffff84 	addi	r23,r23,-2
 8008c2c:	2449883a 	add	r4,r4,r17
 8008c30:	20a1c83a 	sub	r16,r4,r2
 8008c34:	a80b883a 	mov	r5,r21
 8008c38:	8009883a 	mov	r4,r16
 8008c3c:	80008900 	call	8000890 <__umodsi3>
 8008c40:	a80b883a 	mov	r5,r21
 8008c44:	8009883a 	mov	r4,r16
 8008c48:	1027883a 	mov	r19,r2
 8008c4c:	800082c0 	call	800082c <__udivsi3>
 8008c50:	a009883a 	mov	r4,r20
 8008c54:	100b883a 	mov	r5,r2
 8008c58:	9826943a 	slli	r19,r19,16
 8008c5c:	1039883a 	mov	fp,r2
 8008c60:	80008e80 	call	80008e8 <__mulsi3>
 8008c64:	b13fffcc 	andi	r4,r22,65535
 8008c68:	24c8b03a 	or	r4,r4,r19
 8008c6c:	2080062e 	bgeu	r4,r2,8008c88 <__udivdi3+0x550>
 8008c70:	2449883a 	add	r4,r4,r17
 8008c74:	e0ffffc4 	addi	r3,fp,-1
 8008c78:	24402436 	bltu	r4,r17,8008d0c <__udivdi3+0x5d4>
 8008c7c:	2080232e 	bgeu	r4,r2,8008d0c <__udivdi3+0x5d4>
 8008c80:	e73fff84 	addi	fp,fp,-2
 8008c84:	2449883a 	add	r4,r4,r17
 8008c88:	b82e943a 	slli	r23,r23,16
 8008c8c:	20a1c83a 	sub	r16,r4,r2
 8008c90:	bf06b03a 	or	r3,r23,fp
 8008c94:	003f2806 	br	8008938 <__alt_data_end+0xfc008938>
 8008c98:	2021883a 	mov	r16,r4
 8008c9c:	003f5306 	br	80089ec <__alt_data_end+0xfc0089ec>
 8008ca0:	1821883a 	mov	r16,r3
 8008ca4:	003ef406 	br	8008878 <__alt_data_end+0xfc008878>
 8008ca8:	1806943a 	slli	r3,r3,16
 8008cac:	9de6983a 	sll	r19,r19,r23
 8008cb0:	e73fffcc 	andi	fp,fp,65535
 8008cb4:	1f07883a 	add	r3,r3,fp
 8008cb8:	98ffbd2e 	bgeu	r19,r3,8008bb0 <__alt_data_end+0xfc008bb0>
 8008cbc:	90bfffc4 	addi	r2,r18,-1
 8008cc0:	0007883a 	mov	r3,zero
 8008cc4:	003f4e06 	br	8008a00 <__alt_data_end+0xfc008a00>
 8008cc8:	00800604 	movi	r2,24
 8008ccc:	003ef506 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008cd0:	00800604 	movi	r2,24
 8008cd4:	003f0b06 	br	8008904 <__alt_data_end+0xfc008904>
 8008cd8:	00800604 	movi	r2,24
 8008cdc:	003ead06 	br	8008794 <__alt_data_end+0xfc008794>
 8008ce0:	0007883a 	mov	r3,zero
 8008ce4:	00800044 	movi	r2,1
 8008ce8:	003f4506 	br	8008a00 <__alt_data_end+0xfc008a00>
 8008cec:	80bf8e2e 	bgeu	r16,r2,8008b28 <__alt_data_end+0xfc008b28>
 8008cf0:	8c7fff84 	addi	r17,r17,-2
 8008cf4:	8721883a 	add	r16,r16,fp
 8008cf8:	003f8c06 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8008cfc:	18bf762e 	bgeu	r3,r2,8008ad8 <__alt_data_end+0xfc008ad8>
 8008d00:	ad7fff84 	addi	r21,r21,-2
 8008d04:	1f07883a 	add	r3,r3,fp
 8008d08:	003f7406 	br	8008adc <__alt_data_end+0xfc008adc>
 8008d0c:	1839883a 	mov	fp,r3
 8008d10:	003fdd06 	br	8008c88 <__alt_data_end+0xfc008c88>
 8008d14:	182f883a 	mov	r23,r3
 8008d18:	003fc506 	br	8008c30 <__alt_data_end+0xfc008c30>
 8008d1c:	b5bfff84 	addi	r22,r22,-2
 8008d20:	3c4f883a 	add	r7,r7,r17
 8008d24:	003f1a06 	br	8008990 <__alt_data_end+0xfc008990>
 8008d28:	b5bfff84 	addi	r22,r22,-2
 8008d2c:	1c47883a 	add	r3,r3,r17
 8008d30:	003ebc06 	br	8008824 <__alt_data_end+0xfc008824>

08008d34 <__umoddi3>:
 8008d34:	defff304 	addi	sp,sp,-52
 8008d38:	df000b15 	stw	fp,44(sp)
 8008d3c:	dc400415 	stw	r17,16(sp)
 8008d40:	dc000315 	stw	r16,12(sp)
 8008d44:	dfc00c15 	stw	ra,48(sp)
 8008d48:	ddc00a15 	stw	r23,40(sp)
 8008d4c:	dd800915 	stw	r22,36(sp)
 8008d50:	dd400815 	stw	r21,32(sp)
 8008d54:	dd000715 	stw	r20,28(sp)
 8008d58:	dcc00615 	stw	r19,24(sp)
 8008d5c:	dc800515 	stw	r18,20(sp)
 8008d60:	2021883a 	mov	r16,r4
 8008d64:	2823883a 	mov	r17,r5
 8008d68:	2839883a 	mov	fp,r5
 8008d6c:	3800401e 	bne	r7,zero,8008e70 <__umoddi3+0x13c>
 8008d70:	3027883a 	mov	r19,r6
 8008d74:	2029883a 	mov	r20,r4
 8008d78:	2980552e 	bgeu	r5,r6,8008ed0 <__umoddi3+0x19c>
 8008d7c:	00bfffd4 	movui	r2,65535
 8008d80:	1180a236 	bltu	r2,r6,800900c <__umoddi3+0x2d8>
 8008d84:	01003fc4 	movi	r4,255
 8008d88:	2189803a 	cmpltu	r4,r4,r6
 8008d8c:	200890fa 	slli	r4,r4,3
 8008d90:	3104d83a 	srl	r2,r6,r4
 8008d94:	00c20074 	movhi	r3,2049
 8008d98:	18f85104 	addi	r3,r3,-7868
 8008d9c:	1885883a 	add	r2,r3,r2
 8008da0:	10c00003 	ldbu	r3,0(r2)
 8008da4:	00800804 	movi	r2,32
 8008da8:	1909883a 	add	r4,r3,r4
 8008dac:	1125c83a 	sub	r18,r2,r4
 8008db0:	90000526 	beq	r18,zero,8008dc8 <__umoddi3+0x94>
 8008db4:	8ca2983a 	sll	r17,r17,r18
 8008db8:	8108d83a 	srl	r4,r16,r4
 8008dbc:	34a6983a 	sll	r19,r6,r18
 8008dc0:	84a8983a 	sll	r20,r16,r18
 8008dc4:	2478b03a 	or	fp,r4,r17
 8008dc8:	982cd43a 	srli	r22,r19,16
 8008dcc:	e009883a 	mov	r4,fp
 8008dd0:	9dffffcc 	andi	r23,r19,65535
 8008dd4:	b00b883a 	mov	r5,r22
 8008dd8:	80008900 	call	8000890 <__umodsi3>
 8008ddc:	b00b883a 	mov	r5,r22
 8008de0:	e009883a 	mov	r4,fp
 8008de4:	102b883a 	mov	r21,r2
 8008de8:	800082c0 	call	800082c <__udivsi3>
 8008dec:	100b883a 	mov	r5,r2
 8008df0:	b809883a 	mov	r4,r23
 8008df4:	80008e80 	call	80008e8 <__mulsi3>
 8008df8:	a82a943a 	slli	r21,r21,16
 8008dfc:	a006d43a 	srli	r3,r20,16
 8008e00:	1d46b03a 	or	r3,r3,r21
 8008e04:	1880032e 	bgeu	r3,r2,8008e14 <__umoddi3+0xe0>
 8008e08:	1cc7883a 	add	r3,r3,r19
 8008e0c:	1cc00136 	bltu	r3,r19,8008e14 <__umoddi3+0xe0>
 8008e10:	18813136 	bltu	r3,r2,80092d8 <__umoddi3+0x5a4>
 8008e14:	18a1c83a 	sub	r16,r3,r2
 8008e18:	b00b883a 	mov	r5,r22
 8008e1c:	8009883a 	mov	r4,r16
 8008e20:	80008900 	call	8000890 <__umodsi3>
 8008e24:	b00b883a 	mov	r5,r22
 8008e28:	8009883a 	mov	r4,r16
 8008e2c:	1023883a 	mov	r17,r2
 8008e30:	800082c0 	call	800082c <__udivsi3>
 8008e34:	100b883a 	mov	r5,r2
 8008e38:	b809883a 	mov	r4,r23
 8008e3c:	8822943a 	slli	r17,r17,16
 8008e40:	80008e80 	call	80008e8 <__mulsi3>
 8008e44:	a0ffffcc 	andi	r3,r20,65535
 8008e48:	1c46b03a 	or	r3,r3,r17
 8008e4c:	1880042e 	bgeu	r3,r2,8008e60 <__umoddi3+0x12c>
 8008e50:	1cc7883a 	add	r3,r3,r19
 8008e54:	1cc00236 	bltu	r3,r19,8008e60 <__umoddi3+0x12c>
 8008e58:	1880012e 	bgeu	r3,r2,8008e60 <__umoddi3+0x12c>
 8008e5c:	1cc7883a 	add	r3,r3,r19
 8008e60:	1885c83a 	sub	r2,r3,r2
 8008e64:	1484d83a 	srl	r2,r2,r18
 8008e68:	0007883a 	mov	r3,zero
 8008e6c:	00005306 	br	8008fbc <__umoddi3+0x288>
 8008e70:	29c05036 	bltu	r5,r7,8008fb4 <__umoddi3+0x280>
 8008e74:	00bfffd4 	movui	r2,65535
 8008e78:	11c05c2e 	bgeu	r2,r7,8008fec <__umoddi3+0x2b8>
 8008e7c:	00804034 	movhi	r2,256
 8008e80:	10bfffc4 	addi	r2,r2,-1
 8008e84:	11c10636 	bltu	r2,r7,80092a0 <__umoddi3+0x56c>
 8008e88:	01000404 	movi	r4,16
 8008e8c:	3904d83a 	srl	r2,r7,r4
 8008e90:	00c20074 	movhi	r3,2049
 8008e94:	18f85104 	addi	r3,r3,-7868
 8008e98:	1885883a 	add	r2,r3,r2
 8008e9c:	14c00003 	ldbu	r19,0(r2)
 8008ea0:	00c00804 	movi	r3,32
 8008ea4:	9927883a 	add	r19,r19,r4
 8008ea8:	1ce9c83a 	sub	r20,r3,r19
 8008eac:	a0005c1e 	bne	r20,zero,8009020 <__umoddi3+0x2ec>
 8008eb0:	3c400136 	bltu	r7,r17,8008eb8 <__umoddi3+0x184>
 8008eb4:	81810a36 	bltu	r16,r6,80092e0 <__umoddi3+0x5ac>
 8008eb8:	8185c83a 	sub	r2,r16,r6
 8008ebc:	89e3c83a 	sub	r17,r17,r7
 8008ec0:	8089803a 	cmpltu	r4,r16,r2
 8008ec4:	8939c83a 	sub	fp,r17,r4
 8008ec8:	e007883a 	mov	r3,fp
 8008ecc:	00003b06 	br	8008fbc <__umoddi3+0x288>
 8008ed0:	3000041e 	bne	r6,zero,8008ee4 <__umoddi3+0x1b0>
 8008ed4:	000b883a 	mov	r5,zero
 8008ed8:	01000044 	movi	r4,1
 8008edc:	800082c0 	call	800082c <__udivsi3>
 8008ee0:	1027883a 	mov	r19,r2
 8008ee4:	00bfffd4 	movui	r2,65535
 8008ee8:	14c0442e 	bgeu	r2,r19,8008ffc <__umoddi3+0x2c8>
 8008eec:	00804034 	movhi	r2,256
 8008ef0:	10bfffc4 	addi	r2,r2,-1
 8008ef4:	14c0ec36 	bltu	r2,r19,80092a8 <__umoddi3+0x574>
 8008ef8:	00800404 	movi	r2,16
 8008efc:	9886d83a 	srl	r3,r19,r2
 8008f00:	01020074 	movhi	r4,2049
 8008f04:	21385104 	addi	r4,r4,-7868
 8008f08:	20c7883a 	add	r3,r4,r3
 8008f0c:	18c00003 	ldbu	r3,0(r3)
 8008f10:	1887883a 	add	r3,r3,r2
 8008f14:	00800804 	movi	r2,32
 8008f18:	10e5c83a 	sub	r18,r2,r3
 8008f1c:	9000ab1e 	bne	r18,zero,80091cc <__umoddi3+0x498>
 8008f20:	982cd43a 	srli	r22,r19,16
 8008f24:	8ce3c83a 	sub	r17,r17,r19
 8008f28:	9dffffcc 	andi	r23,r19,65535
 8008f2c:	b00b883a 	mov	r5,r22
 8008f30:	8809883a 	mov	r4,r17
 8008f34:	80008900 	call	8000890 <__umodsi3>
 8008f38:	b00b883a 	mov	r5,r22
 8008f3c:	8809883a 	mov	r4,r17
 8008f40:	102b883a 	mov	r21,r2
 8008f44:	800082c0 	call	800082c <__udivsi3>
 8008f48:	b80b883a 	mov	r5,r23
 8008f4c:	1009883a 	mov	r4,r2
 8008f50:	80008e80 	call	80008e8 <__mulsi3>
 8008f54:	a82a943a 	slli	r21,r21,16
 8008f58:	a006d43a 	srli	r3,r20,16
 8008f5c:	1d46b03a 	or	r3,r3,r21
 8008f60:	1880042e 	bgeu	r3,r2,8008f74 <__umoddi3+0x240>
 8008f64:	1cc7883a 	add	r3,r3,r19
 8008f68:	1cc00236 	bltu	r3,r19,8008f74 <__umoddi3+0x240>
 8008f6c:	1880012e 	bgeu	r3,r2,8008f74 <__umoddi3+0x240>
 8008f70:	1cc7883a 	add	r3,r3,r19
 8008f74:	18a1c83a 	sub	r16,r3,r2
 8008f78:	b00b883a 	mov	r5,r22
 8008f7c:	8009883a 	mov	r4,r16
 8008f80:	80008900 	call	8000890 <__umodsi3>
 8008f84:	1023883a 	mov	r17,r2
 8008f88:	b00b883a 	mov	r5,r22
 8008f8c:	8009883a 	mov	r4,r16
 8008f90:	800082c0 	call	800082c <__udivsi3>
 8008f94:	8822943a 	slli	r17,r17,16
 8008f98:	b80b883a 	mov	r5,r23
 8008f9c:	1009883a 	mov	r4,r2
 8008fa0:	80008e80 	call	80008e8 <__mulsi3>
 8008fa4:	a53fffcc 	andi	r20,r20,65535
 8008fa8:	a446b03a 	or	r3,r20,r17
 8008fac:	18bfac2e 	bgeu	r3,r2,8008e60 <__alt_data_end+0xfc008e60>
 8008fb0:	003fa706 	br	8008e50 <__alt_data_end+0xfc008e50>
 8008fb4:	2005883a 	mov	r2,r4
 8008fb8:	2807883a 	mov	r3,r5
 8008fbc:	dfc00c17 	ldw	ra,48(sp)
 8008fc0:	df000b17 	ldw	fp,44(sp)
 8008fc4:	ddc00a17 	ldw	r23,40(sp)
 8008fc8:	dd800917 	ldw	r22,36(sp)
 8008fcc:	dd400817 	ldw	r21,32(sp)
 8008fd0:	dd000717 	ldw	r20,28(sp)
 8008fd4:	dcc00617 	ldw	r19,24(sp)
 8008fd8:	dc800517 	ldw	r18,20(sp)
 8008fdc:	dc400417 	ldw	r17,16(sp)
 8008fe0:	dc000317 	ldw	r16,12(sp)
 8008fe4:	dec00d04 	addi	sp,sp,52
 8008fe8:	f800283a 	ret
 8008fec:	04c03fc4 	movi	r19,255
 8008ff0:	99c9803a 	cmpltu	r4,r19,r7
 8008ff4:	200890fa 	slli	r4,r4,3
 8008ff8:	003fa406 	br	8008e8c <__alt_data_end+0xfc008e8c>
 8008ffc:	00803fc4 	movi	r2,255
 8009000:	14c5803a 	cmpltu	r2,r2,r19
 8009004:	100490fa 	slli	r2,r2,3
 8009008:	003fbc06 	br	8008efc <__alt_data_end+0xfc008efc>
 800900c:	00804034 	movhi	r2,256
 8009010:	10bfffc4 	addi	r2,r2,-1
 8009014:	1180a636 	bltu	r2,r6,80092b0 <__umoddi3+0x57c>
 8009018:	01000404 	movi	r4,16
 800901c:	003f5c06 	br	8008d90 <__alt_data_end+0xfc008d90>
 8009020:	3d0e983a 	sll	r7,r7,r20
 8009024:	34ead83a 	srl	r21,r6,r19
 8009028:	8cc6d83a 	srl	r3,r17,r19
 800902c:	8d10983a 	sll	r8,r17,r20
 8009030:	3d6ab03a 	or	r21,r7,r21
 8009034:	a82cd43a 	srli	r22,r21,16
 8009038:	84e2d83a 	srl	r17,r16,r19
 800903c:	1809883a 	mov	r4,r3
 8009040:	b00b883a 	mov	r5,r22
 8009044:	8a22b03a 	or	r17,r17,r8
 8009048:	3524983a 	sll	r18,r6,r20
 800904c:	dc400015 	stw	r17,0(sp)
 8009050:	d8c00115 	stw	r3,4(sp)
 8009054:	80008900 	call	8000890 <__umodsi3>
 8009058:	d8c00117 	ldw	r3,4(sp)
 800905c:	b00b883a 	mov	r5,r22
 8009060:	1039883a 	mov	fp,r2
 8009064:	1809883a 	mov	r4,r3
 8009068:	800082c0 	call	800082c <__udivsi3>
 800906c:	adffffcc 	andi	r23,r21,65535
 8009070:	100b883a 	mov	r5,r2
 8009074:	b809883a 	mov	r4,r23
 8009078:	1023883a 	mov	r17,r2
 800907c:	80008e80 	call	80008e8 <__mulsi3>
 8009080:	d9400017 	ldw	r5,0(sp)
 8009084:	e008943a 	slli	r4,fp,16
 8009088:	8520983a 	sll	r16,r16,r20
 800908c:	2806d43a 	srli	r3,r5,16
 8009090:	1906b03a 	or	r3,r3,r4
 8009094:	1880042e 	bgeu	r3,r2,80090a8 <__umoddi3+0x374>
 8009098:	1d47883a 	add	r3,r3,r21
 800909c:	893fffc4 	addi	r4,r17,-1
 80090a0:	1d40892e 	bgeu	r3,r21,80092c8 <__umoddi3+0x594>
 80090a4:	2023883a 	mov	r17,r4
 80090a8:	18b9c83a 	sub	fp,r3,r2
 80090ac:	b00b883a 	mov	r5,r22
 80090b0:	e009883a 	mov	r4,fp
 80090b4:	80008900 	call	8000890 <__umodsi3>
 80090b8:	b00b883a 	mov	r5,r22
 80090bc:	e009883a 	mov	r4,fp
 80090c0:	d8800215 	stw	r2,8(sp)
 80090c4:	800082c0 	call	800082c <__udivsi3>
 80090c8:	100b883a 	mov	r5,r2
 80090cc:	b809883a 	mov	r4,r23
 80090d0:	102d883a 	mov	r22,r2
 80090d4:	80008e80 	call	80008e8 <__mulsi3>
 80090d8:	d9800217 	ldw	r6,8(sp)
 80090dc:	d8c00017 	ldw	r3,0(sp)
 80090e0:	300c943a 	slli	r6,r6,16
 80090e4:	1a3fffcc 	andi	r8,r3,65535
 80090e8:	4190b03a 	or	r8,r8,r6
 80090ec:	4080042e 	bgeu	r8,r2,8009100 <__umoddi3+0x3cc>
 80090f0:	4551883a 	add	r8,r8,r21
 80090f4:	b0ffffc4 	addi	r3,r22,-1
 80090f8:	45406f2e 	bgeu	r8,r21,80092b8 <__umoddi3+0x584>
 80090fc:	182d883a 	mov	r22,r3
 8009100:	880e943a 	slli	r7,r17,16
 8009104:	9006d43a 	srli	r3,r18,16
 8009108:	91bfffcc 	andi	r6,r18,65535
 800910c:	3dacb03a 	or	r22,r7,r22
 8009110:	b02ed43a 	srli	r23,r22,16
 8009114:	b5bfffcc 	andi	r22,r22,65535
 8009118:	300b883a 	mov	r5,r6
 800911c:	b009883a 	mov	r4,r22
 8009120:	40a3c83a 	sub	r17,r8,r2
 8009124:	d8c00115 	stw	r3,4(sp)
 8009128:	d9800215 	stw	r6,8(sp)
 800912c:	80008e80 	call	80008e8 <__mulsi3>
 8009130:	d9800217 	ldw	r6,8(sp)
 8009134:	b809883a 	mov	r4,r23
 8009138:	1039883a 	mov	fp,r2
 800913c:	300b883a 	mov	r5,r6
 8009140:	80008e80 	call	80008e8 <__mulsi3>
 8009144:	d8c00117 	ldw	r3,4(sp)
 8009148:	b809883a 	mov	r4,r23
 800914c:	d8800215 	stw	r2,8(sp)
 8009150:	180b883a 	mov	r5,r3
 8009154:	80008e80 	call	80008e8 <__mulsi3>
 8009158:	d8c00117 	ldw	r3,4(sp)
 800915c:	b009883a 	mov	r4,r22
 8009160:	102f883a 	mov	r23,r2
 8009164:	180b883a 	mov	r5,r3
 8009168:	80008e80 	call	80008e8 <__mulsi3>
 800916c:	d9800217 	ldw	r6,8(sp)
 8009170:	e006d43a 	srli	r3,fp,16
 8009174:	1185883a 	add	r2,r2,r6
 8009178:	1885883a 	add	r2,r3,r2
 800917c:	1180022e 	bgeu	r2,r6,8009188 <__umoddi3+0x454>
 8009180:	00c00074 	movhi	r3,1
 8009184:	b8ef883a 	add	r23,r23,r3
 8009188:	1006d43a 	srli	r3,r2,16
 800918c:	1004943a 	slli	r2,r2,16
 8009190:	e73fffcc 	andi	fp,fp,65535
 8009194:	1dc7883a 	add	r3,r3,r23
 8009198:	1739883a 	add	fp,r2,fp
 800919c:	88c03a36 	bltu	r17,r3,8009288 <__umoddi3+0x554>
 80091a0:	88c05126 	beq	r17,r3,80092e8 <__umoddi3+0x5b4>
 80091a4:	88c9c83a 	sub	r4,r17,r3
 80091a8:	e00f883a 	mov	r7,fp
 80091ac:	81cfc83a 	sub	r7,r16,r7
 80091b0:	81c7803a 	cmpltu	r3,r16,r7
 80091b4:	20c7c83a 	sub	r3,r4,r3
 80091b8:	1cc4983a 	sll	r2,r3,r19
 80091bc:	3d0ed83a 	srl	r7,r7,r20
 80091c0:	1d06d83a 	srl	r3,r3,r20
 80091c4:	11c4b03a 	or	r2,r2,r7
 80091c8:	003f7c06 	br	8008fbc <__alt_data_end+0xfc008fbc>
 80091cc:	9ca6983a 	sll	r19,r19,r18
 80091d0:	88f8d83a 	srl	fp,r17,r3
 80091d4:	80c4d83a 	srl	r2,r16,r3
 80091d8:	982cd43a 	srli	r22,r19,16
 80091dc:	8ca2983a 	sll	r17,r17,r18
 80091e0:	e009883a 	mov	r4,fp
 80091e4:	b00b883a 	mov	r5,r22
 80091e8:	146ab03a 	or	r21,r2,r17
 80091ec:	80008900 	call	8000890 <__umodsi3>
 80091f0:	b00b883a 	mov	r5,r22
 80091f4:	e009883a 	mov	r4,fp
 80091f8:	1029883a 	mov	r20,r2
 80091fc:	9dffffcc 	andi	r23,r19,65535
 8009200:	800082c0 	call	800082c <__udivsi3>
 8009204:	b809883a 	mov	r4,r23
 8009208:	100b883a 	mov	r5,r2
 800920c:	80008e80 	call	80008e8 <__mulsi3>
 8009210:	a008943a 	slli	r4,r20,16
 8009214:	a806d43a 	srli	r3,r21,16
 8009218:	84a8983a 	sll	r20,r16,r18
 800921c:	1906b03a 	or	r3,r3,r4
 8009220:	1880042e 	bgeu	r3,r2,8009234 <__umoddi3+0x500>
 8009224:	1cc7883a 	add	r3,r3,r19
 8009228:	1cc00236 	bltu	r3,r19,8009234 <__umoddi3+0x500>
 800922c:	1880012e 	bgeu	r3,r2,8009234 <__umoddi3+0x500>
 8009230:	1cc7883a 	add	r3,r3,r19
 8009234:	18a3c83a 	sub	r17,r3,r2
 8009238:	b00b883a 	mov	r5,r22
 800923c:	8809883a 	mov	r4,r17
 8009240:	80008900 	call	8000890 <__umodsi3>
 8009244:	b00b883a 	mov	r5,r22
 8009248:	8809883a 	mov	r4,r17
 800924c:	1021883a 	mov	r16,r2
 8009250:	800082c0 	call	800082c <__udivsi3>
 8009254:	100b883a 	mov	r5,r2
 8009258:	b809883a 	mov	r4,r23
 800925c:	8020943a 	slli	r16,r16,16
 8009260:	80008e80 	call	80008e8 <__mulsi3>
 8009264:	a8ffffcc 	andi	r3,r21,65535
 8009268:	1c06b03a 	or	r3,r3,r16
 800926c:	1880042e 	bgeu	r3,r2,8009280 <__umoddi3+0x54c>
 8009270:	1cc7883a 	add	r3,r3,r19
 8009274:	1cc00236 	bltu	r3,r19,8009280 <__umoddi3+0x54c>
 8009278:	1880012e 	bgeu	r3,r2,8009280 <__umoddi3+0x54c>
 800927c:	1cc7883a 	add	r3,r3,r19
 8009280:	18a3c83a 	sub	r17,r3,r2
 8009284:	003f2906 	br	8008f2c <__alt_data_end+0xfc008f2c>
 8009288:	e48fc83a 	sub	r7,fp,r18
 800928c:	1d49c83a 	sub	r4,r3,r21
 8009290:	e1f9803a 	cmpltu	fp,fp,r7
 8009294:	2739c83a 	sub	fp,r4,fp
 8009298:	8f09c83a 	sub	r4,r17,fp
 800929c:	003fc306 	br	80091ac <__alt_data_end+0xfc0091ac>
 80092a0:	01000604 	movi	r4,24
 80092a4:	003ef906 	br	8008e8c <__alt_data_end+0xfc008e8c>
 80092a8:	00800604 	movi	r2,24
 80092ac:	003f1306 	br	8008efc <__alt_data_end+0xfc008efc>
 80092b0:	01000604 	movi	r4,24
 80092b4:	003eb606 	br	8008d90 <__alt_data_end+0xfc008d90>
 80092b8:	40bf902e 	bgeu	r8,r2,80090fc <__alt_data_end+0xfc0090fc>
 80092bc:	b5bfff84 	addi	r22,r22,-2
 80092c0:	4551883a 	add	r8,r8,r21
 80092c4:	003f8e06 	br	8009100 <__alt_data_end+0xfc009100>
 80092c8:	18bf762e 	bgeu	r3,r2,80090a4 <__alt_data_end+0xfc0090a4>
 80092cc:	8c7fff84 	addi	r17,r17,-2
 80092d0:	1d47883a 	add	r3,r3,r21
 80092d4:	003f7406 	br	80090a8 <__alt_data_end+0xfc0090a8>
 80092d8:	1cc7883a 	add	r3,r3,r19
 80092dc:	003ecd06 	br	8008e14 <__alt_data_end+0xfc008e14>
 80092e0:	8005883a 	mov	r2,r16
 80092e4:	003ef806 	br	8008ec8 <__alt_data_end+0xfc008ec8>
 80092e8:	873fe736 	bltu	r16,fp,8009288 <__alt_data_end+0xfc009288>
 80092ec:	e00f883a 	mov	r7,fp
 80092f0:	0009883a 	mov	r4,zero
 80092f4:	003fad06 	br	80091ac <__alt_data_end+0xfc0091ac>

080092f8 <__adddf3>:
 80092f8:	02c00434 	movhi	r11,16
 80092fc:	5affffc4 	addi	r11,r11,-1
 8009300:	2806d7fa 	srli	r3,r5,31
 8009304:	2ad4703a 	and	r10,r5,r11
 8009308:	3ad2703a 	and	r9,r7,r11
 800930c:	3804d53a 	srli	r2,r7,20
 8009310:	3018d77a 	srli	r12,r6,29
 8009314:	280ad53a 	srli	r5,r5,20
 8009318:	501490fa 	slli	r10,r10,3
 800931c:	2010d77a 	srli	r8,r4,29
 8009320:	481290fa 	slli	r9,r9,3
 8009324:	380ed7fa 	srli	r7,r7,31
 8009328:	defffb04 	addi	sp,sp,-20
 800932c:	dc800215 	stw	r18,8(sp)
 8009330:	dc400115 	stw	r17,4(sp)
 8009334:	dc000015 	stw	r16,0(sp)
 8009338:	dfc00415 	stw	ra,16(sp)
 800933c:	dcc00315 	stw	r19,12(sp)
 8009340:	1c803fcc 	andi	r18,r3,255
 8009344:	2c01ffcc 	andi	r16,r5,2047
 8009348:	5210b03a 	or	r8,r10,r8
 800934c:	202290fa 	slli	r17,r4,3
 8009350:	1081ffcc 	andi	r2,r2,2047
 8009354:	4b12b03a 	or	r9,r9,r12
 8009358:	300c90fa 	slli	r6,r6,3
 800935c:	91c07526 	beq	r18,r7,8009534 <__adddf3+0x23c>
 8009360:	8087c83a 	sub	r3,r16,r2
 8009364:	00c0ab0e 	bge	zero,r3,8009614 <__adddf3+0x31c>
 8009368:	10002a1e 	bne	r2,zero,8009414 <__adddf3+0x11c>
 800936c:	4984b03a 	or	r2,r9,r6
 8009370:	1000961e 	bne	r2,zero,80095cc <__adddf3+0x2d4>
 8009374:	888001cc 	andi	r2,r17,7
 8009378:	10000726 	beq	r2,zero,8009398 <__adddf3+0xa0>
 800937c:	888003cc 	andi	r2,r17,15
 8009380:	00c00104 	movi	r3,4
 8009384:	10c00426 	beq	r2,r3,8009398 <__adddf3+0xa0>
 8009388:	88c7883a 	add	r3,r17,r3
 800938c:	1c63803a 	cmpltu	r17,r3,r17
 8009390:	4451883a 	add	r8,r8,r17
 8009394:	1823883a 	mov	r17,r3
 8009398:	4080202c 	andhi	r2,r8,128
 800939c:	10005926 	beq	r2,zero,8009504 <__adddf3+0x20c>
 80093a0:	84000044 	addi	r16,r16,1
 80093a4:	0081ffc4 	movi	r2,2047
 80093a8:	8080ba26 	beq	r16,r2,8009694 <__adddf3+0x39c>
 80093ac:	00bfe034 	movhi	r2,65408
 80093b0:	10bfffc4 	addi	r2,r2,-1
 80093b4:	4090703a 	and	r8,r8,r2
 80093b8:	4004977a 	slli	r2,r8,29
 80093bc:	4010927a 	slli	r8,r8,9
 80093c0:	8822d0fa 	srli	r17,r17,3
 80093c4:	8401ffcc 	andi	r16,r16,2047
 80093c8:	4010d33a 	srli	r8,r8,12
 80093cc:	9007883a 	mov	r3,r18
 80093d0:	1444b03a 	or	r2,r2,r17
 80093d4:	8401ffcc 	andi	r16,r16,2047
 80093d8:	8020953a 	slli	r16,r16,20
 80093dc:	18c03fcc 	andi	r3,r3,255
 80093e0:	01000434 	movhi	r4,16
 80093e4:	213fffc4 	addi	r4,r4,-1
 80093e8:	180697fa 	slli	r3,r3,31
 80093ec:	4110703a 	and	r8,r8,r4
 80093f0:	4410b03a 	or	r8,r8,r16
 80093f4:	40c6b03a 	or	r3,r8,r3
 80093f8:	dfc00417 	ldw	ra,16(sp)
 80093fc:	dcc00317 	ldw	r19,12(sp)
 8009400:	dc800217 	ldw	r18,8(sp)
 8009404:	dc400117 	ldw	r17,4(sp)
 8009408:	dc000017 	ldw	r16,0(sp)
 800940c:	dec00504 	addi	sp,sp,20
 8009410:	f800283a 	ret
 8009414:	0081ffc4 	movi	r2,2047
 8009418:	80bfd626 	beq	r16,r2,8009374 <__alt_data_end+0xfc009374>
 800941c:	4a402034 	orhi	r9,r9,128
 8009420:	00800e04 	movi	r2,56
 8009424:	10c09f16 	blt	r2,r3,80096a4 <__adddf3+0x3ac>
 8009428:	008007c4 	movi	r2,31
 800942c:	10c0c216 	blt	r2,r3,8009738 <__adddf3+0x440>
 8009430:	00800804 	movi	r2,32
 8009434:	10c5c83a 	sub	r2,r2,r3
 8009438:	488a983a 	sll	r5,r9,r2
 800943c:	30c8d83a 	srl	r4,r6,r3
 8009440:	3084983a 	sll	r2,r6,r2
 8009444:	48c6d83a 	srl	r3,r9,r3
 8009448:	290cb03a 	or	r6,r5,r4
 800944c:	1004c03a 	cmpne	r2,r2,zero
 8009450:	308cb03a 	or	r6,r6,r2
 8009454:	898dc83a 	sub	r6,r17,r6
 8009458:	89a3803a 	cmpltu	r17,r17,r6
 800945c:	40d1c83a 	sub	r8,r8,r3
 8009460:	4451c83a 	sub	r8,r8,r17
 8009464:	3023883a 	mov	r17,r6
 8009468:	4080202c 	andhi	r2,r8,128
 800946c:	10002326 	beq	r2,zero,80094fc <__adddf3+0x204>
 8009470:	04c02034 	movhi	r19,128
 8009474:	9cffffc4 	addi	r19,r19,-1
 8009478:	44e6703a 	and	r19,r8,r19
 800947c:	98007626 	beq	r19,zero,8009658 <__adddf3+0x360>
 8009480:	9809883a 	mov	r4,r19
 8009484:	800bb380 	call	800bb38 <__clzsi2>
 8009488:	10fffe04 	addi	r3,r2,-8
 800948c:	010007c4 	movi	r4,31
 8009490:	20c07716 	blt	r4,r3,8009670 <__adddf3+0x378>
 8009494:	00800804 	movi	r2,32
 8009498:	10c5c83a 	sub	r2,r2,r3
 800949c:	8884d83a 	srl	r2,r17,r2
 80094a0:	98d0983a 	sll	r8,r19,r3
 80094a4:	88e2983a 	sll	r17,r17,r3
 80094a8:	1204b03a 	or	r2,r2,r8
 80094ac:	1c007416 	blt	r3,r16,8009680 <__adddf3+0x388>
 80094b0:	1c21c83a 	sub	r16,r3,r16
 80094b4:	82000044 	addi	r8,r16,1
 80094b8:	00c007c4 	movi	r3,31
 80094bc:	1a009116 	blt	r3,r8,8009704 <__adddf3+0x40c>
 80094c0:	00c00804 	movi	r3,32
 80094c4:	1a07c83a 	sub	r3,r3,r8
 80094c8:	8a08d83a 	srl	r4,r17,r8
 80094cc:	88e2983a 	sll	r17,r17,r3
 80094d0:	10c6983a 	sll	r3,r2,r3
 80094d4:	1210d83a 	srl	r8,r2,r8
 80094d8:	8804c03a 	cmpne	r2,r17,zero
 80094dc:	1906b03a 	or	r3,r3,r4
 80094e0:	18a2b03a 	or	r17,r3,r2
 80094e4:	0021883a 	mov	r16,zero
 80094e8:	003fa206 	br	8009374 <__alt_data_end+0xfc009374>
 80094ec:	1890b03a 	or	r8,r3,r2
 80094f0:	40017d26 	beq	r8,zero,8009ae8 <__adddf3+0x7f0>
 80094f4:	1011883a 	mov	r8,r2
 80094f8:	1823883a 	mov	r17,r3
 80094fc:	888001cc 	andi	r2,r17,7
 8009500:	103f9e1e 	bne	r2,zero,800937c <__alt_data_end+0xfc00937c>
 8009504:	4004977a 	slli	r2,r8,29
 8009508:	8822d0fa 	srli	r17,r17,3
 800950c:	4010d0fa 	srli	r8,r8,3
 8009510:	9007883a 	mov	r3,r18
 8009514:	1444b03a 	or	r2,r2,r17
 8009518:	0101ffc4 	movi	r4,2047
 800951c:	81002426 	beq	r16,r4,80095b0 <__adddf3+0x2b8>
 8009520:	8120703a 	and	r16,r16,r4
 8009524:	01000434 	movhi	r4,16
 8009528:	213fffc4 	addi	r4,r4,-1
 800952c:	4110703a 	and	r8,r8,r4
 8009530:	003fa806 	br	80093d4 <__alt_data_end+0xfc0093d4>
 8009534:	8089c83a 	sub	r4,r16,r2
 8009538:	01005e0e 	bge	zero,r4,80096b4 <__adddf3+0x3bc>
 800953c:	10002b26 	beq	r2,zero,80095ec <__adddf3+0x2f4>
 8009540:	0081ffc4 	movi	r2,2047
 8009544:	80bf8b26 	beq	r16,r2,8009374 <__alt_data_end+0xfc009374>
 8009548:	4a402034 	orhi	r9,r9,128
 800954c:	00800e04 	movi	r2,56
 8009550:	1100a40e 	bge	r2,r4,80097e4 <__adddf3+0x4ec>
 8009554:	498cb03a 	or	r6,r9,r6
 8009558:	300ac03a 	cmpne	r5,r6,zero
 800955c:	0013883a 	mov	r9,zero
 8009560:	2c4b883a 	add	r5,r5,r17
 8009564:	2c63803a 	cmpltu	r17,r5,r17
 8009568:	4a11883a 	add	r8,r9,r8
 800956c:	8a11883a 	add	r8,r17,r8
 8009570:	2823883a 	mov	r17,r5
 8009574:	4080202c 	andhi	r2,r8,128
 8009578:	103fe026 	beq	r2,zero,80094fc <__alt_data_end+0xfc0094fc>
 800957c:	84000044 	addi	r16,r16,1
 8009580:	0081ffc4 	movi	r2,2047
 8009584:	8080d226 	beq	r16,r2,80098d0 <__adddf3+0x5d8>
 8009588:	00bfe034 	movhi	r2,65408
 800958c:	10bfffc4 	addi	r2,r2,-1
 8009590:	4090703a 	and	r8,r8,r2
 8009594:	880ad07a 	srli	r5,r17,1
 8009598:	400897fa 	slli	r4,r8,31
 800959c:	88c0004c 	andi	r3,r17,1
 80095a0:	28e2b03a 	or	r17,r5,r3
 80095a4:	4010d07a 	srli	r8,r8,1
 80095a8:	2462b03a 	or	r17,r4,r17
 80095ac:	003f7106 	br	8009374 <__alt_data_end+0xfc009374>
 80095b0:	4088b03a 	or	r4,r8,r2
 80095b4:	20014526 	beq	r4,zero,8009acc <__adddf3+0x7d4>
 80095b8:	01000434 	movhi	r4,16
 80095bc:	42000234 	orhi	r8,r8,8
 80095c0:	213fffc4 	addi	r4,r4,-1
 80095c4:	4110703a 	and	r8,r8,r4
 80095c8:	003f8206 	br	80093d4 <__alt_data_end+0xfc0093d4>
 80095cc:	18ffffc4 	addi	r3,r3,-1
 80095d0:	1800491e 	bne	r3,zero,80096f8 <__adddf3+0x400>
 80095d4:	898bc83a 	sub	r5,r17,r6
 80095d8:	8963803a 	cmpltu	r17,r17,r5
 80095dc:	4251c83a 	sub	r8,r8,r9
 80095e0:	4451c83a 	sub	r8,r8,r17
 80095e4:	2823883a 	mov	r17,r5
 80095e8:	003f9f06 	br	8009468 <__alt_data_end+0xfc009468>
 80095ec:	4984b03a 	or	r2,r9,r6
 80095f0:	103f6026 	beq	r2,zero,8009374 <__alt_data_end+0xfc009374>
 80095f4:	213fffc4 	addi	r4,r4,-1
 80095f8:	2000931e 	bne	r4,zero,8009848 <__adddf3+0x550>
 80095fc:	898d883a 	add	r6,r17,r6
 8009600:	3463803a 	cmpltu	r17,r6,r17
 8009604:	4251883a 	add	r8,r8,r9
 8009608:	8a11883a 	add	r8,r17,r8
 800960c:	3023883a 	mov	r17,r6
 8009610:	003fd806 	br	8009574 <__alt_data_end+0xfc009574>
 8009614:	1800541e 	bne	r3,zero,8009768 <__adddf3+0x470>
 8009618:	80800044 	addi	r2,r16,1
 800961c:	1081ffcc 	andi	r2,r2,2047
 8009620:	00c00044 	movi	r3,1
 8009624:	1880a00e 	bge	r3,r2,80098a8 <__adddf3+0x5b0>
 8009628:	8989c83a 	sub	r4,r17,r6
 800962c:	8905803a 	cmpltu	r2,r17,r4
 8009630:	4267c83a 	sub	r19,r8,r9
 8009634:	98a7c83a 	sub	r19,r19,r2
 8009638:	9880202c 	andhi	r2,r19,128
 800963c:	10006326 	beq	r2,zero,80097cc <__adddf3+0x4d4>
 8009640:	3463c83a 	sub	r17,r6,r17
 8009644:	4a07c83a 	sub	r3,r9,r8
 8009648:	344d803a 	cmpltu	r6,r6,r17
 800964c:	19a7c83a 	sub	r19,r3,r6
 8009650:	3825883a 	mov	r18,r7
 8009654:	983f8a1e 	bne	r19,zero,8009480 <__alt_data_end+0xfc009480>
 8009658:	8809883a 	mov	r4,r17
 800965c:	800bb380 	call	800bb38 <__clzsi2>
 8009660:	10800804 	addi	r2,r2,32
 8009664:	10fffe04 	addi	r3,r2,-8
 8009668:	010007c4 	movi	r4,31
 800966c:	20ff890e 	bge	r4,r3,8009494 <__alt_data_end+0xfc009494>
 8009670:	10bff604 	addi	r2,r2,-40
 8009674:	8884983a 	sll	r2,r17,r2
 8009678:	0023883a 	mov	r17,zero
 800967c:	1c3f8c0e 	bge	r3,r16,80094b0 <__alt_data_end+0xfc0094b0>
 8009680:	023fe034 	movhi	r8,65408
 8009684:	423fffc4 	addi	r8,r8,-1
 8009688:	80e1c83a 	sub	r16,r16,r3
 800968c:	1210703a 	and	r8,r2,r8
 8009690:	003f3806 	br	8009374 <__alt_data_end+0xfc009374>
 8009694:	9007883a 	mov	r3,r18
 8009698:	0011883a 	mov	r8,zero
 800969c:	0005883a 	mov	r2,zero
 80096a0:	003f4c06 	br	80093d4 <__alt_data_end+0xfc0093d4>
 80096a4:	498cb03a 	or	r6,r9,r6
 80096a8:	300cc03a 	cmpne	r6,r6,zero
 80096ac:	0007883a 	mov	r3,zero
 80096b0:	003f6806 	br	8009454 <__alt_data_end+0xfc009454>
 80096b4:	20009c1e 	bne	r4,zero,8009928 <__adddf3+0x630>
 80096b8:	80800044 	addi	r2,r16,1
 80096bc:	1141ffcc 	andi	r5,r2,2047
 80096c0:	01000044 	movi	r4,1
 80096c4:	2140670e 	bge	r4,r5,8009864 <__adddf3+0x56c>
 80096c8:	0101ffc4 	movi	r4,2047
 80096cc:	11007f26 	beq	r2,r4,80098cc <__adddf3+0x5d4>
 80096d0:	898d883a 	add	r6,r17,r6
 80096d4:	4247883a 	add	r3,r8,r9
 80096d8:	3451803a 	cmpltu	r8,r6,r17
 80096dc:	40d1883a 	add	r8,r8,r3
 80096e0:	402297fa 	slli	r17,r8,31
 80096e4:	300cd07a 	srli	r6,r6,1
 80096e8:	4010d07a 	srli	r8,r8,1
 80096ec:	1021883a 	mov	r16,r2
 80096f0:	89a2b03a 	or	r17,r17,r6
 80096f4:	003f1f06 	br	8009374 <__alt_data_end+0xfc009374>
 80096f8:	0081ffc4 	movi	r2,2047
 80096fc:	80bf481e 	bne	r16,r2,8009420 <__alt_data_end+0xfc009420>
 8009700:	003f1c06 	br	8009374 <__alt_data_end+0xfc009374>
 8009704:	843ff844 	addi	r16,r16,-31
 8009708:	01000804 	movi	r4,32
 800970c:	1406d83a 	srl	r3,r2,r16
 8009710:	41005026 	beq	r8,r4,8009854 <__adddf3+0x55c>
 8009714:	01001004 	movi	r4,64
 8009718:	2211c83a 	sub	r8,r4,r8
 800971c:	1204983a 	sll	r2,r2,r8
 8009720:	88a2b03a 	or	r17,r17,r2
 8009724:	8822c03a 	cmpne	r17,r17,zero
 8009728:	1c62b03a 	or	r17,r3,r17
 800972c:	0011883a 	mov	r8,zero
 8009730:	0021883a 	mov	r16,zero
 8009734:	003f7106 	br	80094fc <__alt_data_end+0xfc0094fc>
 8009738:	193ff804 	addi	r4,r3,-32
 800973c:	00800804 	movi	r2,32
 8009740:	4908d83a 	srl	r4,r9,r4
 8009744:	18804526 	beq	r3,r2,800985c <__adddf3+0x564>
 8009748:	00801004 	movi	r2,64
 800974c:	10c5c83a 	sub	r2,r2,r3
 8009750:	4886983a 	sll	r3,r9,r2
 8009754:	198cb03a 	or	r6,r3,r6
 8009758:	300cc03a 	cmpne	r6,r6,zero
 800975c:	218cb03a 	or	r6,r4,r6
 8009760:	0007883a 	mov	r3,zero
 8009764:	003f3b06 	br	8009454 <__alt_data_end+0xfc009454>
 8009768:	80002a26 	beq	r16,zero,8009814 <__adddf3+0x51c>
 800976c:	0101ffc4 	movi	r4,2047
 8009770:	11006826 	beq	r2,r4,8009914 <__adddf3+0x61c>
 8009774:	00c7c83a 	sub	r3,zero,r3
 8009778:	42002034 	orhi	r8,r8,128
 800977c:	01000e04 	movi	r4,56
 8009780:	20c07c16 	blt	r4,r3,8009974 <__adddf3+0x67c>
 8009784:	010007c4 	movi	r4,31
 8009788:	20c0da16 	blt	r4,r3,8009af4 <__adddf3+0x7fc>
 800978c:	01000804 	movi	r4,32
 8009790:	20c9c83a 	sub	r4,r4,r3
 8009794:	4114983a 	sll	r10,r8,r4
 8009798:	88cad83a 	srl	r5,r17,r3
 800979c:	8908983a 	sll	r4,r17,r4
 80097a0:	40c6d83a 	srl	r3,r8,r3
 80097a4:	5162b03a 	or	r17,r10,r5
 80097a8:	2008c03a 	cmpne	r4,r4,zero
 80097ac:	8922b03a 	or	r17,r17,r4
 80097b0:	3463c83a 	sub	r17,r6,r17
 80097b4:	48c7c83a 	sub	r3,r9,r3
 80097b8:	344d803a 	cmpltu	r6,r6,r17
 80097bc:	1991c83a 	sub	r8,r3,r6
 80097c0:	1021883a 	mov	r16,r2
 80097c4:	3825883a 	mov	r18,r7
 80097c8:	003f2706 	br	8009468 <__alt_data_end+0xfc009468>
 80097cc:	24d0b03a 	or	r8,r4,r19
 80097d0:	40001b1e 	bne	r8,zero,8009840 <__adddf3+0x548>
 80097d4:	0005883a 	mov	r2,zero
 80097d8:	0007883a 	mov	r3,zero
 80097dc:	0021883a 	mov	r16,zero
 80097e0:	003f4d06 	br	8009518 <__alt_data_end+0xfc009518>
 80097e4:	008007c4 	movi	r2,31
 80097e8:	11003c16 	blt	r2,r4,80098dc <__adddf3+0x5e4>
 80097ec:	00800804 	movi	r2,32
 80097f0:	1105c83a 	sub	r2,r2,r4
 80097f4:	488e983a 	sll	r7,r9,r2
 80097f8:	310ad83a 	srl	r5,r6,r4
 80097fc:	3084983a 	sll	r2,r6,r2
 8009800:	4912d83a 	srl	r9,r9,r4
 8009804:	394ab03a 	or	r5,r7,r5
 8009808:	1004c03a 	cmpne	r2,r2,zero
 800980c:	288ab03a 	or	r5,r5,r2
 8009810:	003f5306 	br	8009560 <__alt_data_end+0xfc009560>
 8009814:	4448b03a 	or	r4,r8,r17
 8009818:	20003e26 	beq	r4,zero,8009914 <__adddf3+0x61c>
 800981c:	00c6303a 	nor	r3,zero,r3
 8009820:	18003a1e 	bne	r3,zero,800990c <__adddf3+0x614>
 8009824:	3463c83a 	sub	r17,r6,r17
 8009828:	4a07c83a 	sub	r3,r9,r8
 800982c:	344d803a 	cmpltu	r6,r6,r17
 8009830:	1991c83a 	sub	r8,r3,r6
 8009834:	1021883a 	mov	r16,r2
 8009838:	3825883a 	mov	r18,r7
 800983c:	003f0a06 	br	8009468 <__alt_data_end+0xfc009468>
 8009840:	2023883a 	mov	r17,r4
 8009844:	003f0d06 	br	800947c <__alt_data_end+0xfc00947c>
 8009848:	0081ffc4 	movi	r2,2047
 800984c:	80bf3f1e 	bne	r16,r2,800954c <__alt_data_end+0xfc00954c>
 8009850:	003ec806 	br	8009374 <__alt_data_end+0xfc009374>
 8009854:	0005883a 	mov	r2,zero
 8009858:	003fb106 	br	8009720 <__alt_data_end+0xfc009720>
 800985c:	0007883a 	mov	r3,zero
 8009860:	003fbc06 	br	8009754 <__alt_data_end+0xfc009754>
 8009864:	4444b03a 	or	r2,r8,r17
 8009868:	8000871e 	bne	r16,zero,8009a88 <__adddf3+0x790>
 800986c:	1000ba26 	beq	r2,zero,8009b58 <__adddf3+0x860>
 8009870:	4984b03a 	or	r2,r9,r6
 8009874:	103ebf26 	beq	r2,zero,8009374 <__alt_data_end+0xfc009374>
 8009878:	8985883a 	add	r2,r17,r6
 800987c:	4247883a 	add	r3,r8,r9
 8009880:	1451803a 	cmpltu	r8,r2,r17
 8009884:	40d1883a 	add	r8,r8,r3
 8009888:	40c0202c 	andhi	r3,r8,128
 800988c:	1023883a 	mov	r17,r2
 8009890:	183f1a26 	beq	r3,zero,80094fc <__alt_data_end+0xfc0094fc>
 8009894:	00bfe034 	movhi	r2,65408
 8009898:	10bfffc4 	addi	r2,r2,-1
 800989c:	2021883a 	mov	r16,r4
 80098a0:	4090703a 	and	r8,r8,r2
 80098a4:	003eb306 	br	8009374 <__alt_data_end+0xfc009374>
 80098a8:	4444b03a 	or	r2,r8,r17
 80098ac:	8000291e 	bne	r16,zero,8009954 <__adddf3+0x65c>
 80098b0:	10004b1e 	bne	r2,zero,80099e0 <__adddf3+0x6e8>
 80098b4:	4990b03a 	or	r8,r9,r6
 80098b8:	40008b26 	beq	r8,zero,8009ae8 <__adddf3+0x7f0>
 80098bc:	4811883a 	mov	r8,r9
 80098c0:	3023883a 	mov	r17,r6
 80098c4:	3825883a 	mov	r18,r7
 80098c8:	003eaa06 	br	8009374 <__alt_data_end+0xfc009374>
 80098cc:	1021883a 	mov	r16,r2
 80098d0:	0011883a 	mov	r8,zero
 80098d4:	0005883a 	mov	r2,zero
 80098d8:	003f0f06 	br	8009518 <__alt_data_end+0xfc009518>
 80098dc:	217ff804 	addi	r5,r4,-32
 80098e0:	00800804 	movi	r2,32
 80098e4:	494ad83a 	srl	r5,r9,r5
 80098e8:	20807d26 	beq	r4,r2,8009ae0 <__adddf3+0x7e8>
 80098ec:	00801004 	movi	r2,64
 80098f0:	1109c83a 	sub	r4,r2,r4
 80098f4:	4912983a 	sll	r9,r9,r4
 80098f8:	498cb03a 	or	r6,r9,r6
 80098fc:	300cc03a 	cmpne	r6,r6,zero
 8009900:	298ab03a 	or	r5,r5,r6
 8009904:	0013883a 	mov	r9,zero
 8009908:	003f1506 	br	8009560 <__alt_data_end+0xfc009560>
 800990c:	0101ffc4 	movi	r4,2047
 8009910:	113f9a1e 	bne	r2,r4,800977c <__alt_data_end+0xfc00977c>
 8009914:	4811883a 	mov	r8,r9
 8009918:	3023883a 	mov	r17,r6
 800991c:	1021883a 	mov	r16,r2
 8009920:	3825883a 	mov	r18,r7
 8009924:	003e9306 	br	8009374 <__alt_data_end+0xfc009374>
 8009928:	8000161e 	bne	r16,zero,8009984 <__adddf3+0x68c>
 800992c:	444ab03a 	or	r5,r8,r17
 8009930:	28005126 	beq	r5,zero,8009a78 <__adddf3+0x780>
 8009934:	0108303a 	nor	r4,zero,r4
 8009938:	20004d1e 	bne	r4,zero,8009a70 <__adddf3+0x778>
 800993c:	89a3883a 	add	r17,r17,r6
 8009940:	4253883a 	add	r9,r8,r9
 8009944:	898d803a 	cmpltu	r6,r17,r6
 8009948:	3251883a 	add	r8,r6,r9
 800994c:	1021883a 	mov	r16,r2
 8009950:	003f0806 	br	8009574 <__alt_data_end+0xfc009574>
 8009954:	1000301e 	bne	r2,zero,8009a18 <__adddf3+0x720>
 8009958:	4984b03a 	or	r2,r9,r6
 800995c:	10007126 	beq	r2,zero,8009b24 <__adddf3+0x82c>
 8009960:	4811883a 	mov	r8,r9
 8009964:	3023883a 	mov	r17,r6
 8009968:	3825883a 	mov	r18,r7
 800996c:	0401ffc4 	movi	r16,2047
 8009970:	003e8006 	br	8009374 <__alt_data_end+0xfc009374>
 8009974:	4462b03a 	or	r17,r8,r17
 8009978:	8822c03a 	cmpne	r17,r17,zero
 800997c:	0007883a 	mov	r3,zero
 8009980:	003f8b06 	br	80097b0 <__alt_data_end+0xfc0097b0>
 8009984:	0141ffc4 	movi	r5,2047
 8009988:	11403b26 	beq	r2,r5,8009a78 <__adddf3+0x780>
 800998c:	0109c83a 	sub	r4,zero,r4
 8009990:	42002034 	orhi	r8,r8,128
 8009994:	01400e04 	movi	r5,56
 8009998:	29006716 	blt	r5,r4,8009b38 <__adddf3+0x840>
 800999c:	014007c4 	movi	r5,31
 80099a0:	29007016 	blt	r5,r4,8009b64 <__adddf3+0x86c>
 80099a4:	01400804 	movi	r5,32
 80099a8:	290bc83a 	sub	r5,r5,r4
 80099ac:	4154983a 	sll	r10,r8,r5
 80099b0:	890ed83a 	srl	r7,r17,r4
 80099b4:	894a983a 	sll	r5,r17,r5
 80099b8:	4108d83a 	srl	r4,r8,r4
 80099bc:	51e2b03a 	or	r17,r10,r7
 80099c0:	280ac03a 	cmpne	r5,r5,zero
 80099c4:	8962b03a 	or	r17,r17,r5
 80099c8:	89a3883a 	add	r17,r17,r6
 80099cc:	2253883a 	add	r9,r4,r9
 80099d0:	898d803a 	cmpltu	r6,r17,r6
 80099d4:	3251883a 	add	r8,r6,r9
 80099d8:	1021883a 	mov	r16,r2
 80099dc:	003ee506 	br	8009574 <__alt_data_end+0xfc009574>
 80099e0:	4984b03a 	or	r2,r9,r6
 80099e4:	103e6326 	beq	r2,zero,8009374 <__alt_data_end+0xfc009374>
 80099e8:	8987c83a 	sub	r3,r17,r6
 80099ec:	88c9803a 	cmpltu	r4,r17,r3
 80099f0:	4245c83a 	sub	r2,r8,r9
 80099f4:	1105c83a 	sub	r2,r2,r4
 80099f8:	1100202c 	andhi	r4,r2,128
 80099fc:	203ebb26 	beq	r4,zero,80094ec <__alt_data_end+0xfc0094ec>
 8009a00:	3463c83a 	sub	r17,r6,r17
 8009a04:	4a07c83a 	sub	r3,r9,r8
 8009a08:	344d803a 	cmpltu	r6,r6,r17
 8009a0c:	1991c83a 	sub	r8,r3,r6
 8009a10:	3825883a 	mov	r18,r7
 8009a14:	003e5706 	br	8009374 <__alt_data_end+0xfc009374>
 8009a18:	4984b03a 	or	r2,r9,r6
 8009a1c:	10002e26 	beq	r2,zero,8009ad8 <__adddf3+0x7e0>
 8009a20:	4004d0fa 	srli	r2,r8,3
 8009a24:	8822d0fa 	srli	r17,r17,3
 8009a28:	4010977a 	slli	r8,r8,29
 8009a2c:	10c0022c 	andhi	r3,r2,8
 8009a30:	4462b03a 	or	r17,r8,r17
 8009a34:	18000826 	beq	r3,zero,8009a58 <__adddf3+0x760>
 8009a38:	4808d0fa 	srli	r4,r9,3
 8009a3c:	20c0022c 	andhi	r3,r4,8
 8009a40:	1800051e 	bne	r3,zero,8009a58 <__adddf3+0x760>
 8009a44:	300cd0fa 	srli	r6,r6,3
 8009a48:	4806977a 	slli	r3,r9,29
 8009a4c:	2005883a 	mov	r2,r4
 8009a50:	3825883a 	mov	r18,r7
 8009a54:	19a2b03a 	or	r17,r3,r6
 8009a58:	8810d77a 	srli	r8,r17,29
 8009a5c:	100490fa 	slli	r2,r2,3
 8009a60:	882290fa 	slli	r17,r17,3
 8009a64:	0401ffc4 	movi	r16,2047
 8009a68:	4090b03a 	or	r8,r8,r2
 8009a6c:	003e4106 	br	8009374 <__alt_data_end+0xfc009374>
 8009a70:	0141ffc4 	movi	r5,2047
 8009a74:	117fc71e 	bne	r2,r5,8009994 <__alt_data_end+0xfc009994>
 8009a78:	4811883a 	mov	r8,r9
 8009a7c:	3023883a 	mov	r17,r6
 8009a80:	1021883a 	mov	r16,r2
 8009a84:	003e3b06 	br	8009374 <__alt_data_end+0xfc009374>
 8009a88:	10002f26 	beq	r2,zero,8009b48 <__adddf3+0x850>
 8009a8c:	4984b03a 	or	r2,r9,r6
 8009a90:	10001126 	beq	r2,zero,8009ad8 <__adddf3+0x7e0>
 8009a94:	4004d0fa 	srli	r2,r8,3
 8009a98:	8822d0fa 	srli	r17,r17,3
 8009a9c:	4010977a 	slli	r8,r8,29
 8009aa0:	10c0022c 	andhi	r3,r2,8
 8009aa4:	4462b03a 	or	r17,r8,r17
 8009aa8:	183feb26 	beq	r3,zero,8009a58 <__alt_data_end+0xfc009a58>
 8009aac:	4808d0fa 	srli	r4,r9,3
 8009ab0:	20c0022c 	andhi	r3,r4,8
 8009ab4:	183fe81e 	bne	r3,zero,8009a58 <__alt_data_end+0xfc009a58>
 8009ab8:	300cd0fa 	srli	r6,r6,3
 8009abc:	4806977a 	slli	r3,r9,29
 8009ac0:	2005883a 	mov	r2,r4
 8009ac4:	19a2b03a 	or	r17,r3,r6
 8009ac8:	003fe306 	br	8009a58 <__alt_data_end+0xfc009a58>
 8009acc:	0011883a 	mov	r8,zero
 8009ad0:	0005883a 	mov	r2,zero
 8009ad4:	003e3f06 	br	80093d4 <__alt_data_end+0xfc0093d4>
 8009ad8:	0401ffc4 	movi	r16,2047
 8009adc:	003e2506 	br	8009374 <__alt_data_end+0xfc009374>
 8009ae0:	0013883a 	mov	r9,zero
 8009ae4:	003f8406 	br	80098f8 <__alt_data_end+0xfc0098f8>
 8009ae8:	0005883a 	mov	r2,zero
 8009aec:	0007883a 	mov	r3,zero
 8009af0:	003e8906 	br	8009518 <__alt_data_end+0xfc009518>
 8009af4:	197ff804 	addi	r5,r3,-32
 8009af8:	01000804 	movi	r4,32
 8009afc:	414ad83a 	srl	r5,r8,r5
 8009b00:	19002426 	beq	r3,r4,8009b94 <__adddf3+0x89c>
 8009b04:	01001004 	movi	r4,64
 8009b08:	20c7c83a 	sub	r3,r4,r3
 8009b0c:	40c6983a 	sll	r3,r8,r3
 8009b10:	1c46b03a 	or	r3,r3,r17
 8009b14:	1806c03a 	cmpne	r3,r3,zero
 8009b18:	28e2b03a 	or	r17,r5,r3
 8009b1c:	0007883a 	mov	r3,zero
 8009b20:	003f2306 	br	80097b0 <__alt_data_end+0xfc0097b0>
 8009b24:	0007883a 	mov	r3,zero
 8009b28:	5811883a 	mov	r8,r11
 8009b2c:	00bfffc4 	movi	r2,-1
 8009b30:	0401ffc4 	movi	r16,2047
 8009b34:	003e7806 	br	8009518 <__alt_data_end+0xfc009518>
 8009b38:	4462b03a 	or	r17,r8,r17
 8009b3c:	8822c03a 	cmpne	r17,r17,zero
 8009b40:	0009883a 	mov	r4,zero
 8009b44:	003fa006 	br	80099c8 <__alt_data_end+0xfc0099c8>
 8009b48:	4811883a 	mov	r8,r9
 8009b4c:	3023883a 	mov	r17,r6
 8009b50:	0401ffc4 	movi	r16,2047
 8009b54:	003e0706 	br	8009374 <__alt_data_end+0xfc009374>
 8009b58:	4811883a 	mov	r8,r9
 8009b5c:	3023883a 	mov	r17,r6
 8009b60:	003e0406 	br	8009374 <__alt_data_end+0xfc009374>
 8009b64:	21fff804 	addi	r7,r4,-32
 8009b68:	01400804 	movi	r5,32
 8009b6c:	41ced83a 	srl	r7,r8,r7
 8009b70:	21400a26 	beq	r4,r5,8009b9c <__adddf3+0x8a4>
 8009b74:	01401004 	movi	r5,64
 8009b78:	2909c83a 	sub	r4,r5,r4
 8009b7c:	4108983a 	sll	r4,r8,r4
 8009b80:	2448b03a 	or	r4,r4,r17
 8009b84:	2008c03a 	cmpne	r4,r4,zero
 8009b88:	3922b03a 	or	r17,r7,r4
 8009b8c:	0009883a 	mov	r4,zero
 8009b90:	003f8d06 	br	80099c8 <__alt_data_end+0xfc0099c8>
 8009b94:	0007883a 	mov	r3,zero
 8009b98:	003fdd06 	br	8009b10 <__alt_data_end+0xfc009b10>
 8009b9c:	0009883a 	mov	r4,zero
 8009ba0:	003ff706 	br	8009b80 <__alt_data_end+0xfc009b80>

08009ba4 <__divdf3>:
 8009ba4:	defff004 	addi	sp,sp,-64
 8009ba8:	dc800815 	stw	r18,32(sp)
 8009bac:	2824d53a 	srli	r18,r5,20
 8009bb0:	dd800c15 	stw	r22,48(sp)
 8009bb4:	282cd7fa 	srli	r22,r5,31
 8009bb8:	dc000615 	stw	r16,24(sp)
 8009bbc:	04000434 	movhi	r16,16
 8009bc0:	843fffc4 	addi	r16,r16,-1
 8009bc4:	dfc00f15 	stw	ra,60(sp)
 8009bc8:	df000e15 	stw	fp,56(sp)
 8009bcc:	ddc00d15 	stw	r23,52(sp)
 8009bd0:	dd400b15 	stw	r21,44(sp)
 8009bd4:	dd000a15 	stw	r20,40(sp)
 8009bd8:	dcc00915 	stw	r19,36(sp)
 8009bdc:	dc400715 	stw	r17,28(sp)
 8009be0:	9481ffcc 	andi	r18,r18,2047
 8009be4:	2c20703a 	and	r16,r5,r16
 8009be8:	b2003fcc 	andi	r8,r22,255
 8009bec:	90006126 	beq	r18,zero,8009d74 <__divdf3+0x1d0>
 8009bf0:	0081ffc4 	movi	r2,2047
 8009bf4:	202b883a 	mov	r21,r4
 8009bf8:	90803726 	beq	r18,r2,8009cd8 <__divdf3+0x134>
 8009bfc:	80800434 	orhi	r2,r16,16
 8009c00:	100490fa 	slli	r2,r2,3
 8009c04:	2020d77a 	srli	r16,r4,29
 8009c08:	202a90fa 	slli	r21,r4,3
 8009c0c:	94bf0044 	addi	r18,r18,-1023
 8009c10:	80a0b03a 	or	r16,r16,r2
 8009c14:	0013883a 	mov	r9,zero
 8009c18:	000b883a 	mov	r5,zero
 8009c1c:	3806d53a 	srli	r3,r7,20
 8009c20:	382ed7fa 	srli	r23,r7,31
 8009c24:	04400434 	movhi	r17,16
 8009c28:	8c7fffc4 	addi	r17,r17,-1
 8009c2c:	18c1ffcc 	andi	r3,r3,2047
 8009c30:	3029883a 	mov	r20,r6
 8009c34:	3c62703a 	and	r17,r7,r17
 8009c38:	bf003fcc 	andi	fp,r23,255
 8009c3c:	18006e26 	beq	r3,zero,8009df8 <__divdf3+0x254>
 8009c40:	0081ffc4 	movi	r2,2047
 8009c44:	18806626 	beq	r3,r2,8009de0 <__divdf3+0x23c>
 8009c48:	88800434 	orhi	r2,r17,16
 8009c4c:	100490fa 	slli	r2,r2,3
 8009c50:	3022d77a 	srli	r17,r6,29
 8009c54:	302890fa 	slli	r20,r6,3
 8009c58:	18ff0044 	addi	r3,r3,-1023
 8009c5c:	88a2b03a 	or	r17,r17,r2
 8009c60:	000f883a 	mov	r7,zero
 8009c64:	b5e6f03a 	xor	r19,r22,r23
 8009c68:	3a4cb03a 	or	r6,r7,r9
 8009c6c:	008003c4 	movi	r2,15
 8009c70:	9809883a 	mov	r4,r19
 8009c74:	90c7c83a 	sub	r3,r18,r3
 8009c78:	9cc03fcc 	andi	r19,r19,255
 8009c7c:	11809636 	bltu	r2,r6,8009ed8 <__divdf3+0x334>
 8009c80:	300c90ba 	slli	r6,r6,2
 8009c84:	00820074 	movhi	r2,2049
 8009c88:	10a72604 	addi	r2,r2,-25448
 8009c8c:	308d883a 	add	r6,r6,r2
 8009c90:	30800017 	ldw	r2,0(r6)
 8009c94:	1000683a 	jmp	r2
 8009c98:	08009ed8 	cmpnei	zero,at,635
 8009c9c:	08009d10 	cmplti	zero,at,628
 8009ca0:	08009ec8 	cmpgei	zero,at,635
 8009ca4:	08009d04 	addi	zero,at,628
 8009ca8:	08009ec8 	cmpgei	zero,at,635
 8009cac:	08009e9c 	xori	zero,at,634
 8009cb0:	08009ec8 	cmpgei	zero,at,635
 8009cb4:	08009d04 	addi	zero,at,628
 8009cb8:	08009d10 	cmplti	zero,at,628
 8009cbc:	08009d10 	cmplti	zero,at,628
 8009cc0:	08009e9c 	xori	zero,at,634
 8009cc4:	08009d04 	addi	zero,at,628
 8009cc8:	08009cf4 	orhi	zero,at,627
 8009ccc:	08009cf4 	orhi	zero,at,627
 8009cd0:	08009cf4 	orhi	zero,at,627
 8009cd4:	0800a260 	cmpeqi	zero,at,649
 8009cd8:	2404b03a 	or	r2,r4,r16
 8009cdc:	10006c1e 	bne	r2,zero,8009e90 <__divdf3+0x2ec>
 8009ce0:	02400204 	movi	r9,8
 8009ce4:	0021883a 	mov	r16,zero
 8009ce8:	002b883a 	mov	r21,zero
 8009cec:	01400084 	movi	r5,2
 8009cf0:	003fca06 	br	8009c1c <__alt_data_end+0xfc009c1c>
 8009cf4:	8023883a 	mov	r17,r16
 8009cf8:	a829883a 	mov	r20,r21
 8009cfc:	4039883a 	mov	fp,r8
 8009d00:	280f883a 	mov	r7,r5
 8009d04:	00800084 	movi	r2,2
 8009d08:	3881601e 	bne	r7,r2,800a28c <__divdf3+0x6e8>
 8009d0c:	e027883a 	mov	r19,fp
 8009d10:	9900004c 	andi	r4,r19,1
 8009d14:	0081ffc4 	movi	r2,2047
 8009d18:	0021883a 	mov	r16,zero
 8009d1c:	002b883a 	mov	r21,zero
 8009d20:	1004953a 	slli	r2,r2,20
 8009d24:	20c03fcc 	andi	r3,r4,255
 8009d28:	01400434 	movhi	r5,16
 8009d2c:	297fffc4 	addi	r5,r5,-1
 8009d30:	180697fa 	slli	r3,r3,31
 8009d34:	8160703a 	and	r16,r16,r5
 8009d38:	80a0b03a 	or	r16,r16,r2
 8009d3c:	80c6b03a 	or	r3,r16,r3
 8009d40:	a805883a 	mov	r2,r21
 8009d44:	dfc00f17 	ldw	ra,60(sp)
 8009d48:	df000e17 	ldw	fp,56(sp)
 8009d4c:	ddc00d17 	ldw	r23,52(sp)
 8009d50:	dd800c17 	ldw	r22,48(sp)
 8009d54:	dd400b17 	ldw	r21,44(sp)
 8009d58:	dd000a17 	ldw	r20,40(sp)
 8009d5c:	dcc00917 	ldw	r19,36(sp)
 8009d60:	dc800817 	ldw	r18,32(sp)
 8009d64:	dc400717 	ldw	r17,28(sp)
 8009d68:	dc000617 	ldw	r16,24(sp)
 8009d6c:	dec01004 	addi	sp,sp,64
 8009d70:	f800283a 	ret
 8009d74:	2404b03a 	or	r2,r4,r16
 8009d78:	2023883a 	mov	r17,r4
 8009d7c:	10003f26 	beq	r2,zero,8009e7c <__divdf3+0x2d8>
 8009d80:	80015e26 	beq	r16,zero,800a2fc <__divdf3+0x758>
 8009d84:	8009883a 	mov	r4,r16
 8009d88:	d9800215 	stw	r6,8(sp)
 8009d8c:	d9c00515 	stw	r7,20(sp)
 8009d90:	da000415 	stw	r8,16(sp)
 8009d94:	800bb380 	call	800bb38 <__clzsi2>
 8009d98:	d9800217 	ldw	r6,8(sp)
 8009d9c:	d9c00517 	ldw	r7,20(sp)
 8009da0:	da000417 	ldw	r8,16(sp)
 8009da4:	113ffd44 	addi	r4,r2,-11
 8009da8:	00c00704 	movi	r3,28
 8009dac:	19014f16 	blt	r3,r4,800a2ec <__divdf3+0x748>
 8009db0:	00c00744 	movi	r3,29
 8009db4:	157ffe04 	addi	r21,r2,-8
 8009db8:	1907c83a 	sub	r3,r3,r4
 8009dbc:	8560983a 	sll	r16,r16,r21
 8009dc0:	88c6d83a 	srl	r3,r17,r3
 8009dc4:	8d6a983a 	sll	r21,r17,r21
 8009dc8:	1c20b03a 	or	r16,r3,r16
 8009dcc:	1080fcc4 	addi	r2,r2,1011
 8009dd0:	00a5c83a 	sub	r18,zero,r2
 8009dd4:	0013883a 	mov	r9,zero
 8009dd8:	000b883a 	mov	r5,zero
 8009ddc:	003f8f06 	br	8009c1c <__alt_data_end+0xfc009c1c>
 8009de0:	3444b03a 	or	r2,r6,r17
 8009de4:	1000231e 	bne	r2,zero,8009e74 <__divdf3+0x2d0>
 8009de8:	0023883a 	mov	r17,zero
 8009dec:	0029883a 	mov	r20,zero
 8009df0:	01c00084 	movi	r7,2
 8009df4:	003f9b06 	br	8009c64 <__alt_data_end+0xfc009c64>
 8009df8:	3444b03a 	or	r2,r6,r17
 8009dfc:	10001926 	beq	r2,zero,8009e64 <__divdf3+0x2c0>
 8009e00:	88014b26 	beq	r17,zero,800a330 <__divdf3+0x78c>
 8009e04:	8809883a 	mov	r4,r17
 8009e08:	d9400115 	stw	r5,4(sp)
 8009e0c:	d9800215 	stw	r6,8(sp)
 8009e10:	da000415 	stw	r8,16(sp)
 8009e14:	da400315 	stw	r9,12(sp)
 8009e18:	800bb380 	call	800bb38 <__clzsi2>
 8009e1c:	d9400117 	ldw	r5,4(sp)
 8009e20:	d9800217 	ldw	r6,8(sp)
 8009e24:	da000417 	ldw	r8,16(sp)
 8009e28:	da400317 	ldw	r9,12(sp)
 8009e2c:	113ffd44 	addi	r4,r2,-11
 8009e30:	00c00704 	movi	r3,28
 8009e34:	19013a16 	blt	r3,r4,800a320 <__divdf3+0x77c>
 8009e38:	00c00744 	movi	r3,29
 8009e3c:	153ffe04 	addi	r20,r2,-8
 8009e40:	1907c83a 	sub	r3,r3,r4
 8009e44:	8d22983a 	sll	r17,r17,r20
 8009e48:	30c6d83a 	srl	r3,r6,r3
 8009e4c:	3528983a 	sll	r20,r6,r20
 8009e50:	1c62b03a 	or	r17,r3,r17
 8009e54:	1080fcc4 	addi	r2,r2,1011
 8009e58:	0087c83a 	sub	r3,zero,r2
 8009e5c:	000f883a 	mov	r7,zero
 8009e60:	003f8006 	br	8009c64 <__alt_data_end+0xfc009c64>
 8009e64:	0023883a 	mov	r17,zero
 8009e68:	0029883a 	mov	r20,zero
 8009e6c:	01c00044 	movi	r7,1
 8009e70:	003f7c06 	br	8009c64 <__alt_data_end+0xfc009c64>
 8009e74:	01c000c4 	movi	r7,3
 8009e78:	003f7a06 	br	8009c64 <__alt_data_end+0xfc009c64>
 8009e7c:	02400104 	movi	r9,4
 8009e80:	0021883a 	mov	r16,zero
 8009e84:	002b883a 	mov	r21,zero
 8009e88:	01400044 	movi	r5,1
 8009e8c:	003f6306 	br	8009c1c <__alt_data_end+0xfc009c1c>
 8009e90:	02400304 	movi	r9,12
 8009e94:	014000c4 	movi	r5,3
 8009e98:	003f6006 	br	8009c1c <__alt_data_end+0xfc009c1c>
 8009e9c:	04000434 	movhi	r16,16
 8009ea0:	0009883a 	mov	r4,zero
 8009ea4:	843fffc4 	addi	r16,r16,-1
 8009ea8:	057fffc4 	movi	r21,-1
 8009eac:	0081ffc4 	movi	r2,2047
 8009eb0:	003f9b06 	br	8009d20 <__alt_data_end+0xfc009d20>
 8009eb4:	00c00044 	movi	r3,1
 8009eb8:	1887c83a 	sub	r3,r3,r2
 8009ebc:	01000e04 	movi	r4,56
 8009ec0:	20c1530e 	bge	r4,r3,800a410 <__divdf3+0x86c>
 8009ec4:	9900004c 	andi	r4,r19,1
 8009ec8:	0005883a 	mov	r2,zero
 8009ecc:	0021883a 	mov	r16,zero
 8009ed0:	002b883a 	mov	r21,zero
 8009ed4:	003f9206 	br	8009d20 <__alt_data_end+0xfc009d20>
 8009ed8:	8c012e36 	bltu	r17,r16,800a394 <__divdf3+0x7f0>
 8009edc:	84412c26 	beq	r16,r17,800a390 <__divdf3+0x7ec>
 8009ee0:	a82f883a 	mov	r23,r21
 8009ee4:	18ffffc4 	addi	r3,r3,-1
 8009ee8:	002b883a 	mov	r21,zero
 8009eec:	a004d63a 	srli	r2,r20,24
 8009ef0:	8822923a 	slli	r17,r17,8
 8009ef4:	a028923a 	slli	r20,r20,8
 8009ef8:	8009883a 	mov	r4,r16
 8009efc:	88acb03a 	or	r22,r17,r2
 8009f00:	dd000015 	stw	r20,0(sp)
 8009f04:	b028d43a 	srli	r20,r22,16
 8009f08:	d8c00215 	stw	r3,8(sp)
 8009f0c:	b4bfffcc 	andi	r18,r22,65535
 8009f10:	a00b883a 	mov	r5,r20
 8009f14:	800082c0 	call	800082c <__udivsi3>
 8009f18:	100b883a 	mov	r5,r2
 8009f1c:	9009883a 	mov	r4,r18
 8009f20:	1023883a 	mov	r17,r2
 8009f24:	80008e80 	call	80008e8 <__mulsi3>
 8009f28:	8009883a 	mov	r4,r16
 8009f2c:	a00b883a 	mov	r5,r20
 8009f30:	1039883a 	mov	fp,r2
 8009f34:	80008900 	call	8000890 <__umodsi3>
 8009f38:	1004943a 	slli	r2,r2,16
 8009f3c:	b808d43a 	srli	r4,r23,16
 8009f40:	d8c00217 	ldw	r3,8(sp)
 8009f44:	2084b03a 	or	r2,r4,r2
 8009f48:	1700062e 	bgeu	r2,fp,8009f64 <__divdf3+0x3c0>
 8009f4c:	1585883a 	add	r2,r2,r22
 8009f50:	893fffc4 	addi	r4,r17,-1
 8009f54:	15811d36 	bltu	r2,r22,800a3cc <__divdf3+0x828>
 8009f58:	17011c2e 	bgeu	r2,fp,800a3cc <__divdf3+0x828>
 8009f5c:	8c7fff84 	addi	r17,r17,-2
 8009f60:	1585883a 	add	r2,r2,r22
 8009f64:	1739c83a 	sub	fp,r2,fp
 8009f68:	a00b883a 	mov	r5,r20
 8009f6c:	e009883a 	mov	r4,fp
 8009f70:	d8c00215 	stw	r3,8(sp)
 8009f74:	800082c0 	call	800082c <__udivsi3>
 8009f78:	100b883a 	mov	r5,r2
 8009f7c:	9009883a 	mov	r4,r18
 8009f80:	1021883a 	mov	r16,r2
 8009f84:	80008e80 	call	80008e8 <__mulsi3>
 8009f88:	a00b883a 	mov	r5,r20
 8009f8c:	e009883a 	mov	r4,fp
 8009f90:	d8800415 	stw	r2,16(sp)
 8009f94:	80008900 	call	8000890 <__umodsi3>
 8009f98:	1004943a 	slli	r2,r2,16
 8009f9c:	da000417 	ldw	r8,16(sp)
 8009fa0:	bdffffcc 	andi	r23,r23,65535
 8009fa4:	b884b03a 	or	r2,r23,r2
 8009fa8:	d8c00217 	ldw	r3,8(sp)
 8009fac:	1200062e 	bgeu	r2,r8,8009fc8 <__divdf3+0x424>
 8009fb0:	1585883a 	add	r2,r2,r22
 8009fb4:	813fffc4 	addi	r4,r16,-1
 8009fb8:	15810236 	bltu	r2,r22,800a3c4 <__divdf3+0x820>
 8009fbc:	1201012e 	bgeu	r2,r8,800a3c4 <__divdf3+0x820>
 8009fc0:	843fff84 	addi	r16,r16,-2
 8009fc4:	1585883a 	add	r2,r2,r22
 8009fc8:	8822943a 	slli	r17,r17,16
 8009fcc:	d9800017 	ldw	r6,0(sp)
 8009fd0:	1211c83a 	sub	r8,r2,r8
 8009fd4:	8c22b03a 	or	r17,r17,r16
 8009fd8:	373fffcc 	andi	fp,r6,65535
 8009fdc:	8abfffcc 	andi	r10,r17,65535
 8009fe0:	8820d43a 	srli	r16,r17,16
 8009fe4:	5009883a 	mov	r4,r10
 8009fe8:	e00b883a 	mov	r5,fp
 8009fec:	302ed43a 	srli	r23,r6,16
 8009ff0:	d8c00215 	stw	r3,8(sp)
 8009ff4:	da000415 	stw	r8,16(sp)
 8009ff8:	da800115 	stw	r10,4(sp)
 8009ffc:	80008e80 	call	80008e8 <__mulsi3>
 800a000:	800b883a 	mov	r5,r16
 800a004:	e009883a 	mov	r4,fp
 800a008:	d8800515 	stw	r2,20(sp)
 800a00c:	80008e80 	call	80008e8 <__mulsi3>
 800a010:	8009883a 	mov	r4,r16
 800a014:	b80b883a 	mov	r5,r23
 800a018:	d8800315 	stw	r2,12(sp)
 800a01c:	80008e80 	call	80008e8 <__mulsi3>
 800a020:	da800117 	ldw	r10,4(sp)
 800a024:	b80b883a 	mov	r5,r23
 800a028:	1021883a 	mov	r16,r2
 800a02c:	5009883a 	mov	r4,r10
 800a030:	80008e80 	call	80008e8 <__mulsi3>
 800a034:	d9c00517 	ldw	r7,20(sp)
 800a038:	da400317 	ldw	r9,12(sp)
 800a03c:	d8c00217 	ldw	r3,8(sp)
 800a040:	3808d43a 	srli	r4,r7,16
 800a044:	1245883a 	add	r2,r2,r9
 800a048:	da000417 	ldw	r8,16(sp)
 800a04c:	2085883a 	add	r2,r4,r2
 800a050:	1240022e 	bgeu	r2,r9,800a05c <__divdf3+0x4b8>
 800a054:	01000074 	movhi	r4,1
 800a058:	8121883a 	add	r16,r16,r4
 800a05c:	1008d43a 	srli	r4,r2,16
 800a060:	1004943a 	slli	r2,r2,16
 800a064:	39ffffcc 	andi	r7,r7,65535
 800a068:	2409883a 	add	r4,r4,r16
 800a06c:	11c5883a 	add	r2,r2,r7
 800a070:	4100bb36 	bltu	r8,r4,800a360 <__divdf3+0x7bc>
 800a074:	4100d726 	beq	r8,r4,800a3d4 <__divdf3+0x830>
 800a078:	4109c83a 	sub	r4,r8,r4
 800a07c:	a8a1c83a 	sub	r16,r21,r2
 800a080:	ac2b803a 	cmpltu	r21,r21,r16
 800a084:	256bc83a 	sub	r21,r4,r21
 800a088:	b540d926 	beq	r22,r21,800a3f0 <__divdf3+0x84c>
 800a08c:	a00b883a 	mov	r5,r20
 800a090:	a809883a 	mov	r4,r21
 800a094:	d8c00215 	stw	r3,8(sp)
 800a098:	800082c0 	call	800082c <__udivsi3>
 800a09c:	100b883a 	mov	r5,r2
 800a0a0:	9009883a 	mov	r4,r18
 800a0a4:	d8800515 	stw	r2,20(sp)
 800a0a8:	80008e80 	call	80008e8 <__mulsi3>
 800a0ac:	a809883a 	mov	r4,r21
 800a0b0:	a00b883a 	mov	r5,r20
 800a0b4:	d8800415 	stw	r2,16(sp)
 800a0b8:	80008900 	call	8000890 <__umodsi3>
 800a0bc:	1004943a 	slli	r2,r2,16
 800a0c0:	8008d43a 	srli	r4,r16,16
 800a0c4:	da000417 	ldw	r8,16(sp)
 800a0c8:	d8c00217 	ldw	r3,8(sp)
 800a0cc:	2084b03a 	or	r2,r4,r2
 800a0d0:	d9c00517 	ldw	r7,20(sp)
 800a0d4:	1200062e 	bgeu	r2,r8,800a0f0 <__divdf3+0x54c>
 800a0d8:	1585883a 	add	r2,r2,r22
 800a0dc:	393fffc4 	addi	r4,r7,-1
 800a0e0:	1580c536 	bltu	r2,r22,800a3f8 <__divdf3+0x854>
 800a0e4:	1200c42e 	bgeu	r2,r8,800a3f8 <__divdf3+0x854>
 800a0e8:	39ffff84 	addi	r7,r7,-2
 800a0ec:	1585883a 	add	r2,r2,r22
 800a0f0:	122bc83a 	sub	r21,r2,r8
 800a0f4:	a00b883a 	mov	r5,r20
 800a0f8:	a809883a 	mov	r4,r21
 800a0fc:	d8c00215 	stw	r3,8(sp)
 800a100:	d9c00515 	stw	r7,20(sp)
 800a104:	800082c0 	call	800082c <__udivsi3>
 800a108:	9009883a 	mov	r4,r18
 800a10c:	100b883a 	mov	r5,r2
 800a110:	d8800415 	stw	r2,16(sp)
 800a114:	80008e80 	call	80008e8 <__mulsi3>
 800a118:	a809883a 	mov	r4,r21
 800a11c:	a00b883a 	mov	r5,r20
 800a120:	1025883a 	mov	r18,r2
 800a124:	80008900 	call	8000890 <__umodsi3>
 800a128:	1004943a 	slli	r2,r2,16
 800a12c:	813fffcc 	andi	r4,r16,65535
 800a130:	d8c00217 	ldw	r3,8(sp)
 800a134:	20a0b03a 	or	r16,r4,r2
 800a138:	d9c00517 	ldw	r7,20(sp)
 800a13c:	da000417 	ldw	r8,16(sp)
 800a140:	8480062e 	bgeu	r16,r18,800a15c <__divdf3+0x5b8>
 800a144:	85a1883a 	add	r16,r16,r22
 800a148:	40bfffc4 	addi	r2,r8,-1
 800a14c:	8580ac36 	bltu	r16,r22,800a400 <__divdf3+0x85c>
 800a150:	8480ab2e 	bgeu	r16,r18,800a400 <__divdf3+0x85c>
 800a154:	423fff84 	addi	r8,r8,-2
 800a158:	85a1883a 	add	r16,r16,r22
 800a15c:	3804943a 	slli	r2,r7,16
 800a160:	84a1c83a 	sub	r16,r16,r18
 800a164:	e009883a 	mov	r4,fp
 800a168:	1228b03a 	or	r20,r2,r8
 800a16c:	a1ffffcc 	andi	r7,r20,65535
 800a170:	a024d43a 	srli	r18,r20,16
 800a174:	380b883a 	mov	r5,r7
 800a178:	d8c00215 	stw	r3,8(sp)
 800a17c:	d9c00515 	stw	r7,20(sp)
 800a180:	80008e80 	call	80008e8 <__mulsi3>
 800a184:	900b883a 	mov	r5,r18
 800a188:	e009883a 	mov	r4,fp
 800a18c:	102b883a 	mov	r21,r2
 800a190:	80008e80 	call	80008e8 <__mulsi3>
 800a194:	900b883a 	mov	r5,r18
 800a198:	b809883a 	mov	r4,r23
 800a19c:	1039883a 	mov	fp,r2
 800a1a0:	80008e80 	call	80008e8 <__mulsi3>
 800a1a4:	d9c00517 	ldw	r7,20(sp)
 800a1a8:	b80b883a 	mov	r5,r23
 800a1ac:	1025883a 	mov	r18,r2
 800a1b0:	3809883a 	mov	r4,r7
 800a1b4:	80008e80 	call	80008e8 <__mulsi3>
 800a1b8:	a808d43a 	srli	r4,r21,16
 800a1bc:	1705883a 	add	r2,r2,fp
 800a1c0:	d8c00217 	ldw	r3,8(sp)
 800a1c4:	2085883a 	add	r2,r4,r2
 800a1c8:	1700022e 	bgeu	r2,fp,800a1d4 <__divdf3+0x630>
 800a1cc:	01000074 	movhi	r4,1
 800a1d0:	9125883a 	add	r18,r18,r4
 800a1d4:	1008d43a 	srli	r4,r2,16
 800a1d8:	1004943a 	slli	r2,r2,16
 800a1dc:	ad7fffcc 	andi	r21,r21,65535
 800a1e0:	2489883a 	add	r4,r4,r18
 800a1e4:	1545883a 	add	r2,r2,r21
 800a1e8:	81003836 	bltu	r16,r4,800a2cc <__divdf3+0x728>
 800a1ec:	81003626 	beq	r16,r4,800a2c8 <__divdf3+0x724>
 800a1f0:	a5000054 	ori	r20,r20,1
 800a1f4:	1880ffc4 	addi	r2,r3,1023
 800a1f8:	00bf2e0e 	bge	zero,r2,8009eb4 <__alt_data_end+0xfc009eb4>
 800a1fc:	a10001cc 	andi	r4,r20,7
 800a200:	20000726 	beq	r4,zero,800a220 <__divdf3+0x67c>
 800a204:	a10003cc 	andi	r4,r20,15
 800a208:	01400104 	movi	r5,4
 800a20c:	21400426 	beq	r4,r5,800a220 <__divdf3+0x67c>
 800a210:	a149883a 	add	r4,r20,r5
 800a214:	2529803a 	cmpltu	r20,r4,r20
 800a218:	8d23883a 	add	r17,r17,r20
 800a21c:	2029883a 	mov	r20,r4
 800a220:	8900402c 	andhi	r4,r17,256
 800a224:	20000426 	beq	r4,zero,800a238 <__divdf3+0x694>
 800a228:	18810004 	addi	r2,r3,1024
 800a22c:	00ffc034 	movhi	r3,65280
 800a230:	18ffffc4 	addi	r3,r3,-1
 800a234:	88e2703a 	and	r17,r17,r3
 800a238:	00c1ff84 	movi	r3,2046
 800a23c:	18beb416 	blt	r3,r2,8009d10 <__alt_data_end+0xfc009d10>
 800a240:	a028d0fa 	srli	r20,r20,3
 800a244:	882a977a 	slli	r21,r17,29
 800a248:	8820927a 	slli	r16,r17,9
 800a24c:	1081ffcc 	andi	r2,r2,2047
 800a250:	ad2ab03a 	or	r21,r21,r20
 800a254:	8020d33a 	srli	r16,r16,12
 800a258:	9900004c 	andi	r4,r19,1
 800a25c:	003eb006 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a260:	8080022c 	andhi	r2,r16,8
 800a264:	10001226 	beq	r2,zero,800a2b0 <__divdf3+0x70c>
 800a268:	8880022c 	andhi	r2,r17,8
 800a26c:	1000101e 	bne	r2,zero,800a2b0 <__divdf3+0x70c>
 800a270:	00800434 	movhi	r2,16
 800a274:	8c000234 	orhi	r16,r17,8
 800a278:	10bfffc4 	addi	r2,r2,-1
 800a27c:	b809883a 	mov	r4,r23
 800a280:	80a0703a 	and	r16,r16,r2
 800a284:	a02b883a 	mov	r21,r20
 800a288:	003f0806 	br	8009eac <__alt_data_end+0xfc009eac>
 800a28c:	008000c4 	movi	r2,3
 800a290:	3880b126 	beq	r7,r2,800a558 <__divdf3+0x9b4>
 800a294:	00800044 	movi	r2,1
 800a298:	38805b1e 	bne	r7,r2,800a408 <__divdf3+0x864>
 800a29c:	e009883a 	mov	r4,fp
 800a2a0:	0005883a 	mov	r2,zero
 800a2a4:	0021883a 	mov	r16,zero
 800a2a8:	002b883a 	mov	r21,zero
 800a2ac:	003e9c06 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a2b0:	00800434 	movhi	r2,16
 800a2b4:	84000234 	orhi	r16,r16,8
 800a2b8:	10bfffc4 	addi	r2,r2,-1
 800a2bc:	b009883a 	mov	r4,r22
 800a2c0:	80a0703a 	and	r16,r16,r2
 800a2c4:	003ef906 	br	8009eac <__alt_data_end+0xfc009eac>
 800a2c8:	103fca26 	beq	r2,zero,800a1f4 <__alt_data_end+0xfc00a1f4>
 800a2cc:	b421883a 	add	r16,r22,r16
 800a2d0:	a17fffc4 	addi	r5,r20,-1
 800a2d4:	8580422e 	bgeu	r16,r22,800a3e0 <__divdf3+0x83c>
 800a2d8:	2829883a 	mov	r20,r5
 800a2dc:	813fc41e 	bne	r16,r4,800a1f0 <__alt_data_end+0xfc00a1f0>
 800a2e0:	d9800017 	ldw	r6,0(sp)
 800a2e4:	30bfc21e 	bne	r6,r2,800a1f0 <__alt_data_end+0xfc00a1f0>
 800a2e8:	003fc206 	br	800a1f4 <__alt_data_end+0xfc00a1f4>
 800a2ec:	143ff604 	addi	r16,r2,-40
 800a2f0:	8c20983a 	sll	r16,r17,r16
 800a2f4:	002b883a 	mov	r21,zero
 800a2f8:	003eb406 	br	8009dcc <__alt_data_end+0xfc009dcc>
 800a2fc:	d9800215 	stw	r6,8(sp)
 800a300:	d9c00515 	stw	r7,20(sp)
 800a304:	da000415 	stw	r8,16(sp)
 800a308:	800bb380 	call	800bb38 <__clzsi2>
 800a30c:	10800804 	addi	r2,r2,32
 800a310:	da000417 	ldw	r8,16(sp)
 800a314:	d9c00517 	ldw	r7,20(sp)
 800a318:	d9800217 	ldw	r6,8(sp)
 800a31c:	003ea106 	br	8009da4 <__alt_data_end+0xfc009da4>
 800a320:	147ff604 	addi	r17,r2,-40
 800a324:	3462983a 	sll	r17,r6,r17
 800a328:	0029883a 	mov	r20,zero
 800a32c:	003ec906 	br	8009e54 <__alt_data_end+0xfc009e54>
 800a330:	3009883a 	mov	r4,r6
 800a334:	d9400115 	stw	r5,4(sp)
 800a338:	d9800215 	stw	r6,8(sp)
 800a33c:	da000415 	stw	r8,16(sp)
 800a340:	da400315 	stw	r9,12(sp)
 800a344:	800bb380 	call	800bb38 <__clzsi2>
 800a348:	10800804 	addi	r2,r2,32
 800a34c:	da400317 	ldw	r9,12(sp)
 800a350:	da000417 	ldw	r8,16(sp)
 800a354:	d9800217 	ldw	r6,8(sp)
 800a358:	d9400117 	ldw	r5,4(sp)
 800a35c:	003eb306 	br	8009e2c <__alt_data_end+0xfc009e2c>
 800a360:	d9800017 	ldw	r6,0(sp)
 800a364:	a9ab883a 	add	r21,r21,r6
 800a368:	a98b803a 	cmpltu	r5,r21,r6
 800a36c:	2d8b883a 	add	r5,r5,r22
 800a370:	2a11883a 	add	r8,r5,r8
 800a374:	897fffc4 	addi	r5,r17,-1
 800a378:	b2000c2e 	bgeu	r22,r8,800a3ac <__divdf3+0x808>
 800a37c:	41003f36 	bltu	r8,r4,800a47c <__divdf3+0x8d8>
 800a380:	22006c26 	beq	r4,r8,800a534 <__divdf3+0x990>
 800a384:	4109c83a 	sub	r4,r8,r4
 800a388:	2823883a 	mov	r17,r5
 800a38c:	003f3b06 	br	800a07c <__alt_data_end+0xfc00a07c>
 800a390:	ad3ed336 	bltu	r21,r20,8009ee0 <__alt_data_end+0xfc009ee0>
 800a394:	a804d07a 	srli	r2,r21,1
 800a398:	802e97fa 	slli	r23,r16,31
 800a39c:	a82a97fa 	slli	r21,r21,31
 800a3a0:	8020d07a 	srli	r16,r16,1
 800a3a4:	b8aeb03a 	or	r23,r23,r2
 800a3a8:	003ed006 	br	8009eec <__alt_data_end+0xfc009eec>
 800a3ac:	b23ff51e 	bne	r22,r8,800a384 <__alt_data_end+0xfc00a384>
 800a3b0:	d9800017 	ldw	r6,0(sp)
 800a3b4:	a9bff12e 	bgeu	r21,r6,800a37c <__alt_data_end+0xfc00a37c>
 800a3b8:	b109c83a 	sub	r4,r22,r4
 800a3bc:	2823883a 	mov	r17,r5
 800a3c0:	003f2e06 	br	800a07c <__alt_data_end+0xfc00a07c>
 800a3c4:	2021883a 	mov	r16,r4
 800a3c8:	003eff06 	br	8009fc8 <__alt_data_end+0xfc009fc8>
 800a3cc:	2023883a 	mov	r17,r4
 800a3d0:	003ee406 	br	8009f64 <__alt_data_end+0xfc009f64>
 800a3d4:	a8bfe236 	bltu	r21,r2,800a360 <__alt_data_end+0xfc00a360>
 800a3d8:	0009883a 	mov	r4,zero
 800a3dc:	003f2706 	br	800a07c <__alt_data_end+0xfc00a07c>
 800a3e0:	81002d36 	bltu	r16,r4,800a498 <__divdf3+0x8f4>
 800a3e4:	24005626 	beq	r4,r16,800a540 <__divdf3+0x99c>
 800a3e8:	2829883a 	mov	r20,r5
 800a3ec:	003f8006 	br	800a1f0 <__alt_data_end+0xfc00a1f0>
 800a3f0:	053fffc4 	movi	r20,-1
 800a3f4:	003f7f06 	br	800a1f4 <__alt_data_end+0xfc00a1f4>
 800a3f8:	200f883a 	mov	r7,r4
 800a3fc:	003f3c06 	br	800a0f0 <__alt_data_end+0xfc00a0f0>
 800a400:	1011883a 	mov	r8,r2
 800a404:	003f5506 	br	800a15c <__alt_data_end+0xfc00a15c>
 800a408:	e027883a 	mov	r19,fp
 800a40c:	003f7906 	br	800a1f4 <__alt_data_end+0xfc00a1f4>
 800a410:	010007c4 	movi	r4,31
 800a414:	20c02816 	blt	r4,r3,800a4b8 <__divdf3+0x914>
 800a418:	00800804 	movi	r2,32
 800a41c:	10c5c83a 	sub	r2,r2,r3
 800a420:	888a983a 	sll	r5,r17,r2
 800a424:	a0c8d83a 	srl	r4,r20,r3
 800a428:	a084983a 	sll	r2,r20,r2
 800a42c:	88e2d83a 	srl	r17,r17,r3
 800a430:	2906b03a 	or	r3,r5,r4
 800a434:	1004c03a 	cmpne	r2,r2,zero
 800a438:	1886b03a 	or	r3,r3,r2
 800a43c:	188001cc 	andi	r2,r3,7
 800a440:	10000726 	beq	r2,zero,800a460 <__divdf3+0x8bc>
 800a444:	188003cc 	andi	r2,r3,15
 800a448:	01000104 	movi	r4,4
 800a44c:	11000426 	beq	r2,r4,800a460 <__divdf3+0x8bc>
 800a450:	1805883a 	mov	r2,r3
 800a454:	10c00104 	addi	r3,r2,4
 800a458:	1885803a 	cmpltu	r2,r3,r2
 800a45c:	88a3883a 	add	r17,r17,r2
 800a460:	8880202c 	andhi	r2,r17,128
 800a464:	10002926 	beq	r2,zero,800a50c <__divdf3+0x968>
 800a468:	9900004c 	andi	r4,r19,1
 800a46c:	00800044 	movi	r2,1
 800a470:	0021883a 	mov	r16,zero
 800a474:	002b883a 	mov	r21,zero
 800a478:	003e2906 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a47c:	d9800017 	ldw	r6,0(sp)
 800a480:	8c7fff84 	addi	r17,r17,-2
 800a484:	a9ab883a 	add	r21,r21,r6
 800a488:	a98b803a 	cmpltu	r5,r21,r6
 800a48c:	2d8b883a 	add	r5,r5,r22
 800a490:	2a11883a 	add	r8,r5,r8
 800a494:	003ef806 	br	800a078 <__alt_data_end+0xfc00a078>
 800a498:	d9800017 	ldw	r6,0(sp)
 800a49c:	318f883a 	add	r7,r6,r6
 800a4a0:	398b803a 	cmpltu	r5,r7,r6
 800a4a4:	2d8d883a 	add	r6,r5,r22
 800a4a8:	81a1883a 	add	r16,r16,r6
 800a4ac:	a17fff84 	addi	r5,r20,-2
 800a4b0:	d9c00015 	stw	r7,0(sp)
 800a4b4:	003f8806 	br	800a2d8 <__alt_data_end+0xfc00a2d8>
 800a4b8:	013ff844 	movi	r4,-31
 800a4bc:	2085c83a 	sub	r2,r4,r2
 800a4c0:	8888d83a 	srl	r4,r17,r2
 800a4c4:	00800804 	movi	r2,32
 800a4c8:	18802126 	beq	r3,r2,800a550 <__divdf3+0x9ac>
 800a4cc:	04001004 	movi	r16,64
 800a4d0:	80c7c83a 	sub	r3,r16,r3
 800a4d4:	88e0983a 	sll	r16,r17,r3
 800a4d8:	8504b03a 	or	r2,r16,r20
 800a4dc:	1004c03a 	cmpne	r2,r2,zero
 800a4e0:	2084b03a 	or	r2,r4,r2
 800a4e4:	144001cc 	andi	r17,r2,7
 800a4e8:	88000d1e 	bne	r17,zero,800a520 <__divdf3+0x97c>
 800a4ec:	0021883a 	mov	r16,zero
 800a4f0:	102ad0fa 	srli	r21,r2,3
 800a4f4:	9900004c 	andi	r4,r19,1
 800a4f8:	0005883a 	mov	r2,zero
 800a4fc:	ac6ab03a 	or	r21,r21,r17
 800a500:	003e0706 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a504:	1007883a 	mov	r3,r2
 800a508:	0023883a 	mov	r17,zero
 800a50c:	8820927a 	slli	r16,r17,9
 800a510:	1805883a 	mov	r2,r3
 800a514:	8822977a 	slli	r17,r17,29
 800a518:	8020d33a 	srli	r16,r16,12
 800a51c:	003ff406 	br	800a4f0 <__alt_data_end+0xfc00a4f0>
 800a520:	10c003cc 	andi	r3,r2,15
 800a524:	01000104 	movi	r4,4
 800a528:	193ff626 	beq	r3,r4,800a504 <__alt_data_end+0xfc00a504>
 800a52c:	0023883a 	mov	r17,zero
 800a530:	003fc806 	br	800a454 <__alt_data_end+0xfc00a454>
 800a534:	a8bfd136 	bltu	r21,r2,800a47c <__alt_data_end+0xfc00a47c>
 800a538:	2823883a 	mov	r17,r5
 800a53c:	003fa606 	br	800a3d8 <__alt_data_end+0xfc00a3d8>
 800a540:	d9800017 	ldw	r6,0(sp)
 800a544:	30bfd436 	bltu	r6,r2,800a498 <__alt_data_end+0xfc00a498>
 800a548:	2829883a 	mov	r20,r5
 800a54c:	003f6406 	br	800a2e0 <__alt_data_end+0xfc00a2e0>
 800a550:	0021883a 	mov	r16,zero
 800a554:	003fe006 	br	800a4d8 <__alt_data_end+0xfc00a4d8>
 800a558:	00800434 	movhi	r2,16
 800a55c:	8c000234 	orhi	r16,r17,8
 800a560:	10bfffc4 	addi	r2,r2,-1
 800a564:	e009883a 	mov	r4,fp
 800a568:	80a0703a 	and	r16,r16,r2
 800a56c:	a02b883a 	mov	r21,r20
 800a570:	003e4e06 	br	8009eac <__alt_data_end+0xfc009eac>

0800a574 <__eqdf2>:
 800a574:	2804d53a 	srli	r2,r5,20
 800a578:	3806d53a 	srli	r3,r7,20
 800a57c:	02000434 	movhi	r8,16
 800a580:	423fffc4 	addi	r8,r8,-1
 800a584:	1081ffcc 	andi	r2,r2,2047
 800a588:	0281ffc4 	movi	r10,2047
 800a58c:	2a12703a 	and	r9,r5,r8
 800a590:	18c1ffcc 	andi	r3,r3,2047
 800a594:	3a10703a 	and	r8,r7,r8
 800a598:	280ad7fa 	srli	r5,r5,31
 800a59c:	380ed7fa 	srli	r7,r7,31
 800a5a0:	12801026 	beq	r2,r10,800a5e4 <__eqdf2+0x70>
 800a5a4:	0281ffc4 	movi	r10,2047
 800a5a8:	1a800a26 	beq	r3,r10,800a5d4 <__eqdf2+0x60>
 800a5ac:	10c00226 	beq	r2,r3,800a5b8 <__eqdf2+0x44>
 800a5b0:	00800044 	movi	r2,1
 800a5b4:	f800283a 	ret
 800a5b8:	4a3ffd1e 	bne	r9,r8,800a5b0 <__alt_data_end+0xfc00a5b0>
 800a5bc:	21bffc1e 	bne	r4,r6,800a5b0 <__alt_data_end+0xfc00a5b0>
 800a5c0:	29c00c26 	beq	r5,r7,800a5f4 <__eqdf2+0x80>
 800a5c4:	103ffa1e 	bne	r2,zero,800a5b0 <__alt_data_end+0xfc00a5b0>
 800a5c8:	2244b03a 	or	r2,r4,r9
 800a5cc:	1004c03a 	cmpne	r2,r2,zero
 800a5d0:	f800283a 	ret
 800a5d4:	3214b03a 	or	r10,r6,r8
 800a5d8:	503ff426 	beq	r10,zero,800a5ac <__alt_data_end+0xfc00a5ac>
 800a5dc:	00800044 	movi	r2,1
 800a5e0:	f800283a 	ret
 800a5e4:	2254b03a 	or	r10,r4,r9
 800a5e8:	503fee26 	beq	r10,zero,800a5a4 <__alt_data_end+0xfc00a5a4>
 800a5ec:	00800044 	movi	r2,1
 800a5f0:	f800283a 	ret
 800a5f4:	0005883a 	mov	r2,zero
 800a5f8:	f800283a 	ret

0800a5fc <__gedf2>:
 800a5fc:	2804d53a 	srli	r2,r5,20
 800a600:	3806d53a 	srli	r3,r7,20
 800a604:	02000434 	movhi	r8,16
 800a608:	423fffc4 	addi	r8,r8,-1
 800a60c:	1081ffcc 	andi	r2,r2,2047
 800a610:	0241ffc4 	movi	r9,2047
 800a614:	2a14703a 	and	r10,r5,r8
 800a618:	18c1ffcc 	andi	r3,r3,2047
 800a61c:	3a10703a 	and	r8,r7,r8
 800a620:	280ad7fa 	srli	r5,r5,31
 800a624:	380ed7fa 	srli	r7,r7,31
 800a628:	12401d26 	beq	r2,r9,800a6a0 <__gedf2+0xa4>
 800a62c:	0241ffc4 	movi	r9,2047
 800a630:	1a401226 	beq	r3,r9,800a67c <__gedf2+0x80>
 800a634:	1000081e 	bne	r2,zero,800a658 <__gedf2+0x5c>
 800a638:	2296b03a 	or	r11,r4,r10
 800a63c:	5813003a 	cmpeq	r9,r11,zero
 800a640:	1800091e 	bne	r3,zero,800a668 <__gedf2+0x6c>
 800a644:	3218b03a 	or	r12,r6,r8
 800a648:	6000071e 	bne	r12,zero,800a668 <__gedf2+0x6c>
 800a64c:	0005883a 	mov	r2,zero
 800a650:	5800101e 	bne	r11,zero,800a694 <__gedf2+0x98>
 800a654:	f800283a 	ret
 800a658:	18000c1e 	bne	r3,zero,800a68c <__gedf2+0x90>
 800a65c:	3212b03a 	or	r9,r6,r8
 800a660:	48000c26 	beq	r9,zero,800a694 <__gedf2+0x98>
 800a664:	0013883a 	mov	r9,zero
 800a668:	39c03fcc 	andi	r7,r7,255
 800a66c:	48000826 	beq	r9,zero,800a690 <__gedf2+0x94>
 800a670:	38000926 	beq	r7,zero,800a698 <__gedf2+0x9c>
 800a674:	00800044 	movi	r2,1
 800a678:	f800283a 	ret
 800a67c:	3212b03a 	or	r9,r6,r8
 800a680:	483fec26 	beq	r9,zero,800a634 <__alt_data_end+0xfc00a634>
 800a684:	00bfff84 	movi	r2,-2
 800a688:	f800283a 	ret
 800a68c:	39c03fcc 	andi	r7,r7,255
 800a690:	29c00626 	beq	r5,r7,800a6ac <__gedf2+0xb0>
 800a694:	283ff726 	beq	r5,zero,800a674 <__alt_data_end+0xfc00a674>
 800a698:	00bfffc4 	movi	r2,-1
 800a69c:	f800283a 	ret
 800a6a0:	2292b03a 	or	r9,r4,r10
 800a6a4:	483fe126 	beq	r9,zero,800a62c <__alt_data_end+0xfc00a62c>
 800a6a8:	003ff606 	br	800a684 <__alt_data_end+0xfc00a684>
 800a6ac:	18bff916 	blt	r3,r2,800a694 <__alt_data_end+0xfc00a694>
 800a6b0:	10c00316 	blt	r2,r3,800a6c0 <__gedf2+0xc4>
 800a6b4:	42bff736 	bltu	r8,r10,800a694 <__alt_data_end+0xfc00a694>
 800a6b8:	52000326 	beq	r10,r8,800a6c8 <__gedf2+0xcc>
 800a6bc:	5200042e 	bgeu	r10,r8,800a6d0 <__gedf2+0xd4>
 800a6c0:	283fec1e 	bne	r5,zero,800a674 <__alt_data_end+0xfc00a674>
 800a6c4:	003ff406 	br	800a698 <__alt_data_end+0xfc00a698>
 800a6c8:	313ff236 	bltu	r6,r4,800a694 <__alt_data_end+0xfc00a694>
 800a6cc:	21bffc36 	bltu	r4,r6,800a6c0 <__alt_data_end+0xfc00a6c0>
 800a6d0:	0005883a 	mov	r2,zero
 800a6d4:	f800283a 	ret

0800a6d8 <__ledf2>:
 800a6d8:	2804d53a 	srli	r2,r5,20
 800a6dc:	3810d53a 	srli	r8,r7,20
 800a6e0:	00c00434 	movhi	r3,16
 800a6e4:	18ffffc4 	addi	r3,r3,-1
 800a6e8:	1081ffcc 	andi	r2,r2,2047
 800a6ec:	0241ffc4 	movi	r9,2047
 800a6f0:	28d4703a 	and	r10,r5,r3
 800a6f4:	4201ffcc 	andi	r8,r8,2047
 800a6f8:	38c6703a 	and	r3,r7,r3
 800a6fc:	280ad7fa 	srli	r5,r5,31
 800a700:	380ed7fa 	srli	r7,r7,31
 800a704:	12401f26 	beq	r2,r9,800a784 <__ledf2+0xac>
 800a708:	0241ffc4 	movi	r9,2047
 800a70c:	42401426 	beq	r8,r9,800a760 <__ledf2+0x88>
 800a710:	1000091e 	bne	r2,zero,800a738 <__ledf2+0x60>
 800a714:	2296b03a 	or	r11,r4,r10
 800a718:	5813003a 	cmpeq	r9,r11,zero
 800a71c:	29403fcc 	andi	r5,r5,255
 800a720:	40000a1e 	bne	r8,zero,800a74c <__ledf2+0x74>
 800a724:	30d8b03a 	or	r12,r6,r3
 800a728:	6000081e 	bne	r12,zero,800a74c <__ledf2+0x74>
 800a72c:	0005883a 	mov	r2,zero
 800a730:	5800111e 	bne	r11,zero,800a778 <__ledf2+0xa0>
 800a734:	f800283a 	ret
 800a738:	29403fcc 	andi	r5,r5,255
 800a73c:	40000c1e 	bne	r8,zero,800a770 <__ledf2+0x98>
 800a740:	30d2b03a 	or	r9,r6,r3
 800a744:	48000c26 	beq	r9,zero,800a778 <__ledf2+0xa0>
 800a748:	0013883a 	mov	r9,zero
 800a74c:	39c03fcc 	andi	r7,r7,255
 800a750:	48000826 	beq	r9,zero,800a774 <__ledf2+0x9c>
 800a754:	38001126 	beq	r7,zero,800a79c <__ledf2+0xc4>
 800a758:	00800044 	movi	r2,1
 800a75c:	f800283a 	ret
 800a760:	30d2b03a 	or	r9,r6,r3
 800a764:	483fea26 	beq	r9,zero,800a710 <__alt_data_end+0xfc00a710>
 800a768:	00800084 	movi	r2,2
 800a76c:	f800283a 	ret
 800a770:	39c03fcc 	andi	r7,r7,255
 800a774:	39400726 	beq	r7,r5,800a794 <__ledf2+0xbc>
 800a778:	2800081e 	bne	r5,zero,800a79c <__ledf2+0xc4>
 800a77c:	00800044 	movi	r2,1
 800a780:	f800283a 	ret
 800a784:	2292b03a 	or	r9,r4,r10
 800a788:	483fdf26 	beq	r9,zero,800a708 <__alt_data_end+0xfc00a708>
 800a78c:	00800084 	movi	r2,2
 800a790:	f800283a 	ret
 800a794:	4080030e 	bge	r8,r2,800a7a4 <__ledf2+0xcc>
 800a798:	383fef26 	beq	r7,zero,800a758 <__alt_data_end+0xfc00a758>
 800a79c:	00bfffc4 	movi	r2,-1
 800a7a0:	f800283a 	ret
 800a7a4:	123feb16 	blt	r2,r8,800a754 <__alt_data_end+0xfc00a754>
 800a7a8:	1abff336 	bltu	r3,r10,800a778 <__alt_data_end+0xfc00a778>
 800a7ac:	50c00326 	beq	r10,r3,800a7bc <__ledf2+0xe4>
 800a7b0:	50c0042e 	bgeu	r10,r3,800a7c4 <__ledf2+0xec>
 800a7b4:	283fe81e 	bne	r5,zero,800a758 <__alt_data_end+0xfc00a758>
 800a7b8:	003ff806 	br	800a79c <__alt_data_end+0xfc00a79c>
 800a7bc:	313fee36 	bltu	r6,r4,800a778 <__alt_data_end+0xfc00a778>
 800a7c0:	21bffc36 	bltu	r4,r6,800a7b4 <__alt_data_end+0xfc00a7b4>
 800a7c4:	0005883a 	mov	r2,zero
 800a7c8:	f800283a 	ret

0800a7cc <__muldf3>:
 800a7cc:	deffee04 	addi	sp,sp,-72
 800a7d0:	dd000c15 	stw	r20,48(sp)
 800a7d4:	2828d53a 	srli	r20,r5,20
 800a7d8:	ddc00f15 	stw	r23,60(sp)
 800a7dc:	282ed7fa 	srli	r23,r5,31
 800a7e0:	dc000815 	stw	r16,32(sp)
 800a7e4:	04000434 	movhi	r16,16
 800a7e8:	dcc00b15 	stw	r19,44(sp)
 800a7ec:	843fffc4 	addi	r16,r16,-1
 800a7f0:	dfc01115 	stw	ra,68(sp)
 800a7f4:	df001015 	stw	fp,64(sp)
 800a7f8:	dd800e15 	stw	r22,56(sp)
 800a7fc:	dd400d15 	stw	r21,52(sp)
 800a800:	dc800a15 	stw	r18,40(sp)
 800a804:	dc400915 	stw	r17,36(sp)
 800a808:	a501ffcc 	andi	r20,r20,2047
 800a80c:	2c20703a 	and	r16,r5,r16
 800a810:	b827883a 	mov	r19,r23
 800a814:	ba403fcc 	andi	r9,r23,255
 800a818:	a0006026 	beq	r20,zero,800a99c <__muldf3+0x1d0>
 800a81c:	0081ffc4 	movi	r2,2047
 800a820:	202d883a 	mov	r22,r4
 800a824:	a0803626 	beq	r20,r2,800a900 <__muldf3+0x134>
 800a828:	84000434 	orhi	r16,r16,16
 800a82c:	200ad77a 	srli	r5,r4,29
 800a830:	800490fa 	slli	r2,r16,3
 800a834:	202c90fa 	slli	r22,r4,3
 800a838:	a53f0044 	addi	r20,r20,-1023
 800a83c:	28a0b03a 	or	r16,r5,r2
 800a840:	002b883a 	mov	r21,zero
 800a844:	000b883a 	mov	r5,zero
 800a848:	3804d53a 	srli	r2,r7,20
 800a84c:	3838d7fa 	srli	fp,r7,31
 800a850:	04400434 	movhi	r17,16
 800a854:	8c7fffc4 	addi	r17,r17,-1
 800a858:	1081ffcc 	andi	r2,r2,2047
 800a85c:	3025883a 	mov	r18,r6
 800a860:	3c62703a 	and	r17,r7,r17
 800a864:	e2803fcc 	andi	r10,fp,255
 800a868:	10006d26 	beq	r2,zero,800aa20 <__muldf3+0x254>
 800a86c:	00c1ffc4 	movi	r3,2047
 800a870:	10c06526 	beq	r2,r3,800aa08 <__muldf3+0x23c>
 800a874:	8c400434 	orhi	r17,r17,16
 800a878:	300ed77a 	srli	r7,r6,29
 800a87c:	880690fa 	slli	r3,r17,3
 800a880:	302490fa 	slli	r18,r6,3
 800a884:	10bf0044 	addi	r2,r2,-1023
 800a888:	38e2b03a 	or	r17,r7,r3
 800a88c:	000f883a 	mov	r7,zero
 800a890:	a087883a 	add	r3,r20,r2
 800a894:	010003c4 	movi	r4,15
 800a898:	3d44b03a 	or	r2,r7,r21
 800a89c:	e5ccf03a 	xor	r6,fp,r23
 800a8a0:	1a000044 	addi	r8,r3,1
 800a8a4:	20809b36 	bltu	r4,r2,800ab14 <__muldf3+0x348>
 800a8a8:	100490ba 	slli	r2,r2,2
 800a8ac:	01020074 	movhi	r4,2049
 800a8b0:	212a3004 	addi	r4,r4,-22336
 800a8b4:	1105883a 	add	r2,r2,r4
 800a8b8:	10800017 	ldw	r2,0(r2)
 800a8bc:	1000683a 	jmp	r2
 800a8c0:	0800ab14 	ori	zero,at,684
 800a8c4:	0800a920 	cmpeqi	zero,at,676
 800a8c8:	0800a920 	cmpeqi	zero,at,676
 800a8cc:	0800a91c 	xori	zero,at,676
 800a8d0:	0800aaf0 	cmpltui	zero,at,683
 800a8d4:	0800aaf0 	cmpltui	zero,at,683
 800a8d8:	0800aad8 	cmpnei	zero,at,683
 800a8dc:	0800a91c 	xori	zero,at,676
 800a8e0:	0800aaf0 	cmpltui	zero,at,683
 800a8e4:	0800aad8 	cmpnei	zero,at,683
 800a8e8:	0800aaf0 	cmpltui	zero,at,683
 800a8ec:	0800a91c 	xori	zero,at,676
 800a8f0:	0800ab00 	call	800ab0 <__alt_mem_onchip_memory2_0+0x800ab0>
 800a8f4:	0800ab00 	call	800ab0 <__alt_mem_onchip_memory2_0+0x800ab0>
 800a8f8:	0800ab00 	call	800ab0 <__alt_mem_onchip_memory2_0+0x800ab0>
 800a8fc:	0800ae60 	cmpeqi	zero,at,697
 800a900:	2404b03a 	or	r2,r4,r16
 800a904:	1000711e 	bne	r2,zero,800aacc <__muldf3+0x300>
 800a908:	05400204 	movi	r21,8
 800a90c:	0021883a 	mov	r16,zero
 800a910:	002d883a 	mov	r22,zero
 800a914:	01400084 	movi	r5,2
 800a918:	003fcb06 	br	800a848 <__alt_data_end+0xfc00a848>
 800a91c:	500d883a 	mov	r6,r10
 800a920:	00800084 	movi	r2,2
 800a924:	38805926 	beq	r7,r2,800aa8c <__muldf3+0x2c0>
 800a928:	008000c4 	movi	r2,3
 800a92c:	3881bb26 	beq	r7,r2,800b01c <__muldf3+0x850>
 800a930:	00800044 	movi	r2,1
 800a934:	3881961e 	bne	r7,r2,800af90 <__muldf3+0x7c4>
 800a938:	3027883a 	mov	r19,r6
 800a93c:	0005883a 	mov	r2,zero
 800a940:	0021883a 	mov	r16,zero
 800a944:	002d883a 	mov	r22,zero
 800a948:	1004953a 	slli	r2,r2,20
 800a94c:	98c03fcc 	andi	r3,r19,255
 800a950:	04400434 	movhi	r17,16
 800a954:	8c7fffc4 	addi	r17,r17,-1
 800a958:	180697fa 	slli	r3,r3,31
 800a95c:	8460703a 	and	r16,r16,r17
 800a960:	80a0b03a 	or	r16,r16,r2
 800a964:	80c6b03a 	or	r3,r16,r3
 800a968:	b005883a 	mov	r2,r22
 800a96c:	dfc01117 	ldw	ra,68(sp)
 800a970:	df001017 	ldw	fp,64(sp)
 800a974:	ddc00f17 	ldw	r23,60(sp)
 800a978:	dd800e17 	ldw	r22,56(sp)
 800a97c:	dd400d17 	ldw	r21,52(sp)
 800a980:	dd000c17 	ldw	r20,48(sp)
 800a984:	dcc00b17 	ldw	r19,44(sp)
 800a988:	dc800a17 	ldw	r18,40(sp)
 800a98c:	dc400917 	ldw	r17,36(sp)
 800a990:	dc000817 	ldw	r16,32(sp)
 800a994:	dec01204 	addi	sp,sp,72
 800a998:	f800283a 	ret
 800a99c:	2404b03a 	or	r2,r4,r16
 800a9a0:	202b883a 	mov	r21,r4
 800a9a4:	10004426 	beq	r2,zero,800aab8 <__muldf3+0x2ec>
 800a9a8:	80015126 	beq	r16,zero,800aef0 <__muldf3+0x724>
 800a9ac:	8009883a 	mov	r4,r16
 800a9b0:	d9800715 	stw	r6,28(sp)
 800a9b4:	d9c00215 	stw	r7,8(sp)
 800a9b8:	da400415 	stw	r9,16(sp)
 800a9bc:	800bb380 	call	800bb38 <__clzsi2>
 800a9c0:	d9800717 	ldw	r6,28(sp)
 800a9c4:	d9c00217 	ldw	r7,8(sp)
 800a9c8:	da400417 	ldw	r9,16(sp)
 800a9cc:	113ffd44 	addi	r4,r2,-11
 800a9d0:	00c00704 	movi	r3,28
 800a9d4:	19014216 	blt	r3,r4,800aee0 <__muldf3+0x714>
 800a9d8:	00c00744 	movi	r3,29
 800a9dc:	15bffe04 	addi	r22,r2,-8
 800a9e0:	1907c83a 	sub	r3,r3,r4
 800a9e4:	85a0983a 	sll	r16,r16,r22
 800a9e8:	a8c6d83a 	srl	r3,r21,r3
 800a9ec:	adac983a 	sll	r22,r21,r22
 800a9f0:	1c20b03a 	or	r16,r3,r16
 800a9f4:	1080fcc4 	addi	r2,r2,1011
 800a9f8:	00a9c83a 	sub	r20,zero,r2
 800a9fc:	002b883a 	mov	r21,zero
 800aa00:	000b883a 	mov	r5,zero
 800aa04:	003f9006 	br	800a848 <__alt_data_end+0xfc00a848>
 800aa08:	3446b03a 	or	r3,r6,r17
 800aa0c:	1800281e 	bne	r3,zero,800aab0 <__muldf3+0x2e4>
 800aa10:	0023883a 	mov	r17,zero
 800aa14:	0025883a 	mov	r18,zero
 800aa18:	01c00084 	movi	r7,2
 800aa1c:	003f9c06 	br	800a890 <__alt_data_end+0xfc00a890>
 800aa20:	3446b03a 	or	r3,r6,r17
 800aa24:	18001e26 	beq	r3,zero,800aaa0 <__muldf3+0x2d4>
 800aa28:	88012126 	beq	r17,zero,800aeb0 <__muldf3+0x6e4>
 800aa2c:	8809883a 	mov	r4,r17
 800aa30:	d9400215 	stw	r5,8(sp)
 800aa34:	d9800715 	stw	r6,28(sp)
 800aa38:	da400415 	stw	r9,16(sp)
 800aa3c:	da800315 	stw	r10,12(sp)
 800aa40:	800bb380 	call	800bb38 <__clzsi2>
 800aa44:	d9400217 	ldw	r5,8(sp)
 800aa48:	d9800717 	ldw	r6,28(sp)
 800aa4c:	da400417 	ldw	r9,16(sp)
 800aa50:	da800317 	ldw	r10,12(sp)
 800aa54:	113ffd44 	addi	r4,r2,-11
 800aa58:	00c00704 	movi	r3,28
 800aa5c:	19011016 	blt	r3,r4,800aea0 <__muldf3+0x6d4>
 800aa60:	00c00744 	movi	r3,29
 800aa64:	14bffe04 	addi	r18,r2,-8
 800aa68:	1907c83a 	sub	r3,r3,r4
 800aa6c:	8ca2983a 	sll	r17,r17,r18
 800aa70:	30c6d83a 	srl	r3,r6,r3
 800aa74:	34a4983a 	sll	r18,r6,r18
 800aa78:	1c62b03a 	or	r17,r3,r17
 800aa7c:	1080fcc4 	addi	r2,r2,1011
 800aa80:	0085c83a 	sub	r2,zero,r2
 800aa84:	000f883a 	mov	r7,zero
 800aa88:	003f8106 	br	800a890 <__alt_data_end+0xfc00a890>
 800aa8c:	3027883a 	mov	r19,r6
 800aa90:	0081ffc4 	movi	r2,2047
 800aa94:	0021883a 	mov	r16,zero
 800aa98:	002d883a 	mov	r22,zero
 800aa9c:	003faa06 	br	800a948 <__alt_data_end+0xfc00a948>
 800aaa0:	0023883a 	mov	r17,zero
 800aaa4:	0025883a 	mov	r18,zero
 800aaa8:	01c00044 	movi	r7,1
 800aaac:	003f7806 	br	800a890 <__alt_data_end+0xfc00a890>
 800aab0:	01c000c4 	movi	r7,3
 800aab4:	003f7606 	br	800a890 <__alt_data_end+0xfc00a890>
 800aab8:	05400104 	movi	r21,4
 800aabc:	0021883a 	mov	r16,zero
 800aac0:	002d883a 	mov	r22,zero
 800aac4:	01400044 	movi	r5,1
 800aac8:	003f5f06 	br	800a848 <__alt_data_end+0xfc00a848>
 800aacc:	05400304 	movi	r21,12
 800aad0:	014000c4 	movi	r5,3
 800aad4:	003f5c06 	br	800a848 <__alt_data_end+0xfc00a848>
 800aad8:	04000434 	movhi	r16,16
 800aadc:	0027883a 	mov	r19,zero
 800aae0:	843fffc4 	addi	r16,r16,-1
 800aae4:	05bfffc4 	movi	r22,-1
 800aae8:	0081ffc4 	movi	r2,2047
 800aaec:	003f9606 	br	800a948 <__alt_data_end+0xfc00a948>
 800aaf0:	8023883a 	mov	r17,r16
 800aaf4:	b025883a 	mov	r18,r22
 800aaf8:	280f883a 	mov	r7,r5
 800aafc:	003f8806 	br	800a920 <__alt_data_end+0xfc00a920>
 800ab00:	8023883a 	mov	r17,r16
 800ab04:	b025883a 	mov	r18,r22
 800ab08:	480d883a 	mov	r6,r9
 800ab0c:	280f883a 	mov	r7,r5
 800ab10:	003f8306 	br	800a920 <__alt_data_end+0xfc00a920>
 800ab14:	b026d43a 	srli	r19,r22,16
 800ab18:	902ed43a 	srli	r23,r18,16
 800ab1c:	b5bfffcc 	andi	r22,r22,65535
 800ab20:	94bfffcc 	andi	r18,r18,65535
 800ab24:	b00b883a 	mov	r5,r22
 800ab28:	9009883a 	mov	r4,r18
 800ab2c:	d8c00515 	stw	r3,20(sp)
 800ab30:	d9800715 	stw	r6,28(sp)
 800ab34:	da000615 	stw	r8,24(sp)
 800ab38:	80008e80 	call	80008e8 <__mulsi3>
 800ab3c:	980b883a 	mov	r5,r19
 800ab40:	9009883a 	mov	r4,r18
 800ab44:	1029883a 	mov	r20,r2
 800ab48:	80008e80 	call	80008e8 <__mulsi3>
 800ab4c:	b80b883a 	mov	r5,r23
 800ab50:	9809883a 	mov	r4,r19
 800ab54:	102b883a 	mov	r21,r2
 800ab58:	80008e80 	call	80008e8 <__mulsi3>
 800ab5c:	b809883a 	mov	r4,r23
 800ab60:	b00b883a 	mov	r5,r22
 800ab64:	1039883a 	mov	fp,r2
 800ab68:	80008e80 	call	80008e8 <__mulsi3>
 800ab6c:	a008d43a 	srli	r4,r20,16
 800ab70:	1545883a 	add	r2,r2,r21
 800ab74:	d8c00517 	ldw	r3,20(sp)
 800ab78:	2085883a 	add	r2,r4,r2
 800ab7c:	d9800717 	ldw	r6,28(sp)
 800ab80:	da000617 	ldw	r8,24(sp)
 800ab84:	1540022e 	bgeu	r2,r21,800ab90 <__muldf3+0x3c4>
 800ab88:	01000074 	movhi	r4,1
 800ab8c:	e139883a 	add	fp,fp,r4
 800ab90:	100e943a 	slli	r7,r2,16
 800ab94:	1004d43a 	srli	r2,r2,16
 800ab98:	882ad43a 	srli	r21,r17,16
 800ab9c:	a53fffcc 	andi	r20,r20,65535
 800aba0:	8c7fffcc 	andi	r17,r17,65535
 800aba4:	3d29883a 	add	r20,r7,r20
 800aba8:	b00b883a 	mov	r5,r22
 800abac:	8809883a 	mov	r4,r17
 800abb0:	d8c00515 	stw	r3,20(sp)
 800abb4:	d9800715 	stw	r6,28(sp)
 800abb8:	da000615 	stw	r8,24(sp)
 800abbc:	dd000115 	stw	r20,4(sp)
 800abc0:	d8800015 	stw	r2,0(sp)
 800abc4:	80008e80 	call	80008e8 <__mulsi3>
 800abc8:	980b883a 	mov	r5,r19
 800abcc:	8809883a 	mov	r4,r17
 800abd0:	d8800215 	stw	r2,8(sp)
 800abd4:	80008e80 	call	80008e8 <__mulsi3>
 800abd8:	9809883a 	mov	r4,r19
 800abdc:	a80b883a 	mov	r5,r21
 800abe0:	1029883a 	mov	r20,r2
 800abe4:	80008e80 	call	80008e8 <__mulsi3>
 800abe8:	b00b883a 	mov	r5,r22
 800abec:	a809883a 	mov	r4,r21
 800abf0:	d8800415 	stw	r2,16(sp)
 800abf4:	80008e80 	call	80008e8 <__mulsi3>
 800abf8:	d9c00217 	ldw	r7,8(sp)
 800abfc:	1505883a 	add	r2,r2,r20
 800ac00:	d8c00517 	ldw	r3,20(sp)
 800ac04:	3826d43a 	srli	r19,r7,16
 800ac08:	d9800717 	ldw	r6,28(sp)
 800ac0c:	da000617 	ldw	r8,24(sp)
 800ac10:	9885883a 	add	r2,r19,r2
 800ac14:	da400417 	ldw	r9,16(sp)
 800ac18:	1500022e 	bgeu	r2,r20,800ac24 <__muldf3+0x458>
 800ac1c:	01000074 	movhi	r4,1
 800ac20:	4913883a 	add	r9,r9,r4
 800ac24:	1028d43a 	srli	r20,r2,16
 800ac28:	1004943a 	slli	r2,r2,16
 800ac2c:	802cd43a 	srli	r22,r16,16
 800ac30:	843fffcc 	andi	r16,r16,65535
 800ac34:	3cffffcc 	andi	r19,r7,65535
 800ac38:	9009883a 	mov	r4,r18
 800ac3c:	800b883a 	mov	r5,r16
 800ac40:	a269883a 	add	r20,r20,r9
 800ac44:	d8c00515 	stw	r3,20(sp)
 800ac48:	d9800715 	stw	r6,28(sp)
 800ac4c:	da000615 	stw	r8,24(sp)
 800ac50:	14e7883a 	add	r19,r2,r19
 800ac54:	80008e80 	call	80008e8 <__mulsi3>
 800ac58:	9009883a 	mov	r4,r18
 800ac5c:	b00b883a 	mov	r5,r22
 800ac60:	d8800315 	stw	r2,12(sp)
 800ac64:	80008e80 	call	80008e8 <__mulsi3>
 800ac68:	b809883a 	mov	r4,r23
 800ac6c:	b00b883a 	mov	r5,r22
 800ac70:	d8800215 	stw	r2,8(sp)
 800ac74:	80008e80 	call	80008e8 <__mulsi3>
 800ac78:	b80b883a 	mov	r5,r23
 800ac7c:	8009883a 	mov	r4,r16
 800ac80:	d8800415 	stw	r2,16(sp)
 800ac84:	80008e80 	call	80008e8 <__mulsi3>
 800ac88:	da800317 	ldw	r10,12(sp)
 800ac8c:	d9c00217 	ldw	r7,8(sp)
 800ac90:	d9000017 	ldw	r4,0(sp)
 800ac94:	502ed43a 	srli	r23,r10,16
 800ac98:	11c5883a 	add	r2,r2,r7
 800ac9c:	24e5883a 	add	r18,r4,r19
 800aca0:	b885883a 	add	r2,r23,r2
 800aca4:	d8c00517 	ldw	r3,20(sp)
 800aca8:	d9800717 	ldw	r6,28(sp)
 800acac:	da000617 	ldw	r8,24(sp)
 800acb0:	da400417 	ldw	r9,16(sp)
 800acb4:	11c0022e 	bgeu	r2,r7,800acc0 <__muldf3+0x4f4>
 800acb8:	01000074 	movhi	r4,1
 800acbc:	4913883a 	add	r9,r9,r4
 800acc0:	100ed43a 	srli	r7,r2,16
 800acc4:	1004943a 	slli	r2,r2,16
 800acc8:	55ffffcc 	andi	r23,r10,65535
 800accc:	3a53883a 	add	r9,r7,r9
 800acd0:	8809883a 	mov	r4,r17
 800acd4:	800b883a 	mov	r5,r16
 800acd8:	d8c00515 	stw	r3,20(sp)
 800acdc:	d9800715 	stw	r6,28(sp)
 800ace0:	da000615 	stw	r8,24(sp)
 800ace4:	da400415 	stw	r9,16(sp)
 800ace8:	15ef883a 	add	r23,r2,r23
 800acec:	80008e80 	call	80008e8 <__mulsi3>
 800acf0:	8809883a 	mov	r4,r17
 800acf4:	b00b883a 	mov	r5,r22
 800acf8:	d8800215 	stw	r2,8(sp)
 800acfc:	80008e80 	call	80008e8 <__mulsi3>
 800ad00:	b00b883a 	mov	r5,r22
 800ad04:	a809883a 	mov	r4,r21
 800ad08:	d8800315 	stw	r2,12(sp)
 800ad0c:	80008e80 	call	80008e8 <__mulsi3>
 800ad10:	8009883a 	mov	r4,r16
 800ad14:	a80b883a 	mov	r5,r21
 800ad18:	1023883a 	mov	r17,r2
 800ad1c:	80008e80 	call	80008e8 <__mulsi3>
 800ad20:	d9c00217 	ldw	r7,8(sp)
 800ad24:	da800317 	ldw	r10,12(sp)
 800ad28:	d8c00517 	ldw	r3,20(sp)
 800ad2c:	3808d43a 	srli	r4,r7,16
 800ad30:	1285883a 	add	r2,r2,r10
 800ad34:	d9800717 	ldw	r6,28(sp)
 800ad38:	2085883a 	add	r2,r4,r2
 800ad3c:	da000617 	ldw	r8,24(sp)
 800ad40:	da400417 	ldw	r9,16(sp)
 800ad44:	1280022e 	bgeu	r2,r10,800ad50 <__muldf3+0x584>
 800ad48:	01000074 	movhi	r4,1
 800ad4c:	8923883a 	add	r17,r17,r4
 800ad50:	1008943a 	slli	r4,r2,16
 800ad54:	39ffffcc 	andi	r7,r7,65535
 800ad58:	e4b9883a 	add	fp,fp,r18
 800ad5c:	21cf883a 	add	r7,r4,r7
 800ad60:	e4e7803a 	cmpltu	r19,fp,r19
 800ad64:	3d0f883a 	add	r7,r7,r20
 800ad68:	bf39883a 	add	fp,r23,fp
 800ad6c:	99c9883a 	add	r4,r19,r7
 800ad70:	e5ef803a 	cmpltu	r23,fp,r23
 800ad74:	490b883a 	add	r5,r9,r4
 800ad78:	1004d43a 	srli	r2,r2,16
 800ad7c:	b965883a 	add	r18,r23,r5
 800ad80:	24c9803a 	cmpltu	r4,r4,r19
 800ad84:	3d29803a 	cmpltu	r20,r7,r20
 800ad88:	a128b03a 	or	r20,r20,r4
 800ad8c:	95ef803a 	cmpltu	r23,r18,r23
 800ad90:	2a53803a 	cmpltu	r9,r5,r9
 800ad94:	a0a9883a 	add	r20,r20,r2
 800ad98:	4deeb03a 	or	r23,r9,r23
 800ad9c:	a5ef883a 	add	r23,r20,r23
 800ada0:	bc63883a 	add	r17,r23,r17
 800ada4:	e004927a 	slli	r2,fp,9
 800ada8:	d9000117 	ldw	r4,4(sp)
 800adac:	882e927a 	slli	r23,r17,9
 800adb0:	9022d5fa 	srli	r17,r18,23
 800adb4:	e038d5fa 	srli	fp,fp,23
 800adb8:	1104b03a 	or	r2,r2,r4
 800adbc:	9024927a 	slli	r18,r18,9
 800adc0:	1004c03a 	cmpne	r2,r2,zero
 800adc4:	bc62b03a 	or	r17,r23,r17
 800adc8:	1738b03a 	or	fp,r2,fp
 800adcc:	8880402c 	andhi	r2,r17,256
 800add0:	e4a4b03a 	or	r18,fp,r18
 800add4:	10000726 	beq	r2,zero,800adf4 <__muldf3+0x628>
 800add8:	9006d07a 	srli	r3,r18,1
 800addc:	880497fa 	slli	r2,r17,31
 800ade0:	9480004c 	andi	r18,r18,1
 800ade4:	8822d07a 	srli	r17,r17,1
 800ade8:	1ca4b03a 	or	r18,r3,r18
 800adec:	14a4b03a 	or	r18,r2,r18
 800adf0:	4007883a 	mov	r3,r8
 800adf4:	1880ffc4 	addi	r2,r3,1023
 800adf8:	0080460e 	bge	zero,r2,800af14 <__muldf3+0x748>
 800adfc:	910001cc 	andi	r4,r18,7
 800ae00:	20000726 	beq	r4,zero,800ae20 <__muldf3+0x654>
 800ae04:	910003cc 	andi	r4,r18,15
 800ae08:	01400104 	movi	r5,4
 800ae0c:	21400426 	beq	r4,r5,800ae20 <__muldf3+0x654>
 800ae10:	9149883a 	add	r4,r18,r5
 800ae14:	24a5803a 	cmpltu	r18,r4,r18
 800ae18:	8ca3883a 	add	r17,r17,r18
 800ae1c:	2025883a 	mov	r18,r4
 800ae20:	8900402c 	andhi	r4,r17,256
 800ae24:	20000426 	beq	r4,zero,800ae38 <__muldf3+0x66c>
 800ae28:	18810004 	addi	r2,r3,1024
 800ae2c:	00ffc034 	movhi	r3,65280
 800ae30:	18ffffc4 	addi	r3,r3,-1
 800ae34:	88e2703a 	and	r17,r17,r3
 800ae38:	00c1ff84 	movi	r3,2046
 800ae3c:	18bf1316 	blt	r3,r2,800aa8c <__alt_data_end+0xfc00aa8c>
 800ae40:	882c977a 	slli	r22,r17,29
 800ae44:	9024d0fa 	srli	r18,r18,3
 800ae48:	8822927a 	slli	r17,r17,9
 800ae4c:	1081ffcc 	andi	r2,r2,2047
 800ae50:	b4acb03a 	or	r22,r22,r18
 800ae54:	8820d33a 	srli	r16,r17,12
 800ae58:	3027883a 	mov	r19,r6
 800ae5c:	003eba06 	br	800a948 <__alt_data_end+0xfc00a948>
 800ae60:	8080022c 	andhi	r2,r16,8
 800ae64:	10000926 	beq	r2,zero,800ae8c <__muldf3+0x6c0>
 800ae68:	8880022c 	andhi	r2,r17,8
 800ae6c:	1000071e 	bne	r2,zero,800ae8c <__muldf3+0x6c0>
 800ae70:	00800434 	movhi	r2,16
 800ae74:	8c000234 	orhi	r16,r17,8
 800ae78:	10bfffc4 	addi	r2,r2,-1
 800ae7c:	e027883a 	mov	r19,fp
 800ae80:	80a0703a 	and	r16,r16,r2
 800ae84:	902d883a 	mov	r22,r18
 800ae88:	003f1706 	br	800aae8 <__alt_data_end+0xfc00aae8>
 800ae8c:	00800434 	movhi	r2,16
 800ae90:	84000234 	orhi	r16,r16,8
 800ae94:	10bfffc4 	addi	r2,r2,-1
 800ae98:	80a0703a 	and	r16,r16,r2
 800ae9c:	003f1206 	br	800aae8 <__alt_data_end+0xfc00aae8>
 800aea0:	147ff604 	addi	r17,r2,-40
 800aea4:	3462983a 	sll	r17,r6,r17
 800aea8:	0025883a 	mov	r18,zero
 800aeac:	003ef306 	br	800aa7c <__alt_data_end+0xfc00aa7c>
 800aeb0:	3009883a 	mov	r4,r6
 800aeb4:	d9400215 	stw	r5,8(sp)
 800aeb8:	d9800715 	stw	r6,28(sp)
 800aebc:	da400415 	stw	r9,16(sp)
 800aec0:	da800315 	stw	r10,12(sp)
 800aec4:	800bb380 	call	800bb38 <__clzsi2>
 800aec8:	10800804 	addi	r2,r2,32
 800aecc:	da800317 	ldw	r10,12(sp)
 800aed0:	da400417 	ldw	r9,16(sp)
 800aed4:	d9800717 	ldw	r6,28(sp)
 800aed8:	d9400217 	ldw	r5,8(sp)
 800aedc:	003edd06 	br	800aa54 <__alt_data_end+0xfc00aa54>
 800aee0:	143ff604 	addi	r16,r2,-40
 800aee4:	ac20983a 	sll	r16,r21,r16
 800aee8:	002d883a 	mov	r22,zero
 800aeec:	003ec106 	br	800a9f4 <__alt_data_end+0xfc00a9f4>
 800aef0:	d9800715 	stw	r6,28(sp)
 800aef4:	d9c00215 	stw	r7,8(sp)
 800aef8:	da400415 	stw	r9,16(sp)
 800aefc:	800bb380 	call	800bb38 <__clzsi2>
 800af00:	10800804 	addi	r2,r2,32
 800af04:	da400417 	ldw	r9,16(sp)
 800af08:	d9c00217 	ldw	r7,8(sp)
 800af0c:	d9800717 	ldw	r6,28(sp)
 800af10:	003eae06 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800af14:	00c00044 	movi	r3,1
 800af18:	1887c83a 	sub	r3,r3,r2
 800af1c:	01000e04 	movi	r4,56
 800af20:	20fe8516 	blt	r4,r3,800a938 <__alt_data_end+0xfc00a938>
 800af24:	010007c4 	movi	r4,31
 800af28:	20c01b16 	blt	r4,r3,800af98 <__muldf3+0x7cc>
 800af2c:	00800804 	movi	r2,32
 800af30:	10c5c83a 	sub	r2,r2,r3
 800af34:	888a983a 	sll	r5,r17,r2
 800af38:	90c8d83a 	srl	r4,r18,r3
 800af3c:	9084983a 	sll	r2,r18,r2
 800af40:	88e2d83a 	srl	r17,r17,r3
 800af44:	2906b03a 	or	r3,r5,r4
 800af48:	1004c03a 	cmpne	r2,r2,zero
 800af4c:	1886b03a 	or	r3,r3,r2
 800af50:	188001cc 	andi	r2,r3,7
 800af54:	10000726 	beq	r2,zero,800af74 <__muldf3+0x7a8>
 800af58:	188003cc 	andi	r2,r3,15
 800af5c:	01000104 	movi	r4,4
 800af60:	11000426 	beq	r2,r4,800af74 <__muldf3+0x7a8>
 800af64:	1805883a 	mov	r2,r3
 800af68:	10c00104 	addi	r3,r2,4
 800af6c:	1885803a 	cmpltu	r2,r3,r2
 800af70:	88a3883a 	add	r17,r17,r2
 800af74:	8880202c 	andhi	r2,r17,128
 800af78:	10001c26 	beq	r2,zero,800afec <__muldf3+0x820>
 800af7c:	3027883a 	mov	r19,r6
 800af80:	00800044 	movi	r2,1
 800af84:	0021883a 	mov	r16,zero
 800af88:	002d883a 	mov	r22,zero
 800af8c:	003e6e06 	br	800a948 <__alt_data_end+0xfc00a948>
 800af90:	4007883a 	mov	r3,r8
 800af94:	003f9706 	br	800adf4 <__alt_data_end+0xfc00adf4>
 800af98:	017ff844 	movi	r5,-31
 800af9c:	2885c83a 	sub	r2,r5,r2
 800afa0:	888ad83a 	srl	r5,r17,r2
 800afa4:	00800804 	movi	r2,32
 800afa8:	18801a26 	beq	r3,r2,800b014 <__muldf3+0x848>
 800afac:	01001004 	movi	r4,64
 800afb0:	20c7c83a 	sub	r3,r4,r3
 800afb4:	88e2983a 	sll	r17,r17,r3
 800afb8:	8ca4b03a 	or	r18,r17,r18
 800afbc:	9004c03a 	cmpne	r2,r18,zero
 800afc0:	2884b03a 	or	r2,r5,r2
 800afc4:	144001cc 	andi	r17,r2,7
 800afc8:	88000d1e 	bne	r17,zero,800b000 <__muldf3+0x834>
 800afcc:	0021883a 	mov	r16,zero
 800afd0:	102cd0fa 	srli	r22,r2,3
 800afd4:	3027883a 	mov	r19,r6
 800afd8:	0005883a 	mov	r2,zero
 800afdc:	b46cb03a 	or	r22,r22,r17
 800afe0:	003e5906 	br	800a948 <__alt_data_end+0xfc00a948>
 800afe4:	1007883a 	mov	r3,r2
 800afe8:	0023883a 	mov	r17,zero
 800afec:	8820927a 	slli	r16,r17,9
 800aff0:	1805883a 	mov	r2,r3
 800aff4:	8822977a 	slli	r17,r17,29
 800aff8:	8020d33a 	srli	r16,r16,12
 800affc:	003ff406 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800b000:	10c003cc 	andi	r3,r2,15
 800b004:	01000104 	movi	r4,4
 800b008:	193ff626 	beq	r3,r4,800afe4 <__alt_data_end+0xfc00afe4>
 800b00c:	0023883a 	mov	r17,zero
 800b010:	003fd506 	br	800af68 <__alt_data_end+0xfc00af68>
 800b014:	0023883a 	mov	r17,zero
 800b018:	003fe706 	br	800afb8 <__alt_data_end+0xfc00afb8>
 800b01c:	00800434 	movhi	r2,16
 800b020:	8c000234 	orhi	r16,r17,8
 800b024:	10bfffc4 	addi	r2,r2,-1
 800b028:	3027883a 	mov	r19,r6
 800b02c:	80a0703a 	and	r16,r16,r2
 800b030:	902d883a 	mov	r22,r18
 800b034:	003eac06 	br	800aae8 <__alt_data_end+0xfc00aae8>

0800b038 <__subdf3>:
 800b038:	02000434 	movhi	r8,16
 800b03c:	423fffc4 	addi	r8,r8,-1
 800b040:	defffb04 	addi	sp,sp,-20
 800b044:	2a14703a 	and	r10,r5,r8
 800b048:	3812d53a 	srli	r9,r7,20
 800b04c:	3a10703a 	and	r8,r7,r8
 800b050:	2006d77a 	srli	r3,r4,29
 800b054:	3004d77a 	srli	r2,r6,29
 800b058:	dc000015 	stw	r16,0(sp)
 800b05c:	501490fa 	slli	r10,r10,3
 800b060:	2820d53a 	srli	r16,r5,20
 800b064:	401090fa 	slli	r8,r8,3
 800b068:	dc800215 	stw	r18,8(sp)
 800b06c:	dc400115 	stw	r17,4(sp)
 800b070:	dfc00415 	stw	ra,16(sp)
 800b074:	202290fa 	slli	r17,r4,3
 800b078:	dcc00315 	stw	r19,12(sp)
 800b07c:	4a41ffcc 	andi	r9,r9,2047
 800b080:	0101ffc4 	movi	r4,2047
 800b084:	2824d7fa 	srli	r18,r5,31
 800b088:	8401ffcc 	andi	r16,r16,2047
 800b08c:	50c6b03a 	or	r3,r10,r3
 800b090:	380ed7fa 	srli	r7,r7,31
 800b094:	408ab03a 	or	r5,r8,r2
 800b098:	300c90fa 	slli	r6,r6,3
 800b09c:	49009626 	beq	r9,r4,800b2f8 <__subdf3+0x2c0>
 800b0a0:	39c0005c 	xori	r7,r7,1
 800b0a4:	8245c83a 	sub	r2,r16,r9
 800b0a8:	3c807426 	beq	r7,r18,800b27c <__subdf3+0x244>
 800b0ac:	0080af0e 	bge	zero,r2,800b36c <__subdf3+0x334>
 800b0b0:	48002a1e 	bne	r9,zero,800b15c <__subdf3+0x124>
 800b0b4:	2988b03a 	or	r4,r5,r6
 800b0b8:	20009a1e 	bne	r4,zero,800b324 <__subdf3+0x2ec>
 800b0bc:	888001cc 	andi	r2,r17,7
 800b0c0:	10000726 	beq	r2,zero,800b0e0 <__subdf3+0xa8>
 800b0c4:	888003cc 	andi	r2,r17,15
 800b0c8:	01000104 	movi	r4,4
 800b0cc:	11000426 	beq	r2,r4,800b0e0 <__subdf3+0xa8>
 800b0d0:	890b883a 	add	r5,r17,r4
 800b0d4:	2c63803a 	cmpltu	r17,r5,r17
 800b0d8:	1c47883a 	add	r3,r3,r17
 800b0dc:	2823883a 	mov	r17,r5
 800b0e0:	1880202c 	andhi	r2,r3,128
 800b0e4:	10005926 	beq	r2,zero,800b24c <__subdf3+0x214>
 800b0e8:	84000044 	addi	r16,r16,1
 800b0ec:	0081ffc4 	movi	r2,2047
 800b0f0:	8080be26 	beq	r16,r2,800b3ec <__subdf3+0x3b4>
 800b0f4:	017fe034 	movhi	r5,65408
 800b0f8:	297fffc4 	addi	r5,r5,-1
 800b0fc:	1946703a 	and	r3,r3,r5
 800b100:	1804977a 	slli	r2,r3,29
 800b104:	1806927a 	slli	r3,r3,9
 800b108:	8822d0fa 	srli	r17,r17,3
 800b10c:	8401ffcc 	andi	r16,r16,2047
 800b110:	180ad33a 	srli	r5,r3,12
 800b114:	9100004c 	andi	r4,r18,1
 800b118:	1444b03a 	or	r2,r2,r17
 800b11c:	80c1ffcc 	andi	r3,r16,2047
 800b120:	1820953a 	slli	r16,r3,20
 800b124:	20c03fcc 	andi	r3,r4,255
 800b128:	180897fa 	slli	r4,r3,31
 800b12c:	00c00434 	movhi	r3,16
 800b130:	18ffffc4 	addi	r3,r3,-1
 800b134:	28c6703a 	and	r3,r5,r3
 800b138:	1c06b03a 	or	r3,r3,r16
 800b13c:	1906b03a 	or	r3,r3,r4
 800b140:	dfc00417 	ldw	ra,16(sp)
 800b144:	dcc00317 	ldw	r19,12(sp)
 800b148:	dc800217 	ldw	r18,8(sp)
 800b14c:	dc400117 	ldw	r17,4(sp)
 800b150:	dc000017 	ldw	r16,0(sp)
 800b154:	dec00504 	addi	sp,sp,20
 800b158:	f800283a 	ret
 800b15c:	0101ffc4 	movi	r4,2047
 800b160:	813fd626 	beq	r16,r4,800b0bc <__alt_data_end+0xfc00b0bc>
 800b164:	29402034 	orhi	r5,r5,128
 800b168:	01000e04 	movi	r4,56
 800b16c:	2080a316 	blt	r4,r2,800b3fc <__subdf3+0x3c4>
 800b170:	010007c4 	movi	r4,31
 800b174:	2080c616 	blt	r4,r2,800b490 <__subdf3+0x458>
 800b178:	01000804 	movi	r4,32
 800b17c:	2089c83a 	sub	r4,r4,r2
 800b180:	2910983a 	sll	r8,r5,r4
 800b184:	308ed83a 	srl	r7,r6,r2
 800b188:	3108983a 	sll	r4,r6,r4
 800b18c:	2884d83a 	srl	r2,r5,r2
 800b190:	41ccb03a 	or	r6,r8,r7
 800b194:	2008c03a 	cmpne	r4,r4,zero
 800b198:	310cb03a 	or	r6,r6,r4
 800b19c:	898dc83a 	sub	r6,r17,r6
 800b1a0:	89a3803a 	cmpltu	r17,r17,r6
 800b1a4:	1887c83a 	sub	r3,r3,r2
 800b1a8:	1c47c83a 	sub	r3,r3,r17
 800b1ac:	3023883a 	mov	r17,r6
 800b1b0:	1880202c 	andhi	r2,r3,128
 800b1b4:	10002326 	beq	r2,zero,800b244 <__subdf3+0x20c>
 800b1b8:	04c02034 	movhi	r19,128
 800b1bc:	9cffffc4 	addi	r19,r19,-1
 800b1c0:	1ce6703a 	and	r19,r3,r19
 800b1c4:	98007a26 	beq	r19,zero,800b3b0 <__subdf3+0x378>
 800b1c8:	9809883a 	mov	r4,r19
 800b1cc:	800bb380 	call	800bb38 <__clzsi2>
 800b1d0:	113ffe04 	addi	r4,r2,-8
 800b1d4:	00c007c4 	movi	r3,31
 800b1d8:	19007b16 	blt	r3,r4,800b3c8 <__subdf3+0x390>
 800b1dc:	00800804 	movi	r2,32
 800b1e0:	1105c83a 	sub	r2,r2,r4
 800b1e4:	8884d83a 	srl	r2,r17,r2
 800b1e8:	9906983a 	sll	r3,r19,r4
 800b1ec:	8922983a 	sll	r17,r17,r4
 800b1f0:	10c4b03a 	or	r2,r2,r3
 800b1f4:	24007816 	blt	r4,r16,800b3d8 <__subdf3+0x3a0>
 800b1f8:	2421c83a 	sub	r16,r4,r16
 800b1fc:	80c00044 	addi	r3,r16,1
 800b200:	010007c4 	movi	r4,31
 800b204:	20c09516 	blt	r4,r3,800b45c <__subdf3+0x424>
 800b208:	01400804 	movi	r5,32
 800b20c:	28cbc83a 	sub	r5,r5,r3
 800b210:	88c8d83a 	srl	r4,r17,r3
 800b214:	8962983a 	sll	r17,r17,r5
 800b218:	114a983a 	sll	r5,r2,r5
 800b21c:	10c6d83a 	srl	r3,r2,r3
 800b220:	8804c03a 	cmpne	r2,r17,zero
 800b224:	290ab03a 	or	r5,r5,r4
 800b228:	28a2b03a 	or	r17,r5,r2
 800b22c:	0021883a 	mov	r16,zero
 800b230:	003fa206 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b234:	2090b03a 	or	r8,r4,r2
 800b238:	40018e26 	beq	r8,zero,800b874 <__subdf3+0x83c>
 800b23c:	1007883a 	mov	r3,r2
 800b240:	2023883a 	mov	r17,r4
 800b244:	888001cc 	andi	r2,r17,7
 800b248:	103f9e1e 	bne	r2,zero,800b0c4 <__alt_data_end+0xfc00b0c4>
 800b24c:	1804977a 	slli	r2,r3,29
 800b250:	8822d0fa 	srli	r17,r17,3
 800b254:	1810d0fa 	srli	r8,r3,3
 800b258:	9100004c 	andi	r4,r18,1
 800b25c:	1444b03a 	or	r2,r2,r17
 800b260:	00c1ffc4 	movi	r3,2047
 800b264:	80c02826 	beq	r16,r3,800b308 <__subdf3+0x2d0>
 800b268:	01400434 	movhi	r5,16
 800b26c:	297fffc4 	addi	r5,r5,-1
 800b270:	80e0703a 	and	r16,r16,r3
 800b274:	414a703a 	and	r5,r8,r5
 800b278:	003fa806 	br	800b11c <__alt_data_end+0xfc00b11c>
 800b27c:	0080630e 	bge	zero,r2,800b40c <__subdf3+0x3d4>
 800b280:	48003026 	beq	r9,zero,800b344 <__subdf3+0x30c>
 800b284:	0101ffc4 	movi	r4,2047
 800b288:	813f8c26 	beq	r16,r4,800b0bc <__alt_data_end+0xfc00b0bc>
 800b28c:	29402034 	orhi	r5,r5,128
 800b290:	01000e04 	movi	r4,56
 800b294:	2080a90e 	bge	r4,r2,800b53c <__subdf3+0x504>
 800b298:	298cb03a 	or	r6,r5,r6
 800b29c:	3012c03a 	cmpne	r9,r6,zero
 800b2a0:	0005883a 	mov	r2,zero
 800b2a4:	4c53883a 	add	r9,r9,r17
 800b2a8:	4c63803a 	cmpltu	r17,r9,r17
 800b2ac:	10c7883a 	add	r3,r2,r3
 800b2b0:	88c7883a 	add	r3,r17,r3
 800b2b4:	4823883a 	mov	r17,r9
 800b2b8:	1880202c 	andhi	r2,r3,128
 800b2bc:	1000d026 	beq	r2,zero,800b600 <__subdf3+0x5c8>
 800b2c0:	84000044 	addi	r16,r16,1
 800b2c4:	0081ffc4 	movi	r2,2047
 800b2c8:	8080fe26 	beq	r16,r2,800b6c4 <__subdf3+0x68c>
 800b2cc:	00bfe034 	movhi	r2,65408
 800b2d0:	10bfffc4 	addi	r2,r2,-1
 800b2d4:	1886703a 	and	r3,r3,r2
 800b2d8:	880ad07a 	srli	r5,r17,1
 800b2dc:	180497fa 	slli	r2,r3,31
 800b2e0:	8900004c 	andi	r4,r17,1
 800b2e4:	2922b03a 	or	r17,r5,r4
 800b2e8:	1806d07a 	srli	r3,r3,1
 800b2ec:	1462b03a 	or	r17,r2,r17
 800b2f0:	3825883a 	mov	r18,r7
 800b2f4:	003f7106 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b2f8:	2984b03a 	or	r2,r5,r6
 800b2fc:	103f6826 	beq	r2,zero,800b0a0 <__alt_data_end+0xfc00b0a0>
 800b300:	39c03fcc 	andi	r7,r7,255
 800b304:	003f6706 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b308:	4086b03a 	or	r3,r8,r2
 800b30c:	18015226 	beq	r3,zero,800b858 <__subdf3+0x820>
 800b310:	00c00434 	movhi	r3,16
 800b314:	41400234 	orhi	r5,r8,8
 800b318:	18ffffc4 	addi	r3,r3,-1
 800b31c:	28ca703a 	and	r5,r5,r3
 800b320:	003f7e06 	br	800b11c <__alt_data_end+0xfc00b11c>
 800b324:	10bfffc4 	addi	r2,r2,-1
 800b328:	1000491e 	bne	r2,zero,800b450 <__subdf3+0x418>
 800b32c:	898fc83a 	sub	r7,r17,r6
 800b330:	89e3803a 	cmpltu	r17,r17,r7
 800b334:	1947c83a 	sub	r3,r3,r5
 800b338:	1c47c83a 	sub	r3,r3,r17
 800b33c:	3823883a 	mov	r17,r7
 800b340:	003f9b06 	br	800b1b0 <__alt_data_end+0xfc00b1b0>
 800b344:	2988b03a 	or	r4,r5,r6
 800b348:	203f5c26 	beq	r4,zero,800b0bc <__alt_data_end+0xfc00b0bc>
 800b34c:	10bfffc4 	addi	r2,r2,-1
 800b350:	1000931e 	bne	r2,zero,800b5a0 <__subdf3+0x568>
 800b354:	898d883a 	add	r6,r17,r6
 800b358:	3463803a 	cmpltu	r17,r6,r17
 800b35c:	1947883a 	add	r3,r3,r5
 800b360:	88c7883a 	add	r3,r17,r3
 800b364:	3023883a 	mov	r17,r6
 800b368:	003fd306 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b36c:	1000541e 	bne	r2,zero,800b4c0 <__subdf3+0x488>
 800b370:	80800044 	addi	r2,r16,1
 800b374:	1081ffcc 	andi	r2,r2,2047
 800b378:	01000044 	movi	r4,1
 800b37c:	2080a20e 	bge	r4,r2,800b608 <__subdf3+0x5d0>
 800b380:	8989c83a 	sub	r4,r17,r6
 800b384:	8905803a 	cmpltu	r2,r17,r4
 800b388:	1967c83a 	sub	r19,r3,r5
 800b38c:	98a7c83a 	sub	r19,r19,r2
 800b390:	9880202c 	andhi	r2,r19,128
 800b394:	10006326 	beq	r2,zero,800b524 <__subdf3+0x4ec>
 800b398:	3463c83a 	sub	r17,r6,r17
 800b39c:	28c7c83a 	sub	r3,r5,r3
 800b3a0:	344d803a 	cmpltu	r6,r6,r17
 800b3a4:	19a7c83a 	sub	r19,r3,r6
 800b3a8:	3825883a 	mov	r18,r7
 800b3ac:	983f861e 	bne	r19,zero,800b1c8 <__alt_data_end+0xfc00b1c8>
 800b3b0:	8809883a 	mov	r4,r17
 800b3b4:	800bb380 	call	800bb38 <__clzsi2>
 800b3b8:	10800804 	addi	r2,r2,32
 800b3bc:	113ffe04 	addi	r4,r2,-8
 800b3c0:	00c007c4 	movi	r3,31
 800b3c4:	193f850e 	bge	r3,r4,800b1dc <__alt_data_end+0xfc00b1dc>
 800b3c8:	10bff604 	addi	r2,r2,-40
 800b3cc:	8884983a 	sll	r2,r17,r2
 800b3d0:	0023883a 	mov	r17,zero
 800b3d4:	243f880e 	bge	r4,r16,800b1f8 <__alt_data_end+0xfc00b1f8>
 800b3d8:	00ffe034 	movhi	r3,65408
 800b3dc:	18ffffc4 	addi	r3,r3,-1
 800b3e0:	8121c83a 	sub	r16,r16,r4
 800b3e4:	10c6703a 	and	r3,r2,r3
 800b3e8:	003f3406 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b3ec:	9100004c 	andi	r4,r18,1
 800b3f0:	000b883a 	mov	r5,zero
 800b3f4:	0005883a 	mov	r2,zero
 800b3f8:	003f4806 	br	800b11c <__alt_data_end+0xfc00b11c>
 800b3fc:	298cb03a 	or	r6,r5,r6
 800b400:	300cc03a 	cmpne	r6,r6,zero
 800b404:	0005883a 	mov	r2,zero
 800b408:	003f6406 	br	800b19c <__alt_data_end+0xfc00b19c>
 800b40c:	10009a1e 	bne	r2,zero,800b678 <__subdf3+0x640>
 800b410:	82400044 	addi	r9,r16,1
 800b414:	4881ffcc 	andi	r2,r9,2047
 800b418:	02800044 	movi	r10,1
 800b41c:	5080670e 	bge	r10,r2,800b5bc <__subdf3+0x584>
 800b420:	0081ffc4 	movi	r2,2047
 800b424:	4880af26 	beq	r9,r2,800b6e4 <__subdf3+0x6ac>
 800b428:	898d883a 	add	r6,r17,r6
 800b42c:	1945883a 	add	r2,r3,r5
 800b430:	3447803a 	cmpltu	r3,r6,r17
 800b434:	1887883a 	add	r3,r3,r2
 800b438:	182297fa 	slli	r17,r3,31
 800b43c:	300cd07a 	srli	r6,r6,1
 800b440:	1806d07a 	srli	r3,r3,1
 800b444:	4821883a 	mov	r16,r9
 800b448:	89a2b03a 	or	r17,r17,r6
 800b44c:	003f1b06 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b450:	0101ffc4 	movi	r4,2047
 800b454:	813f441e 	bne	r16,r4,800b168 <__alt_data_end+0xfc00b168>
 800b458:	003f1806 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b45c:	843ff844 	addi	r16,r16,-31
 800b460:	01400804 	movi	r5,32
 800b464:	1408d83a 	srl	r4,r2,r16
 800b468:	19405026 	beq	r3,r5,800b5ac <__subdf3+0x574>
 800b46c:	01401004 	movi	r5,64
 800b470:	28c7c83a 	sub	r3,r5,r3
 800b474:	10c4983a 	sll	r2,r2,r3
 800b478:	88a2b03a 	or	r17,r17,r2
 800b47c:	8822c03a 	cmpne	r17,r17,zero
 800b480:	2462b03a 	or	r17,r4,r17
 800b484:	0007883a 	mov	r3,zero
 800b488:	0021883a 	mov	r16,zero
 800b48c:	003f6d06 	br	800b244 <__alt_data_end+0xfc00b244>
 800b490:	11fff804 	addi	r7,r2,-32
 800b494:	01000804 	movi	r4,32
 800b498:	29ced83a 	srl	r7,r5,r7
 800b49c:	11004526 	beq	r2,r4,800b5b4 <__subdf3+0x57c>
 800b4a0:	01001004 	movi	r4,64
 800b4a4:	2089c83a 	sub	r4,r4,r2
 800b4a8:	2904983a 	sll	r2,r5,r4
 800b4ac:	118cb03a 	or	r6,r2,r6
 800b4b0:	300cc03a 	cmpne	r6,r6,zero
 800b4b4:	398cb03a 	or	r6,r7,r6
 800b4b8:	0005883a 	mov	r2,zero
 800b4bc:	003f3706 	br	800b19c <__alt_data_end+0xfc00b19c>
 800b4c0:	80002a26 	beq	r16,zero,800b56c <__subdf3+0x534>
 800b4c4:	0101ffc4 	movi	r4,2047
 800b4c8:	49006626 	beq	r9,r4,800b664 <__subdf3+0x62c>
 800b4cc:	0085c83a 	sub	r2,zero,r2
 800b4d0:	18c02034 	orhi	r3,r3,128
 800b4d4:	01000e04 	movi	r4,56
 800b4d8:	20807e16 	blt	r4,r2,800b6d4 <__subdf3+0x69c>
 800b4dc:	010007c4 	movi	r4,31
 800b4e0:	2080e716 	blt	r4,r2,800b880 <__subdf3+0x848>
 800b4e4:	01000804 	movi	r4,32
 800b4e8:	2089c83a 	sub	r4,r4,r2
 800b4ec:	1914983a 	sll	r10,r3,r4
 800b4f0:	8890d83a 	srl	r8,r17,r2
 800b4f4:	8908983a 	sll	r4,r17,r4
 800b4f8:	1884d83a 	srl	r2,r3,r2
 800b4fc:	5222b03a 	or	r17,r10,r8
 800b500:	2006c03a 	cmpne	r3,r4,zero
 800b504:	88e2b03a 	or	r17,r17,r3
 800b508:	3463c83a 	sub	r17,r6,r17
 800b50c:	2885c83a 	sub	r2,r5,r2
 800b510:	344d803a 	cmpltu	r6,r6,r17
 800b514:	1187c83a 	sub	r3,r2,r6
 800b518:	4821883a 	mov	r16,r9
 800b51c:	3825883a 	mov	r18,r7
 800b520:	003f2306 	br	800b1b0 <__alt_data_end+0xfc00b1b0>
 800b524:	24d0b03a 	or	r8,r4,r19
 800b528:	40001b1e 	bne	r8,zero,800b598 <__subdf3+0x560>
 800b52c:	0005883a 	mov	r2,zero
 800b530:	0009883a 	mov	r4,zero
 800b534:	0021883a 	mov	r16,zero
 800b538:	003f4906 	br	800b260 <__alt_data_end+0xfc00b260>
 800b53c:	010007c4 	movi	r4,31
 800b540:	20803a16 	blt	r4,r2,800b62c <__subdf3+0x5f4>
 800b544:	01000804 	movi	r4,32
 800b548:	2089c83a 	sub	r4,r4,r2
 800b54c:	2912983a 	sll	r9,r5,r4
 800b550:	3090d83a 	srl	r8,r6,r2
 800b554:	3108983a 	sll	r4,r6,r4
 800b558:	2884d83a 	srl	r2,r5,r2
 800b55c:	4a12b03a 	or	r9,r9,r8
 800b560:	2008c03a 	cmpne	r4,r4,zero
 800b564:	4912b03a 	or	r9,r9,r4
 800b568:	003f4e06 	br	800b2a4 <__alt_data_end+0xfc00b2a4>
 800b56c:	1c48b03a 	or	r4,r3,r17
 800b570:	20003c26 	beq	r4,zero,800b664 <__subdf3+0x62c>
 800b574:	0084303a 	nor	r2,zero,r2
 800b578:	1000381e 	bne	r2,zero,800b65c <__subdf3+0x624>
 800b57c:	3463c83a 	sub	r17,r6,r17
 800b580:	28c5c83a 	sub	r2,r5,r3
 800b584:	344d803a 	cmpltu	r6,r6,r17
 800b588:	1187c83a 	sub	r3,r2,r6
 800b58c:	4821883a 	mov	r16,r9
 800b590:	3825883a 	mov	r18,r7
 800b594:	003f0606 	br	800b1b0 <__alt_data_end+0xfc00b1b0>
 800b598:	2023883a 	mov	r17,r4
 800b59c:	003f0906 	br	800b1c4 <__alt_data_end+0xfc00b1c4>
 800b5a0:	0101ffc4 	movi	r4,2047
 800b5a4:	813f3a1e 	bne	r16,r4,800b290 <__alt_data_end+0xfc00b290>
 800b5a8:	003ec406 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b5ac:	0005883a 	mov	r2,zero
 800b5b0:	003fb106 	br	800b478 <__alt_data_end+0xfc00b478>
 800b5b4:	0005883a 	mov	r2,zero
 800b5b8:	003fbc06 	br	800b4ac <__alt_data_end+0xfc00b4ac>
 800b5bc:	1c44b03a 	or	r2,r3,r17
 800b5c0:	80008e1e 	bne	r16,zero,800b7fc <__subdf3+0x7c4>
 800b5c4:	1000c826 	beq	r2,zero,800b8e8 <__subdf3+0x8b0>
 800b5c8:	2984b03a 	or	r2,r5,r6
 800b5cc:	103ebb26 	beq	r2,zero,800b0bc <__alt_data_end+0xfc00b0bc>
 800b5d0:	8989883a 	add	r4,r17,r6
 800b5d4:	1945883a 	add	r2,r3,r5
 800b5d8:	2447803a 	cmpltu	r3,r4,r17
 800b5dc:	1887883a 	add	r3,r3,r2
 800b5e0:	1880202c 	andhi	r2,r3,128
 800b5e4:	2023883a 	mov	r17,r4
 800b5e8:	103f1626 	beq	r2,zero,800b244 <__alt_data_end+0xfc00b244>
 800b5ec:	00bfe034 	movhi	r2,65408
 800b5f0:	10bfffc4 	addi	r2,r2,-1
 800b5f4:	5021883a 	mov	r16,r10
 800b5f8:	1886703a 	and	r3,r3,r2
 800b5fc:	003eaf06 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b600:	3825883a 	mov	r18,r7
 800b604:	003f0f06 	br	800b244 <__alt_data_end+0xfc00b244>
 800b608:	1c44b03a 	or	r2,r3,r17
 800b60c:	8000251e 	bne	r16,zero,800b6a4 <__subdf3+0x66c>
 800b610:	1000661e 	bne	r2,zero,800b7ac <__subdf3+0x774>
 800b614:	2990b03a 	or	r8,r5,r6
 800b618:	40009626 	beq	r8,zero,800b874 <__subdf3+0x83c>
 800b61c:	2807883a 	mov	r3,r5
 800b620:	3023883a 	mov	r17,r6
 800b624:	3825883a 	mov	r18,r7
 800b628:	003ea406 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b62c:	127ff804 	addi	r9,r2,-32
 800b630:	01000804 	movi	r4,32
 800b634:	2a52d83a 	srl	r9,r5,r9
 800b638:	11008c26 	beq	r2,r4,800b86c <__subdf3+0x834>
 800b63c:	01001004 	movi	r4,64
 800b640:	2085c83a 	sub	r2,r4,r2
 800b644:	2884983a 	sll	r2,r5,r2
 800b648:	118cb03a 	or	r6,r2,r6
 800b64c:	300cc03a 	cmpne	r6,r6,zero
 800b650:	4992b03a 	or	r9,r9,r6
 800b654:	0005883a 	mov	r2,zero
 800b658:	003f1206 	br	800b2a4 <__alt_data_end+0xfc00b2a4>
 800b65c:	0101ffc4 	movi	r4,2047
 800b660:	493f9c1e 	bne	r9,r4,800b4d4 <__alt_data_end+0xfc00b4d4>
 800b664:	2807883a 	mov	r3,r5
 800b668:	3023883a 	mov	r17,r6
 800b66c:	4821883a 	mov	r16,r9
 800b670:	3825883a 	mov	r18,r7
 800b674:	003e9106 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b678:	80001f1e 	bne	r16,zero,800b6f8 <__subdf3+0x6c0>
 800b67c:	1c48b03a 	or	r4,r3,r17
 800b680:	20005a26 	beq	r4,zero,800b7ec <__subdf3+0x7b4>
 800b684:	0084303a 	nor	r2,zero,r2
 800b688:	1000561e 	bne	r2,zero,800b7e4 <__subdf3+0x7ac>
 800b68c:	89a3883a 	add	r17,r17,r6
 800b690:	1945883a 	add	r2,r3,r5
 800b694:	898d803a 	cmpltu	r6,r17,r6
 800b698:	3087883a 	add	r3,r6,r2
 800b69c:	4821883a 	mov	r16,r9
 800b6a0:	003f0506 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b6a4:	10002b1e 	bne	r2,zero,800b754 <__subdf3+0x71c>
 800b6a8:	2984b03a 	or	r2,r5,r6
 800b6ac:	10008026 	beq	r2,zero,800b8b0 <__subdf3+0x878>
 800b6b0:	2807883a 	mov	r3,r5
 800b6b4:	3023883a 	mov	r17,r6
 800b6b8:	3825883a 	mov	r18,r7
 800b6bc:	0401ffc4 	movi	r16,2047
 800b6c0:	003e7e06 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b6c4:	3809883a 	mov	r4,r7
 800b6c8:	0011883a 	mov	r8,zero
 800b6cc:	0005883a 	mov	r2,zero
 800b6d0:	003ee306 	br	800b260 <__alt_data_end+0xfc00b260>
 800b6d4:	1c62b03a 	or	r17,r3,r17
 800b6d8:	8822c03a 	cmpne	r17,r17,zero
 800b6dc:	0005883a 	mov	r2,zero
 800b6e0:	003f8906 	br	800b508 <__alt_data_end+0xfc00b508>
 800b6e4:	3809883a 	mov	r4,r7
 800b6e8:	4821883a 	mov	r16,r9
 800b6ec:	0011883a 	mov	r8,zero
 800b6f0:	0005883a 	mov	r2,zero
 800b6f4:	003eda06 	br	800b260 <__alt_data_end+0xfc00b260>
 800b6f8:	0101ffc4 	movi	r4,2047
 800b6fc:	49003b26 	beq	r9,r4,800b7ec <__subdf3+0x7b4>
 800b700:	0085c83a 	sub	r2,zero,r2
 800b704:	18c02034 	orhi	r3,r3,128
 800b708:	01000e04 	movi	r4,56
 800b70c:	20806e16 	blt	r4,r2,800b8c8 <__subdf3+0x890>
 800b710:	010007c4 	movi	r4,31
 800b714:	20807716 	blt	r4,r2,800b8f4 <__subdf3+0x8bc>
 800b718:	01000804 	movi	r4,32
 800b71c:	2089c83a 	sub	r4,r4,r2
 800b720:	1914983a 	sll	r10,r3,r4
 800b724:	8890d83a 	srl	r8,r17,r2
 800b728:	8908983a 	sll	r4,r17,r4
 800b72c:	1884d83a 	srl	r2,r3,r2
 800b730:	5222b03a 	or	r17,r10,r8
 800b734:	2006c03a 	cmpne	r3,r4,zero
 800b738:	88e2b03a 	or	r17,r17,r3
 800b73c:	89a3883a 	add	r17,r17,r6
 800b740:	1145883a 	add	r2,r2,r5
 800b744:	898d803a 	cmpltu	r6,r17,r6
 800b748:	3087883a 	add	r3,r6,r2
 800b74c:	4821883a 	mov	r16,r9
 800b750:	003ed906 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b754:	2984b03a 	or	r2,r5,r6
 800b758:	10004226 	beq	r2,zero,800b864 <__subdf3+0x82c>
 800b75c:	1808d0fa 	srli	r4,r3,3
 800b760:	8822d0fa 	srli	r17,r17,3
 800b764:	1806977a 	slli	r3,r3,29
 800b768:	2080022c 	andhi	r2,r4,8
 800b76c:	1c62b03a 	or	r17,r3,r17
 800b770:	10000826 	beq	r2,zero,800b794 <__subdf3+0x75c>
 800b774:	2812d0fa 	srli	r9,r5,3
 800b778:	4880022c 	andhi	r2,r9,8
 800b77c:	1000051e 	bne	r2,zero,800b794 <__subdf3+0x75c>
 800b780:	300cd0fa 	srli	r6,r6,3
 800b784:	2804977a 	slli	r2,r5,29
 800b788:	4809883a 	mov	r4,r9
 800b78c:	3825883a 	mov	r18,r7
 800b790:	11a2b03a 	or	r17,r2,r6
 800b794:	8806d77a 	srli	r3,r17,29
 800b798:	200890fa 	slli	r4,r4,3
 800b79c:	882290fa 	slli	r17,r17,3
 800b7a0:	0401ffc4 	movi	r16,2047
 800b7a4:	1906b03a 	or	r3,r3,r4
 800b7a8:	003e4406 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b7ac:	2984b03a 	or	r2,r5,r6
 800b7b0:	103e4226 	beq	r2,zero,800b0bc <__alt_data_end+0xfc00b0bc>
 800b7b4:	8989c83a 	sub	r4,r17,r6
 800b7b8:	8911803a 	cmpltu	r8,r17,r4
 800b7bc:	1945c83a 	sub	r2,r3,r5
 800b7c0:	1205c83a 	sub	r2,r2,r8
 800b7c4:	1200202c 	andhi	r8,r2,128
 800b7c8:	403e9a26 	beq	r8,zero,800b234 <__alt_data_end+0xfc00b234>
 800b7cc:	3463c83a 	sub	r17,r6,r17
 800b7d0:	28c5c83a 	sub	r2,r5,r3
 800b7d4:	344d803a 	cmpltu	r6,r6,r17
 800b7d8:	1187c83a 	sub	r3,r2,r6
 800b7dc:	3825883a 	mov	r18,r7
 800b7e0:	003e3606 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b7e4:	0101ffc4 	movi	r4,2047
 800b7e8:	493fc71e 	bne	r9,r4,800b708 <__alt_data_end+0xfc00b708>
 800b7ec:	2807883a 	mov	r3,r5
 800b7f0:	3023883a 	mov	r17,r6
 800b7f4:	4821883a 	mov	r16,r9
 800b7f8:	003e3006 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b7fc:	10003626 	beq	r2,zero,800b8d8 <__subdf3+0x8a0>
 800b800:	2984b03a 	or	r2,r5,r6
 800b804:	10001726 	beq	r2,zero,800b864 <__subdf3+0x82c>
 800b808:	1808d0fa 	srli	r4,r3,3
 800b80c:	8822d0fa 	srli	r17,r17,3
 800b810:	1806977a 	slli	r3,r3,29
 800b814:	2080022c 	andhi	r2,r4,8
 800b818:	1c62b03a 	or	r17,r3,r17
 800b81c:	10000726 	beq	r2,zero,800b83c <__subdf3+0x804>
 800b820:	2812d0fa 	srli	r9,r5,3
 800b824:	4880022c 	andhi	r2,r9,8
 800b828:	1000041e 	bne	r2,zero,800b83c <__subdf3+0x804>
 800b82c:	300cd0fa 	srli	r6,r6,3
 800b830:	2804977a 	slli	r2,r5,29
 800b834:	4809883a 	mov	r4,r9
 800b838:	11a2b03a 	or	r17,r2,r6
 800b83c:	8806d77a 	srli	r3,r17,29
 800b840:	200890fa 	slli	r4,r4,3
 800b844:	882290fa 	slli	r17,r17,3
 800b848:	3825883a 	mov	r18,r7
 800b84c:	1906b03a 	or	r3,r3,r4
 800b850:	0401ffc4 	movi	r16,2047
 800b854:	003e1906 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b858:	000b883a 	mov	r5,zero
 800b85c:	0005883a 	mov	r2,zero
 800b860:	003e2e06 	br	800b11c <__alt_data_end+0xfc00b11c>
 800b864:	0401ffc4 	movi	r16,2047
 800b868:	003e1406 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b86c:	0005883a 	mov	r2,zero
 800b870:	003f7506 	br	800b648 <__alt_data_end+0xfc00b648>
 800b874:	0005883a 	mov	r2,zero
 800b878:	0009883a 	mov	r4,zero
 800b87c:	003e7806 	br	800b260 <__alt_data_end+0xfc00b260>
 800b880:	123ff804 	addi	r8,r2,-32
 800b884:	01000804 	movi	r4,32
 800b888:	1a10d83a 	srl	r8,r3,r8
 800b88c:	11002526 	beq	r2,r4,800b924 <__subdf3+0x8ec>
 800b890:	01001004 	movi	r4,64
 800b894:	2085c83a 	sub	r2,r4,r2
 800b898:	1884983a 	sll	r2,r3,r2
 800b89c:	1444b03a 	or	r2,r2,r17
 800b8a0:	1004c03a 	cmpne	r2,r2,zero
 800b8a4:	40a2b03a 	or	r17,r8,r2
 800b8a8:	0005883a 	mov	r2,zero
 800b8ac:	003f1606 	br	800b508 <__alt_data_end+0xfc00b508>
 800b8b0:	02000434 	movhi	r8,16
 800b8b4:	0009883a 	mov	r4,zero
 800b8b8:	423fffc4 	addi	r8,r8,-1
 800b8bc:	00bfffc4 	movi	r2,-1
 800b8c0:	0401ffc4 	movi	r16,2047
 800b8c4:	003e6606 	br	800b260 <__alt_data_end+0xfc00b260>
 800b8c8:	1c62b03a 	or	r17,r3,r17
 800b8cc:	8822c03a 	cmpne	r17,r17,zero
 800b8d0:	0005883a 	mov	r2,zero
 800b8d4:	003f9906 	br	800b73c <__alt_data_end+0xfc00b73c>
 800b8d8:	2807883a 	mov	r3,r5
 800b8dc:	3023883a 	mov	r17,r6
 800b8e0:	0401ffc4 	movi	r16,2047
 800b8e4:	003df506 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b8e8:	2807883a 	mov	r3,r5
 800b8ec:	3023883a 	mov	r17,r6
 800b8f0:	003df206 	br	800b0bc <__alt_data_end+0xfc00b0bc>
 800b8f4:	123ff804 	addi	r8,r2,-32
 800b8f8:	01000804 	movi	r4,32
 800b8fc:	1a10d83a 	srl	r8,r3,r8
 800b900:	11000a26 	beq	r2,r4,800b92c <__subdf3+0x8f4>
 800b904:	01001004 	movi	r4,64
 800b908:	2085c83a 	sub	r2,r4,r2
 800b90c:	1884983a 	sll	r2,r3,r2
 800b910:	1444b03a 	or	r2,r2,r17
 800b914:	1004c03a 	cmpne	r2,r2,zero
 800b918:	40a2b03a 	or	r17,r8,r2
 800b91c:	0005883a 	mov	r2,zero
 800b920:	003f8606 	br	800b73c <__alt_data_end+0xfc00b73c>
 800b924:	0005883a 	mov	r2,zero
 800b928:	003fdc06 	br	800b89c <__alt_data_end+0xfc00b89c>
 800b92c:	0005883a 	mov	r2,zero
 800b930:	003ff706 	br	800b910 <__alt_data_end+0xfc00b910>

0800b934 <__fixdfsi>:
 800b934:	280cd53a 	srli	r6,r5,20
 800b938:	00c00434 	movhi	r3,16
 800b93c:	18ffffc4 	addi	r3,r3,-1
 800b940:	3181ffcc 	andi	r6,r6,2047
 800b944:	01c0ff84 	movi	r7,1022
 800b948:	28c6703a 	and	r3,r5,r3
 800b94c:	280ad7fa 	srli	r5,r5,31
 800b950:	3980120e 	bge	r7,r6,800b99c <__fixdfsi+0x68>
 800b954:	00810744 	movi	r2,1053
 800b958:	11800c16 	blt	r2,r6,800b98c <__fixdfsi+0x58>
 800b95c:	00810cc4 	movi	r2,1075
 800b960:	1185c83a 	sub	r2,r2,r6
 800b964:	01c007c4 	movi	r7,31
 800b968:	18c00434 	orhi	r3,r3,16
 800b96c:	38800d16 	blt	r7,r2,800b9a4 <__fixdfsi+0x70>
 800b970:	31befb44 	addi	r6,r6,-1043
 800b974:	2084d83a 	srl	r2,r4,r2
 800b978:	1986983a 	sll	r3,r3,r6
 800b97c:	1884b03a 	or	r2,r3,r2
 800b980:	28000726 	beq	r5,zero,800b9a0 <__fixdfsi+0x6c>
 800b984:	0085c83a 	sub	r2,zero,r2
 800b988:	f800283a 	ret
 800b98c:	00a00034 	movhi	r2,32768
 800b990:	10bfffc4 	addi	r2,r2,-1
 800b994:	2885883a 	add	r2,r5,r2
 800b998:	f800283a 	ret
 800b99c:	0005883a 	mov	r2,zero
 800b9a0:	f800283a 	ret
 800b9a4:	008104c4 	movi	r2,1043
 800b9a8:	1185c83a 	sub	r2,r2,r6
 800b9ac:	1884d83a 	srl	r2,r3,r2
 800b9b0:	003ff306 	br	800b980 <__alt_data_end+0xfc00b980>

0800b9b4 <__floatsidf>:
 800b9b4:	defffd04 	addi	sp,sp,-12
 800b9b8:	dfc00215 	stw	ra,8(sp)
 800b9bc:	dc400115 	stw	r17,4(sp)
 800b9c0:	dc000015 	stw	r16,0(sp)
 800b9c4:	20002b26 	beq	r4,zero,800ba74 <__floatsidf+0xc0>
 800b9c8:	2023883a 	mov	r17,r4
 800b9cc:	2020d7fa 	srli	r16,r4,31
 800b9d0:	20002d16 	blt	r4,zero,800ba88 <__floatsidf+0xd4>
 800b9d4:	8809883a 	mov	r4,r17
 800b9d8:	800bb380 	call	800bb38 <__clzsi2>
 800b9dc:	01410784 	movi	r5,1054
 800b9e0:	288bc83a 	sub	r5,r5,r2
 800b9e4:	01010cc4 	movi	r4,1075
 800b9e8:	2149c83a 	sub	r4,r4,r5
 800b9ec:	00c007c4 	movi	r3,31
 800b9f0:	1900160e 	bge	r3,r4,800ba4c <__floatsidf+0x98>
 800b9f4:	00c104c4 	movi	r3,1043
 800b9f8:	1947c83a 	sub	r3,r3,r5
 800b9fc:	88c6983a 	sll	r3,r17,r3
 800ba00:	00800434 	movhi	r2,16
 800ba04:	10bfffc4 	addi	r2,r2,-1
 800ba08:	1886703a 	and	r3,r3,r2
 800ba0c:	2941ffcc 	andi	r5,r5,2047
 800ba10:	800d883a 	mov	r6,r16
 800ba14:	0005883a 	mov	r2,zero
 800ba18:	280a953a 	slli	r5,r5,20
 800ba1c:	31803fcc 	andi	r6,r6,255
 800ba20:	01000434 	movhi	r4,16
 800ba24:	300c97fa 	slli	r6,r6,31
 800ba28:	213fffc4 	addi	r4,r4,-1
 800ba2c:	1906703a 	and	r3,r3,r4
 800ba30:	1946b03a 	or	r3,r3,r5
 800ba34:	1986b03a 	or	r3,r3,r6
 800ba38:	dfc00217 	ldw	ra,8(sp)
 800ba3c:	dc400117 	ldw	r17,4(sp)
 800ba40:	dc000017 	ldw	r16,0(sp)
 800ba44:	dec00304 	addi	sp,sp,12
 800ba48:	f800283a 	ret
 800ba4c:	00c002c4 	movi	r3,11
 800ba50:	1887c83a 	sub	r3,r3,r2
 800ba54:	88c6d83a 	srl	r3,r17,r3
 800ba58:	8904983a 	sll	r2,r17,r4
 800ba5c:	01000434 	movhi	r4,16
 800ba60:	213fffc4 	addi	r4,r4,-1
 800ba64:	2941ffcc 	andi	r5,r5,2047
 800ba68:	1906703a 	and	r3,r3,r4
 800ba6c:	800d883a 	mov	r6,r16
 800ba70:	003fe906 	br	800ba18 <__alt_data_end+0xfc00ba18>
 800ba74:	000d883a 	mov	r6,zero
 800ba78:	000b883a 	mov	r5,zero
 800ba7c:	0007883a 	mov	r3,zero
 800ba80:	0005883a 	mov	r2,zero
 800ba84:	003fe406 	br	800ba18 <__alt_data_end+0xfc00ba18>
 800ba88:	0123c83a 	sub	r17,zero,r4
 800ba8c:	003fd106 	br	800b9d4 <__alt_data_end+0xfc00b9d4>

0800ba90 <__floatunsidf>:
 800ba90:	defffe04 	addi	sp,sp,-8
 800ba94:	dc000015 	stw	r16,0(sp)
 800ba98:	dfc00115 	stw	ra,4(sp)
 800ba9c:	2021883a 	mov	r16,r4
 800baa0:	20002226 	beq	r4,zero,800bb2c <__floatunsidf+0x9c>
 800baa4:	800bb380 	call	800bb38 <__clzsi2>
 800baa8:	01010784 	movi	r4,1054
 800baac:	2089c83a 	sub	r4,r4,r2
 800bab0:	01810cc4 	movi	r6,1075
 800bab4:	310dc83a 	sub	r6,r6,r4
 800bab8:	00c007c4 	movi	r3,31
 800babc:	1980120e 	bge	r3,r6,800bb08 <__floatunsidf+0x78>
 800bac0:	00c104c4 	movi	r3,1043
 800bac4:	1907c83a 	sub	r3,r3,r4
 800bac8:	80ca983a 	sll	r5,r16,r3
 800bacc:	00800434 	movhi	r2,16
 800bad0:	10bfffc4 	addi	r2,r2,-1
 800bad4:	2101ffcc 	andi	r4,r4,2047
 800bad8:	0021883a 	mov	r16,zero
 800badc:	288a703a 	and	r5,r5,r2
 800bae0:	2008953a 	slli	r4,r4,20
 800bae4:	00c00434 	movhi	r3,16
 800bae8:	18ffffc4 	addi	r3,r3,-1
 800baec:	28c6703a 	and	r3,r5,r3
 800baf0:	8005883a 	mov	r2,r16
 800baf4:	1906b03a 	or	r3,r3,r4
 800baf8:	dfc00117 	ldw	ra,4(sp)
 800bafc:	dc000017 	ldw	r16,0(sp)
 800bb00:	dec00204 	addi	sp,sp,8
 800bb04:	f800283a 	ret
 800bb08:	00c002c4 	movi	r3,11
 800bb0c:	188bc83a 	sub	r5,r3,r2
 800bb10:	814ad83a 	srl	r5,r16,r5
 800bb14:	00c00434 	movhi	r3,16
 800bb18:	18ffffc4 	addi	r3,r3,-1
 800bb1c:	81a0983a 	sll	r16,r16,r6
 800bb20:	2101ffcc 	andi	r4,r4,2047
 800bb24:	28ca703a 	and	r5,r5,r3
 800bb28:	003fed06 	br	800bae0 <__alt_data_end+0xfc00bae0>
 800bb2c:	0009883a 	mov	r4,zero
 800bb30:	000b883a 	mov	r5,zero
 800bb34:	003fea06 	br	800bae0 <__alt_data_end+0xfc00bae0>

0800bb38 <__clzsi2>:
 800bb38:	00bfffd4 	movui	r2,65535
 800bb3c:	11000536 	bltu	r2,r4,800bb54 <__clzsi2+0x1c>
 800bb40:	00803fc4 	movi	r2,255
 800bb44:	11000f36 	bltu	r2,r4,800bb84 <__clzsi2+0x4c>
 800bb48:	00800804 	movi	r2,32
 800bb4c:	0007883a 	mov	r3,zero
 800bb50:	00000506 	br	800bb68 <__clzsi2+0x30>
 800bb54:	00804034 	movhi	r2,256
 800bb58:	10bfffc4 	addi	r2,r2,-1
 800bb5c:	11000c2e 	bgeu	r2,r4,800bb90 <__clzsi2+0x58>
 800bb60:	00800204 	movi	r2,8
 800bb64:	00c00604 	movi	r3,24
 800bb68:	20c8d83a 	srl	r4,r4,r3
 800bb6c:	00c20074 	movhi	r3,2049
 800bb70:	18f85104 	addi	r3,r3,-7868
 800bb74:	1909883a 	add	r4,r3,r4
 800bb78:	20c00003 	ldbu	r3,0(r4)
 800bb7c:	10c5c83a 	sub	r2,r2,r3
 800bb80:	f800283a 	ret
 800bb84:	00800604 	movi	r2,24
 800bb88:	00c00204 	movi	r3,8
 800bb8c:	003ff606 	br	800bb68 <__alt_data_end+0xfc00bb68>
 800bb90:	00800404 	movi	r2,16
 800bb94:	1007883a 	mov	r3,r2
 800bb98:	003ff306 	br	800bb68 <__alt_data_end+0xfc00bb68>

0800bb9c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800bb9c:	defffc04 	addi	sp,sp,-16
 800bba0:	df000315 	stw	fp,12(sp)
 800bba4:	df000304 	addi	fp,sp,12
 800bba8:	e13ffd15 	stw	r4,-12(fp)
 800bbac:	e17ffe15 	stw	r5,-8(fp)
 800bbb0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800bbb4:	e0fffe17 	ldw	r3,-8(fp)
 800bbb8:	e0bffd17 	ldw	r2,-12(fp)
 800bbbc:	18800c26 	beq	r3,r2,800bbf0 <alt_load_section+0x54>
  {
    while( to != end )
 800bbc0:	00000806 	br	800bbe4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800bbc4:	e0bffe17 	ldw	r2,-8(fp)
 800bbc8:	10c00104 	addi	r3,r2,4
 800bbcc:	e0fffe15 	stw	r3,-8(fp)
 800bbd0:	e0fffd17 	ldw	r3,-12(fp)
 800bbd4:	19000104 	addi	r4,r3,4
 800bbd8:	e13ffd15 	stw	r4,-12(fp)
 800bbdc:	18c00017 	ldw	r3,0(r3)
 800bbe0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800bbe4:	e0fffe17 	ldw	r3,-8(fp)
 800bbe8:	e0bfff17 	ldw	r2,-4(fp)
 800bbec:	18bff51e 	bne	r3,r2,800bbc4 <__alt_data_end+0xfc00bbc4>
    {
      *to++ = *from++;
    }
  }
}
 800bbf0:	0001883a 	nop
 800bbf4:	e037883a 	mov	sp,fp
 800bbf8:	df000017 	ldw	fp,0(sp)
 800bbfc:	dec00104 	addi	sp,sp,4
 800bc00:	f800283a 	ret

0800bc04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800bc04:	defffe04 	addi	sp,sp,-8
 800bc08:	dfc00115 	stw	ra,4(sp)
 800bc0c:	df000015 	stw	fp,0(sp)
 800bc10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800bc14:	01820074 	movhi	r6,2049
 800bc18:	31801204 	addi	r6,r6,72
 800bc1c:	01420074 	movhi	r5,2049
 800bc20:	29789e04 	addi	r5,r5,-7560
 800bc24:	01020074 	movhi	r4,2049
 800bc28:	21001204 	addi	r4,r4,72
 800bc2c:	800bb9c0 	call	800bb9c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800bc30:	01820034 	movhi	r6,2048
 800bc34:	31808c04 	addi	r6,r6,560
 800bc38:	01420034 	movhi	r5,2048
 800bc3c:	29400804 	addi	r5,r5,32
 800bc40:	01020034 	movhi	r4,2048
 800bc44:	21000804 	addi	r4,r4,32
 800bc48:	800bb9c0 	call	800bb9c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800bc4c:	01820074 	movhi	r6,2049
 800bc50:	31b89e04 	addi	r6,r6,-7560
 800bc54:	01420074 	movhi	r5,2049
 800bc58:	2977d604 	addi	r5,r5,-8360
 800bc5c:	01020074 	movhi	r4,2049
 800bc60:	2137d604 	addi	r4,r4,-8360
 800bc64:	800bb9c0 	call	800bb9c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800bc68:	800cdf00 	call	800cdf0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800bc6c:	800cfdc0 	call	800cfdc <alt_icache_flush_all>
}
 800bc70:	0001883a 	nop
 800bc74:	e037883a 	mov	sp,fp
 800bc78:	dfc00117 	ldw	ra,4(sp)
 800bc7c:	df000017 	ldw	fp,0(sp)
 800bc80:	dec00204 	addi	sp,sp,8
 800bc84:	f800283a 	ret

0800bc88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800bc88:	defffd04 	addi	sp,sp,-12
 800bc8c:	dfc00215 	stw	ra,8(sp)
 800bc90:	df000115 	stw	fp,4(sp)
 800bc94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800bc98:	0009883a 	mov	r4,zero
 800bc9c:	800be600 	call	800be60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800bca0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800bca4:	800be980 	call	800be98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800bca8:	01820074 	movhi	r6,2049
 800bcac:	31b89104 	addi	r6,r6,-7612
 800bcb0:	01420074 	movhi	r5,2049
 800bcb4:	29789104 	addi	r5,r5,-7612
 800bcb8:	01020074 	movhi	r4,2049
 800bcbc:	21389104 	addi	r4,r4,-7612
 800bcc0:	800d3800 	call	800d380 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800bcc4:	800cf1c0 	call	800cf1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800bcc8:	01020074 	movhi	r4,2049
 800bccc:	2133df04 	addi	r4,r4,-12420
 800bcd0:	800dbc40 	call	800dbc4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800bcd4:	d0a78c17 	ldw	r2,-25040(gp)
 800bcd8:	d0e78d17 	ldw	r3,-25036(gp)
 800bcdc:	d1278e17 	ldw	r4,-25032(gp)
 800bce0:	200d883a 	mov	r6,r4
 800bce4:	180b883a 	mov	r5,r3
 800bce8:	1009883a 	mov	r4,r2
 800bcec:	800026c0 	call	800026c <main>
 800bcf0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800bcf4:	01000044 	movi	r4,1
 800bcf8:	800cd180 	call	800cd18 <close>
  exit (result);
 800bcfc:	e13fff17 	ldw	r4,-4(fp)
 800bd00:	800dbd80 	call	800dbd8 <exit>

0800bd04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800bd04:	defffe04 	addi	sp,sp,-8
 800bd08:	df000115 	stw	fp,4(sp)
 800bd0c:	df000104 	addi	fp,sp,4
 800bd10:	e13fff15 	stw	r4,-4(fp)
}
 800bd14:	0001883a 	nop
 800bd18:	e037883a 	mov	sp,fp
 800bd1c:	df000017 	ldw	fp,0(sp)
 800bd20:	dec00104 	addi	sp,sp,4
 800bd24:	f800283a 	ret

0800bd28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800bd28:	defffe04 	addi	sp,sp,-8
 800bd2c:	df000115 	stw	fp,4(sp)
 800bd30:	df000104 	addi	fp,sp,4
 800bd34:	e13fff15 	stw	r4,-4(fp)
}
 800bd38:	0001883a 	nop
 800bd3c:	e037883a 	mov	sp,fp
 800bd40:	df000017 	ldw	fp,0(sp)
 800bd44:	dec00104 	addi	sp,sp,4
 800bd48:	f800283a 	ret

0800bd4c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800bd4c:	defff904 	addi	sp,sp,-28
 800bd50:	df000615 	stw	fp,24(sp)
 800bd54:	df000604 	addi	fp,sp,24
 800bd58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800bd5c:	0005303a 	rdctl	r2,status
 800bd60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bd64:	e0fffe17 	ldw	r3,-8(fp)
 800bd68:	00bfff84 	movi	r2,-2
 800bd6c:	1884703a 	and	r2,r3,r2
 800bd70:	1001703a 	wrctl	status,r2
  
  return context;
 800bd74:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800bd78:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800bd7c:	d0a00717 	ldw	r2,-32740(gp)
 800bd80:	10c000c4 	addi	r3,r2,3
 800bd84:	00bfff04 	movi	r2,-4
 800bd88:	1884703a 	and	r2,r3,r2
 800bd8c:	d0a00715 	stw	r2,-32740(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800bd90:	d0e00717 	ldw	r3,-32740(gp)
 800bd94:	e0bfff17 	ldw	r2,-4(fp)
 800bd98:	1887883a 	add	r3,r3,r2
 800bd9c:	00830034 	movhi	r2,3072
 800bda0:	10800004 	addi	r2,r2,0
 800bda4:	10c0062e 	bgeu	r2,r3,800bdc0 <sbrk+0x74>
 800bda8:	e0bffb17 	ldw	r2,-20(fp)
 800bdac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800bdb0:	e0bffa17 	ldw	r2,-24(fp)
 800bdb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800bdb8:	00bfffc4 	movi	r2,-1
 800bdbc:	00000b06 	br	800bdec <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800bdc0:	d0a00717 	ldw	r2,-32740(gp)
 800bdc4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800bdc8:	d0e00717 	ldw	r3,-32740(gp)
 800bdcc:	e0bfff17 	ldw	r2,-4(fp)
 800bdd0:	1885883a 	add	r2,r3,r2
 800bdd4:	d0a00715 	stw	r2,-32740(gp)
 800bdd8:	e0bffb17 	ldw	r2,-20(fp)
 800bddc:	e0bffc15 	stw	r2,-16(fp)
 800bde0:	e0bffc17 	ldw	r2,-16(fp)
 800bde4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800bde8:	e0bffd17 	ldw	r2,-12(fp)
} 
 800bdec:	e037883a 	mov	sp,fp
 800bdf0:	df000017 	ldw	fp,0(sp)
 800bdf4:	dec00104 	addi	sp,sp,4
 800bdf8:	f800283a 	ret

0800bdfc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800bdfc:	defffd04 	addi	sp,sp,-12
 800be00:	dfc00215 	stw	ra,8(sp)
 800be04:	df000115 	stw	fp,4(sp)
 800be08:	df000104 	addi	fp,sp,4
 800be0c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800be10:	e13fff17 	ldw	r4,-4(fp)
 800be14:	800cb840 	call	800cb84 <alt_busy_sleep>
}
 800be18:	e037883a 	mov	sp,fp
 800be1c:	dfc00117 	ldw	ra,4(sp)
 800be20:	df000017 	ldw	fp,0(sp)
 800be24:	dec00204 	addi	sp,sp,8
 800be28:	f800283a 	ret

0800be2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800be2c:	defffd04 	addi	sp,sp,-12
 800be30:	dfc00215 	stw	ra,8(sp)
 800be34:	df000115 	stw	fp,4(sp)
 800be38:	df000104 	addi	fp,sp,4
 800be3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800be40:	d1600a04 	addi	r5,gp,-32728
 800be44:	e13fff17 	ldw	r4,-4(fp)
 800be48:	800ce780 	call	800ce78 <alt_dev_llist_insert>
}
 800be4c:	e037883a 	mov	sp,fp
 800be50:	dfc00117 	ldw	ra,4(sp)
 800be54:	df000017 	ldw	fp,0(sp)
 800be58:	dec00204 	addi	sp,sp,8
 800be5c:	f800283a 	ret

0800be60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800be60:	defffd04 	addi	sp,sp,-12
 800be64:	dfc00215 	stw	ra,8(sp)
 800be68:	df000115 	stw	fp,4(sp)
 800be6c:	df000104 	addi	fp,sp,4
 800be70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800be74:	800d8a80 	call	800d8a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800be78:	00800044 	movi	r2,1
 800be7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800be80:	0001883a 	nop
 800be84:	e037883a 	mov	sp,fp
 800be88:	dfc00117 	ldw	ra,4(sp)
 800be8c:	df000017 	ldw	fp,0(sp)
 800be90:	dec00204 	addi	sp,sp,8
 800be94:	f800283a 	ret

0800be98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800be98:	defffe04 	addi	sp,sp,-8
 800be9c:	dfc00115 	stw	ra,4(sp)
 800bea0:	df000015 	stw	fp,0(sp)
 800bea4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800bea8:	01c0fa04 	movi	r7,1000
 800beac:	01800084 	movi	r6,2
 800beb0:	000b883a 	mov	r5,zero
 800beb4:	01001004 	movi	r4,64
 800beb8:	800c9dc0 	call	800c9dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800bebc:	01800044 	movi	r6,1
 800bec0:	000b883a 	mov	r5,zero
 800bec4:	01020074 	movhi	r4,2049
 800bec8:	213b8904 	addi	r4,r4,-4572
 800becc:	800c0600 	call	800c060 <altera_avalon_jtag_uart_init>
 800bed0:	01020074 	movhi	r4,2049
 800bed4:	213b7f04 	addi	r4,r4,-4612
 800bed8:	800be2c0 	call	800be2c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800bedc:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800bee0:	0001883a 	nop
}
 800bee4:	0001883a 	nop
 800bee8:	e037883a 	mov	sp,fp
 800beec:	dfc00117 	ldw	ra,4(sp)
 800bef0:	df000017 	ldw	fp,0(sp)
 800bef4:	dec00204 	addi	sp,sp,8
 800bef8:	f800283a 	ret

0800befc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800befc:	defffa04 	addi	sp,sp,-24
 800bf00:	dfc00515 	stw	ra,20(sp)
 800bf04:	df000415 	stw	fp,16(sp)
 800bf08:	df000404 	addi	fp,sp,16
 800bf0c:	e13ffd15 	stw	r4,-12(fp)
 800bf10:	e17ffe15 	stw	r5,-8(fp)
 800bf14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bf18:	e0bffd17 	ldw	r2,-12(fp)
 800bf1c:	10800017 	ldw	r2,0(r2)
 800bf20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800bf24:	e0bffc17 	ldw	r2,-16(fp)
 800bf28:	10c00a04 	addi	r3,r2,40
 800bf2c:	e0bffd17 	ldw	r2,-12(fp)
 800bf30:	10800217 	ldw	r2,8(r2)
 800bf34:	100f883a 	mov	r7,r2
 800bf38:	e1bfff17 	ldw	r6,-4(fp)
 800bf3c:	e17ffe17 	ldw	r5,-8(fp)
 800bf40:	1809883a 	mov	r4,r3
 800bf44:	800c5240 	call	800c524 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800bf48:	e037883a 	mov	sp,fp
 800bf4c:	dfc00117 	ldw	ra,4(sp)
 800bf50:	df000017 	ldw	fp,0(sp)
 800bf54:	dec00204 	addi	sp,sp,8
 800bf58:	f800283a 	ret

0800bf5c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800bf5c:	defffa04 	addi	sp,sp,-24
 800bf60:	dfc00515 	stw	ra,20(sp)
 800bf64:	df000415 	stw	fp,16(sp)
 800bf68:	df000404 	addi	fp,sp,16
 800bf6c:	e13ffd15 	stw	r4,-12(fp)
 800bf70:	e17ffe15 	stw	r5,-8(fp)
 800bf74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bf78:	e0bffd17 	ldw	r2,-12(fp)
 800bf7c:	10800017 	ldw	r2,0(r2)
 800bf80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800bf84:	e0bffc17 	ldw	r2,-16(fp)
 800bf88:	10c00a04 	addi	r3,r2,40
 800bf8c:	e0bffd17 	ldw	r2,-12(fp)
 800bf90:	10800217 	ldw	r2,8(r2)
 800bf94:	100f883a 	mov	r7,r2
 800bf98:	e1bfff17 	ldw	r6,-4(fp)
 800bf9c:	e17ffe17 	ldw	r5,-8(fp)
 800bfa0:	1809883a 	mov	r4,r3
 800bfa4:	800c7400 	call	800c740 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800bfa8:	e037883a 	mov	sp,fp
 800bfac:	dfc00117 	ldw	ra,4(sp)
 800bfb0:	df000017 	ldw	fp,0(sp)
 800bfb4:	dec00204 	addi	sp,sp,8
 800bfb8:	f800283a 	ret

0800bfbc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800bfbc:	defffc04 	addi	sp,sp,-16
 800bfc0:	dfc00315 	stw	ra,12(sp)
 800bfc4:	df000215 	stw	fp,8(sp)
 800bfc8:	df000204 	addi	fp,sp,8
 800bfcc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bfd0:	e0bfff17 	ldw	r2,-4(fp)
 800bfd4:	10800017 	ldw	r2,0(r2)
 800bfd8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800bfdc:	e0bffe17 	ldw	r2,-8(fp)
 800bfe0:	10c00a04 	addi	r3,r2,40
 800bfe4:	e0bfff17 	ldw	r2,-4(fp)
 800bfe8:	10800217 	ldw	r2,8(r2)
 800bfec:	100b883a 	mov	r5,r2
 800bff0:	1809883a 	mov	r4,r3
 800bff4:	800c3cc0 	call	800c3cc <altera_avalon_jtag_uart_close>
}
 800bff8:	e037883a 	mov	sp,fp
 800bffc:	dfc00117 	ldw	ra,4(sp)
 800c000:	df000017 	ldw	fp,0(sp)
 800c004:	dec00204 	addi	sp,sp,8
 800c008:	f800283a 	ret

0800c00c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800c00c:	defffa04 	addi	sp,sp,-24
 800c010:	dfc00515 	stw	ra,20(sp)
 800c014:	df000415 	stw	fp,16(sp)
 800c018:	df000404 	addi	fp,sp,16
 800c01c:	e13ffd15 	stw	r4,-12(fp)
 800c020:	e17ffe15 	stw	r5,-8(fp)
 800c024:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800c028:	e0bffd17 	ldw	r2,-12(fp)
 800c02c:	10800017 	ldw	r2,0(r2)
 800c030:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800c034:	e0bffc17 	ldw	r2,-16(fp)
 800c038:	10800a04 	addi	r2,r2,40
 800c03c:	e1bfff17 	ldw	r6,-4(fp)
 800c040:	e17ffe17 	ldw	r5,-8(fp)
 800c044:	1009883a 	mov	r4,r2
 800c048:	800c4340 	call	800c434 <altera_avalon_jtag_uart_ioctl>
}
 800c04c:	e037883a 	mov	sp,fp
 800c050:	dfc00117 	ldw	ra,4(sp)
 800c054:	df000017 	ldw	fp,0(sp)
 800c058:	dec00204 	addi	sp,sp,8
 800c05c:	f800283a 	ret

0800c060 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800c060:	defffa04 	addi	sp,sp,-24
 800c064:	dfc00515 	stw	ra,20(sp)
 800c068:	df000415 	stw	fp,16(sp)
 800c06c:	df000404 	addi	fp,sp,16
 800c070:	e13ffd15 	stw	r4,-12(fp)
 800c074:	e17ffe15 	stw	r5,-8(fp)
 800c078:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c07c:	e0bffd17 	ldw	r2,-12(fp)
 800c080:	00c00044 	movi	r3,1
 800c084:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800c088:	e0bffd17 	ldw	r2,-12(fp)
 800c08c:	10800017 	ldw	r2,0(r2)
 800c090:	10800104 	addi	r2,r2,4
 800c094:	1007883a 	mov	r3,r2
 800c098:	e0bffd17 	ldw	r2,-12(fp)
 800c09c:	10800817 	ldw	r2,32(r2)
 800c0a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800c0a4:	e0bffe17 	ldw	r2,-8(fp)
 800c0a8:	e0ffff17 	ldw	r3,-4(fp)
 800c0ac:	d8000015 	stw	zero,0(sp)
 800c0b0:	e1fffd17 	ldw	r7,-12(fp)
 800c0b4:	01820074 	movhi	r6,2049
 800c0b8:	31b04804 	addi	r6,r6,-16096
 800c0bc:	180b883a 	mov	r5,r3
 800c0c0:	1009883a 	mov	r4,r2
 800c0c4:	800cffc0 	call	800cffc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800c0c8:	e0bffd17 	ldw	r2,-12(fp)
 800c0cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800c0d0:	e0bffd17 	ldw	r2,-12(fp)
 800c0d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800c0d8:	d0e79017 	ldw	r3,-25024(gp)
 800c0dc:	e1fffd17 	ldw	r7,-12(fp)
 800c0e0:	01820074 	movhi	r6,2049
 800c0e4:	31b0cb04 	addi	r6,r6,-15572
 800c0e8:	180b883a 	mov	r5,r3
 800c0ec:	1009883a 	mov	r4,r2
 800c0f0:	800ca580 	call	800ca58 <alt_alarm_start>
 800c0f4:	1000040e 	bge	r2,zero,800c108 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800c0f8:	e0fffd17 	ldw	r3,-12(fp)
 800c0fc:	00a00034 	movhi	r2,32768
 800c100:	10bfffc4 	addi	r2,r2,-1
 800c104:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800c108:	0001883a 	nop
 800c10c:	e037883a 	mov	sp,fp
 800c110:	dfc00117 	ldw	ra,4(sp)
 800c114:	df000017 	ldw	fp,0(sp)
 800c118:	dec00204 	addi	sp,sp,8
 800c11c:	f800283a 	ret

0800c120 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800c120:	defff804 	addi	sp,sp,-32
 800c124:	df000715 	stw	fp,28(sp)
 800c128:	df000704 	addi	fp,sp,28
 800c12c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800c130:	e0bfff17 	ldw	r2,-4(fp)
 800c134:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800c138:	e0bffb17 	ldw	r2,-20(fp)
 800c13c:	10800017 	ldw	r2,0(r2)
 800c140:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c144:	e0bffc17 	ldw	r2,-16(fp)
 800c148:	10800104 	addi	r2,r2,4
 800c14c:	10800037 	ldwio	r2,0(r2)
 800c150:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800c154:	e0bffd17 	ldw	r2,-12(fp)
 800c158:	1080c00c 	andi	r2,r2,768
 800c15c:	10006d26 	beq	r2,zero,800c314 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800c160:	e0bffd17 	ldw	r2,-12(fp)
 800c164:	1080400c 	andi	r2,r2,256
 800c168:	10003526 	beq	r2,zero,800c240 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800c16c:	00800074 	movhi	r2,1
 800c170:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c174:	e0bffb17 	ldw	r2,-20(fp)
 800c178:	10800a17 	ldw	r2,40(r2)
 800c17c:	10800044 	addi	r2,r2,1
 800c180:	1081ffcc 	andi	r2,r2,2047
 800c184:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800c188:	e0bffb17 	ldw	r2,-20(fp)
 800c18c:	10c00b17 	ldw	r3,44(r2)
 800c190:	e0bffe17 	ldw	r2,-8(fp)
 800c194:	18801526 	beq	r3,r2,800c1ec <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800c198:	e0bffc17 	ldw	r2,-16(fp)
 800c19c:	10800037 	ldwio	r2,0(r2)
 800c1a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800c1a4:	e0bff917 	ldw	r2,-28(fp)
 800c1a8:	10a0000c 	andi	r2,r2,32768
 800c1ac:	10001126 	beq	r2,zero,800c1f4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800c1b0:	e0bffb17 	ldw	r2,-20(fp)
 800c1b4:	10800a17 	ldw	r2,40(r2)
 800c1b8:	e0fff917 	ldw	r3,-28(fp)
 800c1bc:	1809883a 	mov	r4,r3
 800c1c0:	e0fffb17 	ldw	r3,-20(fp)
 800c1c4:	1885883a 	add	r2,r3,r2
 800c1c8:	10800e04 	addi	r2,r2,56
 800c1cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c1d0:	e0bffb17 	ldw	r2,-20(fp)
 800c1d4:	10800a17 	ldw	r2,40(r2)
 800c1d8:	10800044 	addi	r2,r2,1
 800c1dc:	10c1ffcc 	andi	r3,r2,2047
 800c1e0:	e0bffb17 	ldw	r2,-20(fp)
 800c1e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800c1e8:	003fe206 	br	800c174 <__alt_data_end+0xfc00c174>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800c1ec:	0001883a 	nop
 800c1f0:	00000106 	br	800c1f8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800c1f4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800c1f8:	e0bff917 	ldw	r2,-28(fp)
 800c1fc:	10bfffec 	andhi	r2,r2,65535
 800c200:	10000f26 	beq	r2,zero,800c240 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c204:	e0bffb17 	ldw	r2,-20(fp)
 800c208:	10c00817 	ldw	r3,32(r2)
 800c20c:	00bfff84 	movi	r2,-2
 800c210:	1886703a 	and	r3,r3,r2
 800c214:	e0bffb17 	ldw	r2,-20(fp)
 800c218:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800c21c:	e0bffc17 	ldw	r2,-16(fp)
 800c220:	10800104 	addi	r2,r2,4
 800c224:	1007883a 	mov	r3,r2
 800c228:	e0bffb17 	ldw	r2,-20(fp)
 800c22c:	10800817 	ldw	r2,32(r2)
 800c230:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c234:	e0bffc17 	ldw	r2,-16(fp)
 800c238:	10800104 	addi	r2,r2,4
 800c23c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800c240:	e0bffd17 	ldw	r2,-12(fp)
 800c244:	1080800c 	andi	r2,r2,512
 800c248:	103fbe26 	beq	r2,zero,800c144 <__alt_data_end+0xfc00c144>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800c24c:	e0bffd17 	ldw	r2,-12(fp)
 800c250:	1004d43a 	srli	r2,r2,16
 800c254:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c258:	00001406 	br	800c2ac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800c25c:	e0bffc17 	ldw	r2,-16(fp)
 800c260:	e0fffb17 	ldw	r3,-20(fp)
 800c264:	18c00d17 	ldw	r3,52(r3)
 800c268:	e13ffb17 	ldw	r4,-20(fp)
 800c26c:	20c7883a 	add	r3,r4,r3
 800c270:	18c20e04 	addi	r3,r3,2104
 800c274:	18c00003 	ldbu	r3,0(r3)
 800c278:	18c03fcc 	andi	r3,r3,255
 800c27c:	18c0201c 	xori	r3,r3,128
 800c280:	18ffe004 	addi	r3,r3,-128
 800c284:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c288:	e0bffb17 	ldw	r2,-20(fp)
 800c28c:	10800d17 	ldw	r2,52(r2)
 800c290:	10800044 	addi	r2,r2,1
 800c294:	10c1ffcc 	andi	r3,r2,2047
 800c298:	e0bffb17 	ldw	r2,-20(fp)
 800c29c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800c2a0:	e0bffa17 	ldw	r2,-24(fp)
 800c2a4:	10bfffc4 	addi	r2,r2,-1
 800c2a8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c2ac:	e0bffa17 	ldw	r2,-24(fp)
 800c2b0:	10000526 	beq	r2,zero,800c2c8 <altera_avalon_jtag_uart_irq+0x1a8>
 800c2b4:	e0bffb17 	ldw	r2,-20(fp)
 800c2b8:	10c00d17 	ldw	r3,52(r2)
 800c2bc:	e0bffb17 	ldw	r2,-20(fp)
 800c2c0:	10800c17 	ldw	r2,48(r2)
 800c2c4:	18bfe51e 	bne	r3,r2,800c25c <__alt_data_end+0xfc00c25c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800c2c8:	e0bffa17 	ldw	r2,-24(fp)
 800c2cc:	103f9d26 	beq	r2,zero,800c144 <__alt_data_end+0xfc00c144>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c2d0:	e0bffb17 	ldw	r2,-20(fp)
 800c2d4:	10c00817 	ldw	r3,32(r2)
 800c2d8:	00bfff44 	movi	r2,-3
 800c2dc:	1886703a 	and	r3,r3,r2
 800c2e0:	e0bffb17 	ldw	r2,-20(fp)
 800c2e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c2e8:	e0bffb17 	ldw	r2,-20(fp)
 800c2ec:	10800017 	ldw	r2,0(r2)
 800c2f0:	10800104 	addi	r2,r2,4
 800c2f4:	1007883a 	mov	r3,r2
 800c2f8:	e0bffb17 	ldw	r2,-20(fp)
 800c2fc:	10800817 	ldw	r2,32(r2)
 800c300:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c304:	e0bffc17 	ldw	r2,-16(fp)
 800c308:	10800104 	addi	r2,r2,4
 800c30c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800c310:	003f8c06 	br	800c144 <__alt_data_end+0xfc00c144>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800c314:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800c318:	0001883a 	nop
 800c31c:	e037883a 	mov	sp,fp
 800c320:	df000017 	ldw	fp,0(sp)
 800c324:	dec00104 	addi	sp,sp,4
 800c328:	f800283a 	ret

0800c32c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800c32c:	defff804 	addi	sp,sp,-32
 800c330:	df000715 	stw	fp,28(sp)
 800c334:	df000704 	addi	fp,sp,28
 800c338:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800c33c:	e0bffb17 	ldw	r2,-20(fp)
 800c340:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800c344:	e0bff917 	ldw	r2,-28(fp)
 800c348:	10800017 	ldw	r2,0(r2)
 800c34c:	10800104 	addi	r2,r2,4
 800c350:	10800037 	ldwio	r2,0(r2)
 800c354:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800c358:	e0bffa17 	ldw	r2,-24(fp)
 800c35c:	1081000c 	andi	r2,r2,1024
 800c360:	10000b26 	beq	r2,zero,800c390 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800c364:	e0bff917 	ldw	r2,-28(fp)
 800c368:	10800017 	ldw	r2,0(r2)
 800c36c:	10800104 	addi	r2,r2,4
 800c370:	1007883a 	mov	r3,r2
 800c374:	e0bff917 	ldw	r2,-28(fp)
 800c378:	10800817 	ldw	r2,32(r2)
 800c37c:	10810014 	ori	r2,r2,1024
 800c380:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800c384:	e0bff917 	ldw	r2,-28(fp)
 800c388:	10000915 	stw	zero,36(r2)
 800c38c:	00000a06 	br	800c3b8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800c390:	e0bff917 	ldw	r2,-28(fp)
 800c394:	10c00917 	ldw	r3,36(r2)
 800c398:	00a00034 	movhi	r2,32768
 800c39c:	10bfff04 	addi	r2,r2,-4
 800c3a0:	10c00536 	bltu	r2,r3,800c3b8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800c3a4:	e0bff917 	ldw	r2,-28(fp)
 800c3a8:	10800917 	ldw	r2,36(r2)
 800c3ac:	10c00044 	addi	r3,r2,1
 800c3b0:	e0bff917 	ldw	r2,-28(fp)
 800c3b4:	10c00915 	stw	r3,36(r2)
 800c3b8:	d0a79017 	ldw	r2,-25024(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800c3bc:	e037883a 	mov	sp,fp
 800c3c0:	df000017 	ldw	fp,0(sp)
 800c3c4:	dec00104 	addi	sp,sp,4
 800c3c8:	f800283a 	ret

0800c3cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800c3cc:	defffd04 	addi	sp,sp,-12
 800c3d0:	df000215 	stw	fp,8(sp)
 800c3d4:	df000204 	addi	fp,sp,8
 800c3d8:	e13ffe15 	stw	r4,-8(fp)
 800c3dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c3e0:	00000506 	br	800c3f8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800c3e4:	e0bfff17 	ldw	r2,-4(fp)
 800c3e8:	1090000c 	andi	r2,r2,16384
 800c3ec:	10000226 	beq	r2,zero,800c3f8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800c3f0:	00bffd44 	movi	r2,-11
 800c3f4:	00000b06 	br	800c424 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c3f8:	e0bffe17 	ldw	r2,-8(fp)
 800c3fc:	10c00d17 	ldw	r3,52(r2)
 800c400:	e0bffe17 	ldw	r2,-8(fp)
 800c404:	10800c17 	ldw	r2,48(r2)
 800c408:	18800526 	beq	r3,r2,800c420 <altera_avalon_jtag_uart_close+0x54>
 800c40c:	e0bffe17 	ldw	r2,-8(fp)
 800c410:	10c00917 	ldw	r3,36(r2)
 800c414:	e0bffe17 	ldw	r2,-8(fp)
 800c418:	10800117 	ldw	r2,4(r2)
 800c41c:	18bff136 	bltu	r3,r2,800c3e4 <__alt_data_end+0xfc00c3e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800c420:	0005883a 	mov	r2,zero
}
 800c424:	e037883a 	mov	sp,fp
 800c428:	df000017 	ldw	fp,0(sp)
 800c42c:	dec00104 	addi	sp,sp,4
 800c430:	f800283a 	ret

0800c434 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800c434:	defffa04 	addi	sp,sp,-24
 800c438:	df000515 	stw	fp,20(sp)
 800c43c:	df000504 	addi	fp,sp,20
 800c440:	e13ffd15 	stw	r4,-12(fp)
 800c444:	e17ffe15 	stw	r5,-8(fp)
 800c448:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800c44c:	00bff9c4 	movi	r2,-25
 800c450:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800c454:	e0bffe17 	ldw	r2,-8(fp)
 800c458:	10da8060 	cmpeqi	r3,r2,27137
 800c45c:	1800031e 	bne	r3,zero,800c46c <altera_avalon_jtag_uart_ioctl+0x38>
 800c460:	109a80a0 	cmpeqi	r2,r2,27138
 800c464:	1000181e 	bne	r2,zero,800c4c8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800c468:	00002906 	br	800c510 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800c46c:	e0bffd17 	ldw	r2,-12(fp)
 800c470:	10c00117 	ldw	r3,4(r2)
 800c474:	00a00034 	movhi	r2,32768
 800c478:	10bfffc4 	addi	r2,r2,-1
 800c47c:	18802126 	beq	r3,r2,800c504 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800c480:	e0bfff17 	ldw	r2,-4(fp)
 800c484:	10800017 	ldw	r2,0(r2)
 800c488:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800c48c:	e0bffc17 	ldw	r2,-16(fp)
 800c490:	10800090 	cmplti	r2,r2,2
 800c494:	1000061e 	bne	r2,zero,800c4b0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800c498:	e0fffc17 	ldw	r3,-16(fp)
 800c49c:	00a00034 	movhi	r2,32768
 800c4a0:	10bfffc4 	addi	r2,r2,-1
 800c4a4:	18800226 	beq	r3,r2,800c4b0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800c4a8:	e0bffc17 	ldw	r2,-16(fp)
 800c4ac:	00000206 	br	800c4b8 <altera_avalon_jtag_uart_ioctl+0x84>
 800c4b0:	00a00034 	movhi	r2,32768
 800c4b4:	10bfff84 	addi	r2,r2,-2
 800c4b8:	e0fffd17 	ldw	r3,-12(fp)
 800c4bc:	18800115 	stw	r2,4(r3)
      rc = 0;
 800c4c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c4c4:	00000f06 	br	800c504 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800c4c8:	e0bffd17 	ldw	r2,-12(fp)
 800c4cc:	10c00117 	ldw	r3,4(r2)
 800c4d0:	00a00034 	movhi	r2,32768
 800c4d4:	10bfffc4 	addi	r2,r2,-1
 800c4d8:	18800c26 	beq	r3,r2,800c50c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800c4dc:	e0bffd17 	ldw	r2,-12(fp)
 800c4e0:	10c00917 	ldw	r3,36(r2)
 800c4e4:	e0bffd17 	ldw	r2,-12(fp)
 800c4e8:	10800117 	ldw	r2,4(r2)
 800c4ec:	1885803a 	cmpltu	r2,r3,r2
 800c4f0:	10c03fcc 	andi	r3,r2,255
 800c4f4:	e0bfff17 	ldw	r2,-4(fp)
 800c4f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800c4fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c500:	00000206 	br	800c50c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800c504:	0001883a 	nop
 800c508:	00000106 	br	800c510 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800c50c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800c510:	e0bffb17 	ldw	r2,-20(fp)
}
 800c514:	e037883a 	mov	sp,fp
 800c518:	df000017 	ldw	fp,0(sp)
 800c51c:	dec00104 	addi	sp,sp,4
 800c520:	f800283a 	ret

0800c524 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800c524:	defff304 	addi	sp,sp,-52
 800c528:	dfc00c15 	stw	ra,48(sp)
 800c52c:	df000b15 	stw	fp,44(sp)
 800c530:	df000b04 	addi	fp,sp,44
 800c534:	e13ffc15 	stw	r4,-16(fp)
 800c538:	e17ffd15 	stw	r5,-12(fp)
 800c53c:	e1bffe15 	stw	r6,-8(fp)
 800c540:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800c544:	e0bffd17 	ldw	r2,-12(fp)
 800c548:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c54c:	00004706 	br	800c66c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800c550:	e0bffc17 	ldw	r2,-16(fp)
 800c554:	10800a17 	ldw	r2,40(r2)
 800c558:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800c55c:	e0bffc17 	ldw	r2,-16(fp)
 800c560:	10800b17 	ldw	r2,44(r2)
 800c564:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800c568:	e0fff717 	ldw	r3,-36(fp)
 800c56c:	e0bff817 	ldw	r2,-32(fp)
 800c570:	18800536 	bltu	r3,r2,800c588 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800c574:	e0fff717 	ldw	r3,-36(fp)
 800c578:	e0bff817 	ldw	r2,-32(fp)
 800c57c:	1885c83a 	sub	r2,r3,r2
 800c580:	e0bff615 	stw	r2,-40(fp)
 800c584:	00000406 	br	800c598 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800c588:	00c20004 	movi	r3,2048
 800c58c:	e0bff817 	ldw	r2,-32(fp)
 800c590:	1885c83a 	sub	r2,r3,r2
 800c594:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c598:	e0bff617 	ldw	r2,-40(fp)
 800c59c:	10001e26 	beq	r2,zero,800c618 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800c5a0:	e0fffe17 	ldw	r3,-8(fp)
 800c5a4:	e0bff617 	ldw	r2,-40(fp)
 800c5a8:	1880022e 	bgeu	r3,r2,800c5b4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800c5ac:	e0bffe17 	ldw	r2,-8(fp)
 800c5b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800c5b4:	e0bffc17 	ldw	r2,-16(fp)
 800c5b8:	10c00e04 	addi	r3,r2,56
 800c5bc:	e0bff817 	ldw	r2,-32(fp)
 800c5c0:	1885883a 	add	r2,r3,r2
 800c5c4:	e1bff617 	ldw	r6,-40(fp)
 800c5c8:	100b883a 	mov	r5,r2
 800c5cc:	e13ff517 	ldw	r4,-44(fp)
 800c5d0:	80050200 	call	8005020 <memcpy>
      ptr   += n;
 800c5d4:	e0fff517 	ldw	r3,-44(fp)
 800c5d8:	e0bff617 	ldw	r2,-40(fp)
 800c5dc:	1885883a 	add	r2,r3,r2
 800c5e0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800c5e4:	e0fffe17 	ldw	r3,-8(fp)
 800c5e8:	e0bff617 	ldw	r2,-40(fp)
 800c5ec:	1885c83a 	sub	r2,r3,r2
 800c5f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c5f4:	e0fff817 	ldw	r3,-32(fp)
 800c5f8:	e0bff617 	ldw	r2,-40(fp)
 800c5fc:	1885883a 	add	r2,r3,r2
 800c600:	10c1ffcc 	andi	r3,r2,2047
 800c604:	e0bffc17 	ldw	r2,-16(fp)
 800c608:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800c60c:	e0bffe17 	ldw	r2,-8(fp)
 800c610:	00bfcf16 	blt	zero,r2,800c550 <__alt_data_end+0xfc00c550>
 800c614:	00000106 	br	800c61c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800c618:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800c61c:	e0fff517 	ldw	r3,-44(fp)
 800c620:	e0bffd17 	ldw	r2,-12(fp)
 800c624:	1880141e 	bne	r3,r2,800c678 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800c628:	e0bfff17 	ldw	r2,-4(fp)
 800c62c:	1090000c 	andi	r2,r2,16384
 800c630:	1000131e 	bne	r2,zero,800c680 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800c634:	0001883a 	nop
 800c638:	e0bffc17 	ldw	r2,-16(fp)
 800c63c:	10c00a17 	ldw	r3,40(r2)
 800c640:	e0bff717 	ldw	r2,-36(fp)
 800c644:	1880051e 	bne	r3,r2,800c65c <altera_avalon_jtag_uart_read+0x138>
 800c648:	e0bffc17 	ldw	r2,-16(fp)
 800c64c:	10c00917 	ldw	r3,36(r2)
 800c650:	e0bffc17 	ldw	r2,-16(fp)
 800c654:	10800117 	ldw	r2,4(r2)
 800c658:	18bff736 	bltu	r3,r2,800c638 <__alt_data_end+0xfc00c638>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800c65c:	e0bffc17 	ldw	r2,-16(fp)
 800c660:	10c00a17 	ldw	r3,40(r2)
 800c664:	e0bff717 	ldw	r2,-36(fp)
 800c668:	18800726 	beq	r3,r2,800c688 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c66c:	e0bffe17 	ldw	r2,-8(fp)
 800c670:	00bfb716 	blt	zero,r2,800c550 <__alt_data_end+0xfc00c550>
 800c674:	00000506 	br	800c68c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800c678:	0001883a 	nop
 800c67c:	00000306 	br	800c68c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800c680:	0001883a 	nop
 800c684:	00000106 	br	800c68c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800c688:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800c68c:	e0fff517 	ldw	r3,-44(fp)
 800c690:	e0bffd17 	ldw	r2,-12(fp)
 800c694:	18801826 	beq	r3,r2,800c6f8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c698:	0005303a 	rdctl	r2,status
 800c69c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c6a0:	e0fffb17 	ldw	r3,-20(fp)
 800c6a4:	00bfff84 	movi	r2,-2
 800c6a8:	1884703a 	and	r2,r3,r2
 800c6ac:	1001703a 	wrctl	status,r2
  
  return context;
 800c6b0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800c6b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c6b8:	e0bffc17 	ldw	r2,-16(fp)
 800c6bc:	10800817 	ldw	r2,32(r2)
 800c6c0:	10c00054 	ori	r3,r2,1
 800c6c4:	e0bffc17 	ldw	r2,-16(fp)
 800c6c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c6cc:	e0bffc17 	ldw	r2,-16(fp)
 800c6d0:	10800017 	ldw	r2,0(r2)
 800c6d4:	10800104 	addi	r2,r2,4
 800c6d8:	1007883a 	mov	r3,r2
 800c6dc:	e0bffc17 	ldw	r2,-16(fp)
 800c6e0:	10800817 	ldw	r2,32(r2)
 800c6e4:	18800035 	stwio	r2,0(r3)
 800c6e8:	e0bffa17 	ldw	r2,-24(fp)
 800c6ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c6f0:	e0bff917 	ldw	r2,-28(fp)
 800c6f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800c6f8:	e0fff517 	ldw	r3,-44(fp)
 800c6fc:	e0bffd17 	ldw	r2,-12(fp)
 800c700:	18800426 	beq	r3,r2,800c714 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800c704:	e0fff517 	ldw	r3,-44(fp)
 800c708:	e0bffd17 	ldw	r2,-12(fp)
 800c70c:	1885c83a 	sub	r2,r3,r2
 800c710:	00000606 	br	800c72c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800c714:	e0bfff17 	ldw	r2,-4(fp)
 800c718:	1090000c 	andi	r2,r2,16384
 800c71c:	10000226 	beq	r2,zero,800c728 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800c720:	00bffd44 	movi	r2,-11
 800c724:	00000106 	br	800c72c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800c728:	00bffec4 	movi	r2,-5
}
 800c72c:	e037883a 	mov	sp,fp
 800c730:	dfc00117 	ldw	ra,4(sp)
 800c734:	df000017 	ldw	fp,0(sp)
 800c738:	dec00204 	addi	sp,sp,8
 800c73c:	f800283a 	ret

0800c740 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800c740:	defff304 	addi	sp,sp,-52
 800c744:	dfc00c15 	stw	ra,48(sp)
 800c748:	df000b15 	stw	fp,44(sp)
 800c74c:	df000b04 	addi	fp,sp,44
 800c750:	e13ffc15 	stw	r4,-16(fp)
 800c754:	e17ffd15 	stw	r5,-12(fp)
 800c758:	e1bffe15 	stw	r6,-8(fp)
 800c75c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800c760:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800c764:	e0bffd17 	ldw	r2,-12(fp)
 800c768:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800c76c:	00003706 	br	800c84c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800c770:	e0bffc17 	ldw	r2,-16(fp)
 800c774:	10800c17 	ldw	r2,48(r2)
 800c778:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800c77c:	e0bffc17 	ldw	r2,-16(fp)
 800c780:	10800d17 	ldw	r2,52(r2)
 800c784:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800c788:	e0fff917 	ldw	r3,-28(fp)
 800c78c:	e0bff517 	ldw	r2,-44(fp)
 800c790:	1880062e 	bgeu	r3,r2,800c7ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800c794:	e0fff517 	ldw	r3,-44(fp)
 800c798:	e0bff917 	ldw	r2,-28(fp)
 800c79c:	1885c83a 	sub	r2,r3,r2
 800c7a0:	10bfffc4 	addi	r2,r2,-1
 800c7a4:	e0bff615 	stw	r2,-40(fp)
 800c7a8:	00000b06 	br	800c7d8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800c7ac:	e0bff517 	ldw	r2,-44(fp)
 800c7b0:	10000526 	beq	r2,zero,800c7c8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800c7b4:	00c20004 	movi	r3,2048
 800c7b8:	e0bff917 	ldw	r2,-28(fp)
 800c7bc:	1885c83a 	sub	r2,r3,r2
 800c7c0:	e0bff615 	stw	r2,-40(fp)
 800c7c4:	00000406 	br	800c7d8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800c7c8:	00c1ffc4 	movi	r3,2047
 800c7cc:	e0bff917 	ldw	r2,-28(fp)
 800c7d0:	1885c83a 	sub	r2,r3,r2
 800c7d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c7d8:	e0bff617 	ldw	r2,-40(fp)
 800c7dc:	10001e26 	beq	r2,zero,800c858 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800c7e0:	e0fffe17 	ldw	r3,-8(fp)
 800c7e4:	e0bff617 	ldw	r2,-40(fp)
 800c7e8:	1880022e 	bgeu	r3,r2,800c7f4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800c7ec:	e0bffe17 	ldw	r2,-8(fp)
 800c7f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800c7f4:	e0bffc17 	ldw	r2,-16(fp)
 800c7f8:	10c20e04 	addi	r3,r2,2104
 800c7fc:	e0bff917 	ldw	r2,-28(fp)
 800c800:	1885883a 	add	r2,r3,r2
 800c804:	e1bff617 	ldw	r6,-40(fp)
 800c808:	e17ffd17 	ldw	r5,-12(fp)
 800c80c:	1009883a 	mov	r4,r2
 800c810:	80050200 	call	8005020 <memcpy>
      ptr   += n;
 800c814:	e0fffd17 	ldw	r3,-12(fp)
 800c818:	e0bff617 	ldw	r2,-40(fp)
 800c81c:	1885883a 	add	r2,r3,r2
 800c820:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800c824:	e0fffe17 	ldw	r3,-8(fp)
 800c828:	e0bff617 	ldw	r2,-40(fp)
 800c82c:	1885c83a 	sub	r2,r3,r2
 800c830:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c834:	e0fff917 	ldw	r3,-28(fp)
 800c838:	e0bff617 	ldw	r2,-40(fp)
 800c83c:	1885883a 	add	r2,r3,r2
 800c840:	10c1ffcc 	andi	r3,r2,2047
 800c844:	e0bffc17 	ldw	r2,-16(fp)
 800c848:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800c84c:	e0bffe17 	ldw	r2,-8(fp)
 800c850:	00bfc716 	blt	zero,r2,800c770 <__alt_data_end+0xfc00c770>
 800c854:	00000106 	br	800c85c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800c858:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c85c:	0005303a 	rdctl	r2,status
 800c860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c864:	e0fffb17 	ldw	r3,-20(fp)
 800c868:	00bfff84 	movi	r2,-2
 800c86c:	1884703a 	and	r2,r3,r2
 800c870:	1001703a 	wrctl	status,r2
  
  return context;
 800c874:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800c878:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c87c:	e0bffc17 	ldw	r2,-16(fp)
 800c880:	10800817 	ldw	r2,32(r2)
 800c884:	10c00094 	ori	r3,r2,2
 800c888:	e0bffc17 	ldw	r2,-16(fp)
 800c88c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c890:	e0bffc17 	ldw	r2,-16(fp)
 800c894:	10800017 	ldw	r2,0(r2)
 800c898:	10800104 	addi	r2,r2,4
 800c89c:	1007883a 	mov	r3,r2
 800c8a0:	e0bffc17 	ldw	r2,-16(fp)
 800c8a4:	10800817 	ldw	r2,32(r2)
 800c8a8:	18800035 	stwio	r2,0(r3)
 800c8ac:	e0bffa17 	ldw	r2,-24(fp)
 800c8b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c8b4:	e0bff817 	ldw	r2,-32(fp)
 800c8b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800c8bc:	e0bffe17 	ldw	r2,-8(fp)
 800c8c0:	0080100e 	bge	zero,r2,800c904 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800c8c4:	e0bfff17 	ldw	r2,-4(fp)
 800c8c8:	1090000c 	andi	r2,r2,16384
 800c8cc:	1000101e 	bne	r2,zero,800c910 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800c8d0:	0001883a 	nop
 800c8d4:	e0bffc17 	ldw	r2,-16(fp)
 800c8d8:	10c00d17 	ldw	r3,52(r2)
 800c8dc:	e0bff517 	ldw	r2,-44(fp)
 800c8e0:	1880051e 	bne	r3,r2,800c8f8 <altera_avalon_jtag_uart_write+0x1b8>
 800c8e4:	e0bffc17 	ldw	r2,-16(fp)
 800c8e8:	10c00917 	ldw	r3,36(r2)
 800c8ec:	e0bffc17 	ldw	r2,-16(fp)
 800c8f0:	10800117 	ldw	r2,4(r2)
 800c8f4:	18bff736 	bltu	r3,r2,800c8d4 <__alt_data_end+0xfc00c8d4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800c8f8:	e0bffc17 	ldw	r2,-16(fp)
 800c8fc:	10800917 	ldw	r2,36(r2)
 800c900:	1000051e 	bne	r2,zero,800c918 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800c904:	e0bffe17 	ldw	r2,-8(fp)
 800c908:	00bfd016 	blt	zero,r2,800c84c <__alt_data_end+0xfc00c84c>
 800c90c:	00000306 	br	800c91c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800c910:	0001883a 	nop
 800c914:	00000106 	br	800c91c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800c918:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800c91c:	e0fffd17 	ldw	r3,-12(fp)
 800c920:	e0bff717 	ldw	r2,-36(fp)
 800c924:	18800426 	beq	r3,r2,800c938 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800c928:	e0fffd17 	ldw	r3,-12(fp)
 800c92c:	e0bff717 	ldw	r2,-36(fp)
 800c930:	1885c83a 	sub	r2,r3,r2
 800c934:	00000606 	br	800c950 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800c938:	e0bfff17 	ldw	r2,-4(fp)
 800c93c:	1090000c 	andi	r2,r2,16384
 800c940:	10000226 	beq	r2,zero,800c94c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800c944:	00bffd44 	movi	r2,-11
 800c948:	00000106 	br	800c950 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800c94c:	00bffec4 	movi	r2,-5
}
 800c950:	e037883a 	mov	sp,fp
 800c954:	dfc00117 	ldw	ra,4(sp)
 800c958:	df000017 	ldw	fp,0(sp)
 800c95c:	dec00204 	addi	sp,sp,8
 800c960:	f800283a 	ret

0800c964 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800c964:	defffa04 	addi	sp,sp,-24
 800c968:	dfc00515 	stw	ra,20(sp)
 800c96c:	df000415 	stw	fp,16(sp)
 800c970:	df000404 	addi	fp,sp,16
 800c974:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800c978:	0007883a 	mov	r3,zero
 800c97c:	e0bfff17 	ldw	r2,-4(fp)
 800c980:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800c984:	e0bfff17 	ldw	r2,-4(fp)
 800c988:	10800104 	addi	r2,r2,4
 800c98c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c990:	0005303a 	rdctl	r2,status
 800c994:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c998:	e0fffd17 	ldw	r3,-12(fp)
 800c99c:	00bfff84 	movi	r2,-2
 800c9a0:	1884703a 	and	r2,r3,r2
 800c9a4:	1001703a 	wrctl	status,r2
  
  return context;
 800c9a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800c9ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800c9b0:	800d7a00 	call	800d7a0 <alt_tick>
 800c9b4:	e0bffc17 	ldw	r2,-16(fp)
 800c9b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c9bc:	e0bffe17 	ldw	r2,-8(fp)
 800c9c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800c9c4:	0001883a 	nop
 800c9c8:	e037883a 	mov	sp,fp
 800c9cc:	dfc00117 	ldw	ra,4(sp)
 800c9d0:	df000017 	ldw	fp,0(sp)
 800c9d4:	dec00204 	addi	sp,sp,8
 800c9d8:	f800283a 	ret

0800c9dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800c9dc:	defff804 	addi	sp,sp,-32
 800c9e0:	dfc00715 	stw	ra,28(sp)
 800c9e4:	df000615 	stw	fp,24(sp)
 800c9e8:	df000604 	addi	fp,sp,24
 800c9ec:	e13ffc15 	stw	r4,-16(fp)
 800c9f0:	e17ffd15 	stw	r5,-12(fp)
 800c9f4:	e1bffe15 	stw	r6,-8(fp)
 800c9f8:	e1ffff15 	stw	r7,-4(fp)
 800c9fc:	e0bfff17 	ldw	r2,-4(fp)
 800ca00:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800ca04:	d0a79017 	ldw	r2,-25024(gp)
 800ca08:	1000021e 	bne	r2,zero,800ca14 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800ca0c:	e0bffb17 	ldw	r2,-20(fp)
 800ca10:	d0a79015 	stw	r2,-25024(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800ca14:	e0bffc17 	ldw	r2,-16(fp)
 800ca18:	10800104 	addi	r2,r2,4
 800ca1c:	00c001c4 	movi	r3,7
 800ca20:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800ca24:	d8000015 	stw	zero,0(sp)
 800ca28:	e1fffc17 	ldw	r7,-16(fp)
 800ca2c:	01820074 	movhi	r6,2049
 800ca30:	31b25904 	addi	r6,r6,-13980
 800ca34:	e17ffe17 	ldw	r5,-8(fp)
 800ca38:	e13ffd17 	ldw	r4,-12(fp)
 800ca3c:	800cffc0 	call	800cffc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800ca40:	0001883a 	nop
 800ca44:	e037883a 	mov	sp,fp
 800ca48:	dfc00117 	ldw	ra,4(sp)
 800ca4c:	df000017 	ldw	fp,0(sp)
 800ca50:	dec00204 	addi	sp,sp,8
 800ca54:	f800283a 	ret

0800ca58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800ca58:	defff504 	addi	sp,sp,-44
 800ca5c:	df000a15 	stw	fp,40(sp)
 800ca60:	df000a04 	addi	fp,sp,40
 800ca64:	e13ffc15 	stw	r4,-16(fp)
 800ca68:	e17ffd15 	stw	r5,-12(fp)
 800ca6c:	e1bffe15 	stw	r6,-8(fp)
 800ca70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800ca74:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ca78:	d0a79017 	ldw	r2,-25024(gp)
  
  if (alt_ticks_per_second ())
 800ca7c:	10003c26 	beq	r2,zero,800cb70 <alt_alarm_start+0x118>
  {
    if (alarm)
 800ca80:	e0bffc17 	ldw	r2,-16(fp)
 800ca84:	10003826 	beq	r2,zero,800cb68 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800ca88:	e0bffc17 	ldw	r2,-16(fp)
 800ca8c:	e0fffe17 	ldw	r3,-8(fp)
 800ca90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ca94:	e0bffc17 	ldw	r2,-16(fp)
 800ca98:	e0ffff17 	ldw	r3,-4(fp)
 800ca9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800caa0:	0005303a 	rdctl	r2,status
 800caa4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800caa8:	e0fff917 	ldw	r3,-28(fp)
 800caac:	00bfff84 	movi	r2,-2
 800cab0:	1884703a 	and	r2,r3,r2
 800cab4:	1001703a 	wrctl	status,r2
  
  return context;
 800cab8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800cabc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800cac0:	d0a79117 	ldw	r2,-25020(gp)
      
      current_nticks = alt_nticks();
 800cac4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800cac8:	e0fffd17 	ldw	r3,-12(fp)
 800cacc:	e0bff617 	ldw	r2,-40(fp)
 800cad0:	1885883a 	add	r2,r3,r2
 800cad4:	10c00044 	addi	r3,r2,1
 800cad8:	e0bffc17 	ldw	r2,-16(fp)
 800cadc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800cae0:	e0bffc17 	ldw	r2,-16(fp)
 800cae4:	10c00217 	ldw	r3,8(r2)
 800cae8:	e0bff617 	ldw	r2,-40(fp)
 800caec:	1880042e 	bgeu	r3,r2,800cb00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800caf0:	e0bffc17 	ldw	r2,-16(fp)
 800caf4:	00c00044 	movi	r3,1
 800caf8:	10c00405 	stb	r3,16(r2)
 800cafc:	00000206 	br	800cb08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800cb00:	e0bffc17 	ldw	r2,-16(fp)
 800cb04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800cb08:	e0bffc17 	ldw	r2,-16(fp)
 800cb0c:	d0e00f04 	addi	r3,gp,-32708
 800cb10:	e0fffa15 	stw	r3,-24(fp)
 800cb14:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800cb18:	e0bffb17 	ldw	r2,-20(fp)
 800cb1c:	e0fffa17 	ldw	r3,-24(fp)
 800cb20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800cb24:	e0bffa17 	ldw	r2,-24(fp)
 800cb28:	10c00017 	ldw	r3,0(r2)
 800cb2c:	e0bffb17 	ldw	r2,-20(fp)
 800cb30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800cb34:	e0bffa17 	ldw	r2,-24(fp)
 800cb38:	10800017 	ldw	r2,0(r2)
 800cb3c:	e0fffb17 	ldw	r3,-20(fp)
 800cb40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800cb44:	e0bffa17 	ldw	r2,-24(fp)
 800cb48:	e0fffb17 	ldw	r3,-20(fp)
 800cb4c:	10c00015 	stw	r3,0(r2)
 800cb50:	e0bff817 	ldw	r2,-32(fp)
 800cb54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cb58:	e0bff717 	ldw	r2,-36(fp)
 800cb5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800cb60:	0005883a 	mov	r2,zero
 800cb64:	00000306 	br	800cb74 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800cb68:	00bffa84 	movi	r2,-22
 800cb6c:	00000106 	br	800cb74 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800cb70:	00bfde84 	movi	r2,-134
  }
}
 800cb74:	e037883a 	mov	sp,fp
 800cb78:	df000017 	ldw	fp,0(sp)
 800cb7c:	dec00104 	addi	sp,sp,4
 800cb80:	f800283a 	ret

0800cb84 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800cb84:	defffa04 	addi	sp,sp,-24
 800cb88:	dfc00515 	stw	ra,20(sp)
 800cb8c:	df000415 	stw	fp,16(sp)
 800cb90:	df000404 	addi	fp,sp,16
 800cb94:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800cb98:	00800244 	movi	r2,9
 800cb9c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800cba0:	014003f4 	movhi	r5,15
 800cba4:	29509004 	addi	r5,r5,16960
 800cba8:	e13ffd17 	ldw	r4,-12(fp)
 800cbac:	80008e80 	call	80008e8 <__mulsi3>
 800cbb0:	100b883a 	mov	r5,r2
 800cbb4:	0100bef4 	movhi	r4,763
 800cbb8:	213c2004 	addi	r4,r4,-3968
 800cbbc:	800082c0 	call	800082c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800cbc0:	100b883a 	mov	r5,r2
 800cbc4:	01200034 	movhi	r4,32768
 800cbc8:	213fffc4 	addi	r4,r4,-1
 800cbcc:	800082c0 	call	800082c <__udivsi3>
 800cbd0:	100b883a 	mov	r5,r2
 800cbd4:	e13fff17 	ldw	r4,-4(fp)
 800cbd8:	800082c0 	call	800082c <__udivsi3>
 800cbdc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800cbe0:	e0bffe17 	ldw	r2,-8(fp)
 800cbe4:	10002a26 	beq	r2,zero,800cc90 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800cbe8:	e03ffc15 	stw	zero,-16(fp)
 800cbec:	00001706 	br	800cc4c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800cbf0:	00a00034 	movhi	r2,32768
 800cbf4:	10bfffc4 	addi	r2,r2,-1
 800cbf8:	10bfffc4 	addi	r2,r2,-1
 800cbfc:	103ffe1e 	bne	r2,zero,800cbf8 <__alt_data_end+0xfc00cbf8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800cc00:	014003f4 	movhi	r5,15
 800cc04:	29509004 	addi	r5,r5,16960
 800cc08:	e13ffd17 	ldw	r4,-12(fp)
 800cc0c:	80008e80 	call	80008e8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800cc10:	100b883a 	mov	r5,r2
 800cc14:	0100bef4 	movhi	r4,763
 800cc18:	213c2004 	addi	r4,r4,-3968
 800cc1c:	800082c0 	call	800082c <__udivsi3>
 800cc20:	100b883a 	mov	r5,r2
 800cc24:	01200034 	movhi	r4,32768
 800cc28:	213fffc4 	addi	r4,r4,-1
 800cc2c:	800082c0 	call	800082c <__udivsi3>
 800cc30:	1007883a 	mov	r3,r2
 800cc34:	e0bfff17 	ldw	r2,-4(fp)
 800cc38:	10c5c83a 	sub	r2,r2,r3
 800cc3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800cc40:	e0bffc17 	ldw	r2,-16(fp)
 800cc44:	10800044 	addi	r2,r2,1
 800cc48:	e0bffc15 	stw	r2,-16(fp)
 800cc4c:	e0fffc17 	ldw	r3,-16(fp)
 800cc50:	e0bffe17 	ldw	r2,-8(fp)
 800cc54:	18bfe616 	blt	r3,r2,800cbf0 <__alt_data_end+0xfc00cbf0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cc58:	014003f4 	movhi	r5,15
 800cc5c:	29509004 	addi	r5,r5,16960
 800cc60:	e13ffd17 	ldw	r4,-12(fp)
 800cc64:	80008e80 	call	80008e8 <__mulsi3>
 800cc68:	100b883a 	mov	r5,r2
 800cc6c:	0100bef4 	movhi	r4,763
 800cc70:	213c2004 	addi	r4,r4,-3968
 800cc74:	800082c0 	call	800082c <__udivsi3>
 800cc78:	e17fff17 	ldw	r5,-4(fp)
 800cc7c:	1009883a 	mov	r4,r2
 800cc80:	80008e80 	call	80008e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800cc84:	10bfffc4 	addi	r2,r2,-1
 800cc88:	103ffe1e 	bne	r2,zero,800cc84 <__alt_data_end+0xfc00cc84>
 800cc8c:	00000d06 	br	800ccc4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cc90:	014003f4 	movhi	r5,15
 800cc94:	29509004 	addi	r5,r5,16960
 800cc98:	e13ffd17 	ldw	r4,-12(fp)
 800cc9c:	80008e80 	call	80008e8 <__mulsi3>
 800cca0:	100b883a 	mov	r5,r2
 800cca4:	0100bef4 	movhi	r4,763
 800cca8:	213c2004 	addi	r4,r4,-3968
 800ccac:	800082c0 	call	800082c <__udivsi3>
 800ccb0:	e17fff17 	ldw	r5,-4(fp)
 800ccb4:	1009883a 	mov	r4,r2
 800ccb8:	80008e80 	call	80008e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800ccbc:	10bfffc4 	addi	r2,r2,-1
 800ccc0:	00bffe16 	blt	zero,r2,800ccbc <__alt_data_end+0xfc00ccbc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800ccc4:	0005883a 	mov	r2,zero
}
 800ccc8:	e037883a 	mov	sp,fp
 800cccc:	dfc00117 	ldw	ra,4(sp)
 800ccd0:	df000017 	ldw	fp,0(sp)
 800ccd4:	dec00204 	addi	sp,sp,8
 800ccd8:	f800283a 	ret

0800ccdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ccdc:	defffe04 	addi	sp,sp,-8
 800cce0:	dfc00115 	stw	ra,4(sp)
 800cce4:	df000015 	stw	fp,0(sp)
 800cce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ccec:	d0a00d17 	ldw	r2,-32716(gp)
 800ccf0:	10000326 	beq	r2,zero,800cd00 <alt_get_errno+0x24>
 800ccf4:	d0a00d17 	ldw	r2,-32716(gp)
 800ccf8:	103ee83a 	callr	r2
 800ccfc:	00000106 	br	800cd04 <alt_get_errno+0x28>
 800cd00:	d0a78b04 	addi	r2,gp,-25044
}
 800cd04:	e037883a 	mov	sp,fp
 800cd08:	dfc00117 	ldw	ra,4(sp)
 800cd0c:	df000017 	ldw	fp,0(sp)
 800cd10:	dec00204 	addi	sp,sp,8
 800cd14:	f800283a 	ret

0800cd18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800cd18:	defffb04 	addi	sp,sp,-20
 800cd1c:	dfc00415 	stw	ra,16(sp)
 800cd20:	df000315 	stw	fp,12(sp)
 800cd24:	df000304 	addi	fp,sp,12
 800cd28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800cd2c:	e0bfff17 	ldw	r2,-4(fp)
 800cd30:	10000816 	blt	r2,zero,800cd54 <close+0x3c>
 800cd34:	01400304 	movi	r5,12
 800cd38:	e13fff17 	ldw	r4,-4(fp)
 800cd3c:	80008e80 	call	80008e8 <__mulsi3>
 800cd40:	1007883a 	mov	r3,r2
 800cd44:	00820074 	movhi	r2,2049
 800cd48:	10bfa104 	addi	r2,r2,-380
 800cd4c:	1885883a 	add	r2,r3,r2
 800cd50:	00000106 	br	800cd58 <close+0x40>
 800cd54:	0005883a 	mov	r2,zero
 800cd58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800cd5c:	e0bffd17 	ldw	r2,-12(fp)
 800cd60:	10001926 	beq	r2,zero,800cdc8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800cd64:	e0bffd17 	ldw	r2,-12(fp)
 800cd68:	10800017 	ldw	r2,0(r2)
 800cd6c:	10800417 	ldw	r2,16(r2)
 800cd70:	10000626 	beq	r2,zero,800cd8c <close+0x74>
 800cd74:	e0bffd17 	ldw	r2,-12(fp)
 800cd78:	10800017 	ldw	r2,0(r2)
 800cd7c:	10800417 	ldw	r2,16(r2)
 800cd80:	e13ffd17 	ldw	r4,-12(fp)
 800cd84:	103ee83a 	callr	r2
 800cd88:	00000106 	br	800cd90 <close+0x78>
 800cd8c:	0005883a 	mov	r2,zero
 800cd90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800cd94:	e13fff17 	ldw	r4,-4(fp)
 800cd98:	800d6800 	call	800d680 <alt_release_fd>
    if (rval < 0)
 800cd9c:	e0bffe17 	ldw	r2,-8(fp)
 800cda0:	1000070e 	bge	r2,zero,800cdc0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800cda4:	800ccdc0 	call	800ccdc <alt_get_errno>
 800cda8:	1007883a 	mov	r3,r2
 800cdac:	e0bffe17 	ldw	r2,-8(fp)
 800cdb0:	0085c83a 	sub	r2,zero,r2
 800cdb4:	18800015 	stw	r2,0(r3)
      return -1;
 800cdb8:	00bfffc4 	movi	r2,-1
 800cdbc:	00000706 	br	800cddc <close+0xc4>
    }
    return 0;
 800cdc0:	0005883a 	mov	r2,zero
 800cdc4:	00000506 	br	800cddc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cdc8:	800ccdc0 	call	800ccdc <alt_get_errno>
 800cdcc:	1007883a 	mov	r3,r2
 800cdd0:	00801444 	movi	r2,81
 800cdd4:	18800015 	stw	r2,0(r3)
    return -1;
 800cdd8:	00bfffc4 	movi	r2,-1
  }
}
 800cddc:	e037883a 	mov	sp,fp
 800cde0:	dfc00117 	ldw	ra,4(sp)
 800cde4:	df000017 	ldw	fp,0(sp)
 800cde8:	dec00204 	addi	sp,sp,8
 800cdec:	f800283a 	ret

0800cdf0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800cdf0:	deffff04 	addi	sp,sp,-4
 800cdf4:	df000015 	stw	fp,0(sp)
 800cdf8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800cdfc:	0001883a 	nop
 800ce00:	e037883a 	mov	sp,fp
 800ce04:	df000017 	ldw	fp,0(sp)
 800ce08:	dec00104 	addi	sp,sp,4
 800ce0c:	f800283a 	ret

0800ce10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ce10:	defffc04 	addi	sp,sp,-16
 800ce14:	df000315 	stw	fp,12(sp)
 800ce18:	df000304 	addi	fp,sp,12
 800ce1c:	e13ffd15 	stw	r4,-12(fp)
 800ce20:	e17ffe15 	stw	r5,-8(fp)
 800ce24:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ce28:	e0bfff17 	ldw	r2,-4(fp)
}
 800ce2c:	e037883a 	mov	sp,fp
 800ce30:	df000017 	ldw	fp,0(sp)
 800ce34:	dec00104 	addi	sp,sp,4
 800ce38:	f800283a 	ret

0800ce3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ce3c:	defffe04 	addi	sp,sp,-8
 800ce40:	dfc00115 	stw	ra,4(sp)
 800ce44:	df000015 	stw	fp,0(sp)
 800ce48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ce4c:	d0a00d17 	ldw	r2,-32716(gp)
 800ce50:	10000326 	beq	r2,zero,800ce60 <alt_get_errno+0x24>
 800ce54:	d0a00d17 	ldw	r2,-32716(gp)
 800ce58:	103ee83a 	callr	r2
 800ce5c:	00000106 	br	800ce64 <alt_get_errno+0x28>
 800ce60:	d0a78b04 	addi	r2,gp,-25044
}
 800ce64:	e037883a 	mov	sp,fp
 800ce68:	dfc00117 	ldw	ra,4(sp)
 800ce6c:	df000017 	ldw	fp,0(sp)
 800ce70:	dec00204 	addi	sp,sp,8
 800ce74:	f800283a 	ret

0800ce78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800ce78:	defffa04 	addi	sp,sp,-24
 800ce7c:	dfc00515 	stw	ra,20(sp)
 800ce80:	df000415 	stw	fp,16(sp)
 800ce84:	df000404 	addi	fp,sp,16
 800ce88:	e13ffe15 	stw	r4,-8(fp)
 800ce8c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800ce90:	e0bffe17 	ldw	r2,-8(fp)
 800ce94:	10000326 	beq	r2,zero,800cea4 <alt_dev_llist_insert+0x2c>
 800ce98:	e0bffe17 	ldw	r2,-8(fp)
 800ce9c:	10800217 	ldw	r2,8(r2)
 800cea0:	1000061e 	bne	r2,zero,800cebc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800cea4:	800ce3c0 	call	800ce3c <alt_get_errno>
 800cea8:	1007883a 	mov	r3,r2
 800ceac:	00800584 	movi	r2,22
 800ceb0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800ceb4:	00bffa84 	movi	r2,-22
 800ceb8:	00001306 	br	800cf08 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800cebc:	e0bffe17 	ldw	r2,-8(fp)
 800cec0:	e0ffff17 	ldw	r3,-4(fp)
 800cec4:	e0fffc15 	stw	r3,-16(fp)
 800cec8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800cecc:	e0bffd17 	ldw	r2,-12(fp)
 800ced0:	e0fffc17 	ldw	r3,-16(fp)
 800ced4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800ced8:	e0bffc17 	ldw	r2,-16(fp)
 800cedc:	10c00017 	ldw	r3,0(r2)
 800cee0:	e0bffd17 	ldw	r2,-12(fp)
 800cee4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800cee8:	e0bffc17 	ldw	r2,-16(fp)
 800ceec:	10800017 	ldw	r2,0(r2)
 800cef0:	e0fffd17 	ldw	r3,-12(fp)
 800cef4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800cef8:	e0bffc17 	ldw	r2,-16(fp)
 800cefc:	e0fffd17 	ldw	r3,-12(fp)
 800cf00:	10c00015 	stw	r3,0(r2)

  return 0;  
 800cf04:	0005883a 	mov	r2,zero
}
 800cf08:	e037883a 	mov	sp,fp
 800cf0c:	dfc00117 	ldw	ra,4(sp)
 800cf10:	df000017 	ldw	fp,0(sp)
 800cf14:	dec00204 	addi	sp,sp,8
 800cf18:	f800283a 	ret

0800cf1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800cf1c:	defffd04 	addi	sp,sp,-12
 800cf20:	dfc00215 	stw	ra,8(sp)
 800cf24:	df000115 	stw	fp,4(sp)
 800cf28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800cf2c:	00820074 	movhi	r2,2049
 800cf30:	10b7d504 	addi	r2,r2,-8364
 800cf34:	e0bfff15 	stw	r2,-4(fp)
 800cf38:	00000606 	br	800cf54 <_do_ctors+0x38>
        (*ctor) (); 
 800cf3c:	e0bfff17 	ldw	r2,-4(fp)
 800cf40:	10800017 	ldw	r2,0(r2)
 800cf44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800cf48:	e0bfff17 	ldw	r2,-4(fp)
 800cf4c:	10bfff04 	addi	r2,r2,-4
 800cf50:	e0bfff15 	stw	r2,-4(fp)
 800cf54:	e0ffff17 	ldw	r3,-4(fp)
 800cf58:	00820074 	movhi	r2,2049
 800cf5c:	10b7d604 	addi	r2,r2,-8360
 800cf60:	18bff62e 	bgeu	r3,r2,800cf3c <__alt_data_end+0xfc00cf3c>
        (*ctor) (); 
}
 800cf64:	0001883a 	nop
 800cf68:	e037883a 	mov	sp,fp
 800cf6c:	dfc00117 	ldw	ra,4(sp)
 800cf70:	df000017 	ldw	fp,0(sp)
 800cf74:	dec00204 	addi	sp,sp,8
 800cf78:	f800283a 	ret

0800cf7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800cf7c:	defffd04 	addi	sp,sp,-12
 800cf80:	dfc00215 	stw	ra,8(sp)
 800cf84:	df000115 	stw	fp,4(sp)
 800cf88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800cf8c:	00820074 	movhi	r2,2049
 800cf90:	10b7d504 	addi	r2,r2,-8364
 800cf94:	e0bfff15 	stw	r2,-4(fp)
 800cf98:	00000606 	br	800cfb4 <_do_dtors+0x38>
        (*dtor) (); 
 800cf9c:	e0bfff17 	ldw	r2,-4(fp)
 800cfa0:	10800017 	ldw	r2,0(r2)
 800cfa4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800cfa8:	e0bfff17 	ldw	r2,-4(fp)
 800cfac:	10bfff04 	addi	r2,r2,-4
 800cfb0:	e0bfff15 	stw	r2,-4(fp)
 800cfb4:	e0ffff17 	ldw	r3,-4(fp)
 800cfb8:	00820074 	movhi	r2,2049
 800cfbc:	10b7d604 	addi	r2,r2,-8360
 800cfc0:	18bff62e 	bgeu	r3,r2,800cf9c <__alt_data_end+0xfc00cf9c>
        (*dtor) (); 
}
 800cfc4:	0001883a 	nop
 800cfc8:	e037883a 	mov	sp,fp
 800cfcc:	dfc00117 	ldw	ra,4(sp)
 800cfd0:	df000017 	ldw	fp,0(sp)
 800cfd4:	dec00204 	addi	sp,sp,8
 800cfd8:	f800283a 	ret

0800cfdc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800cfdc:	deffff04 	addi	sp,sp,-4
 800cfe0:	df000015 	stw	fp,0(sp)
 800cfe4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800cfe8:	0001883a 	nop
 800cfec:	e037883a 	mov	sp,fp
 800cff0:	df000017 	ldw	fp,0(sp)
 800cff4:	dec00104 	addi	sp,sp,4
 800cff8:	f800283a 	ret

0800cffc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800cffc:	defff904 	addi	sp,sp,-28
 800d000:	dfc00615 	stw	ra,24(sp)
 800d004:	df000515 	stw	fp,20(sp)
 800d008:	df000504 	addi	fp,sp,20
 800d00c:	e13ffc15 	stw	r4,-16(fp)
 800d010:	e17ffd15 	stw	r5,-12(fp)
 800d014:	e1bffe15 	stw	r6,-8(fp)
 800d018:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800d01c:	e0800217 	ldw	r2,8(fp)
 800d020:	d8800015 	stw	r2,0(sp)
 800d024:	e1ffff17 	ldw	r7,-4(fp)
 800d028:	e1bffe17 	ldw	r6,-8(fp)
 800d02c:	e17ffd17 	ldw	r5,-12(fp)
 800d030:	e13ffc17 	ldw	r4,-16(fp)
 800d034:	800d1ac0 	call	800d1ac <alt_iic_isr_register>
}  
 800d038:	e037883a 	mov	sp,fp
 800d03c:	dfc00117 	ldw	ra,4(sp)
 800d040:	df000017 	ldw	fp,0(sp)
 800d044:	dec00204 	addi	sp,sp,8
 800d048:	f800283a 	ret

0800d04c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800d04c:	defff904 	addi	sp,sp,-28
 800d050:	df000615 	stw	fp,24(sp)
 800d054:	df000604 	addi	fp,sp,24
 800d058:	e13ffe15 	stw	r4,-8(fp)
 800d05c:	e17fff15 	stw	r5,-4(fp)
 800d060:	e0bfff17 	ldw	r2,-4(fp)
 800d064:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d068:	0005303a 	rdctl	r2,status
 800d06c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d070:	e0fffb17 	ldw	r3,-20(fp)
 800d074:	00bfff84 	movi	r2,-2
 800d078:	1884703a 	and	r2,r3,r2
 800d07c:	1001703a 	wrctl	status,r2
  
  return context;
 800d080:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d084:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800d088:	00c00044 	movi	r3,1
 800d08c:	e0bffa17 	ldw	r2,-24(fp)
 800d090:	1884983a 	sll	r2,r3,r2
 800d094:	1007883a 	mov	r3,r2
 800d098:	d0a78f17 	ldw	r2,-25028(gp)
 800d09c:	1884b03a 	or	r2,r3,r2
 800d0a0:	d0a78f15 	stw	r2,-25028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d0a4:	d0a78f17 	ldw	r2,-25028(gp)
 800d0a8:	100170fa 	wrctl	ienable,r2
 800d0ac:	e0bffc17 	ldw	r2,-16(fp)
 800d0b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d0b4:	e0bffd17 	ldw	r2,-12(fp)
 800d0b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d0bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800d0c0:	0001883a 	nop
}
 800d0c4:	e037883a 	mov	sp,fp
 800d0c8:	df000017 	ldw	fp,0(sp)
 800d0cc:	dec00104 	addi	sp,sp,4
 800d0d0:	f800283a 	ret

0800d0d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800d0d4:	defff904 	addi	sp,sp,-28
 800d0d8:	df000615 	stw	fp,24(sp)
 800d0dc:	df000604 	addi	fp,sp,24
 800d0e0:	e13ffe15 	stw	r4,-8(fp)
 800d0e4:	e17fff15 	stw	r5,-4(fp)
 800d0e8:	e0bfff17 	ldw	r2,-4(fp)
 800d0ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d0f0:	0005303a 	rdctl	r2,status
 800d0f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d0f8:	e0fffb17 	ldw	r3,-20(fp)
 800d0fc:	00bfff84 	movi	r2,-2
 800d100:	1884703a 	and	r2,r3,r2
 800d104:	1001703a 	wrctl	status,r2
  
  return context;
 800d108:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d10c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800d110:	00c00044 	movi	r3,1
 800d114:	e0bffa17 	ldw	r2,-24(fp)
 800d118:	1884983a 	sll	r2,r3,r2
 800d11c:	0084303a 	nor	r2,zero,r2
 800d120:	1007883a 	mov	r3,r2
 800d124:	d0a78f17 	ldw	r2,-25028(gp)
 800d128:	1884703a 	and	r2,r3,r2
 800d12c:	d0a78f15 	stw	r2,-25028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d130:	d0a78f17 	ldw	r2,-25028(gp)
 800d134:	100170fa 	wrctl	ienable,r2
 800d138:	e0bffc17 	ldw	r2,-16(fp)
 800d13c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d140:	e0bffd17 	ldw	r2,-12(fp)
 800d144:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d148:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800d14c:	0001883a 	nop
}
 800d150:	e037883a 	mov	sp,fp
 800d154:	df000017 	ldw	fp,0(sp)
 800d158:	dec00104 	addi	sp,sp,4
 800d15c:	f800283a 	ret

0800d160 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800d160:	defffc04 	addi	sp,sp,-16
 800d164:	df000315 	stw	fp,12(sp)
 800d168:	df000304 	addi	fp,sp,12
 800d16c:	e13ffe15 	stw	r4,-8(fp)
 800d170:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800d174:	000530fa 	rdctl	r2,ienable
 800d178:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800d17c:	00c00044 	movi	r3,1
 800d180:	e0bfff17 	ldw	r2,-4(fp)
 800d184:	1884983a 	sll	r2,r3,r2
 800d188:	1007883a 	mov	r3,r2
 800d18c:	e0bffd17 	ldw	r2,-12(fp)
 800d190:	1884703a 	and	r2,r3,r2
 800d194:	1004c03a 	cmpne	r2,r2,zero
 800d198:	10803fcc 	andi	r2,r2,255
}
 800d19c:	e037883a 	mov	sp,fp
 800d1a0:	df000017 	ldw	fp,0(sp)
 800d1a4:	dec00104 	addi	sp,sp,4
 800d1a8:	f800283a 	ret

0800d1ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d1ac:	defff504 	addi	sp,sp,-44
 800d1b0:	dfc00a15 	stw	ra,40(sp)
 800d1b4:	df000915 	stw	fp,36(sp)
 800d1b8:	df000904 	addi	fp,sp,36
 800d1bc:	e13ffc15 	stw	r4,-16(fp)
 800d1c0:	e17ffd15 	stw	r5,-12(fp)
 800d1c4:	e1bffe15 	stw	r6,-8(fp)
 800d1c8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800d1cc:	00bffa84 	movi	r2,-22
 800d1d0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800d1d4:	e0bffd17 	ldw	r2,-12(fp)
 800d1d8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800d1dc:	e0bff817 	ldw	r2,-32(fp)
 800d1e0:	10800808 	cmpgei	r2,r2,32
 800d1e4:	1000271e 	bne	r2,zero,800d284 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d1e8:	0005303a 	rdctl	r2,status
 800d1ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d1f0:	e0fffb17 	ldw	r3,-20(fp)
 800d1f4:	00bfff84 	movi	r2,-2
 800d1f8:	1884703a 	and	r2,r3,r2
 800d1fc:	1001703a 	wrctl	status,r2
  
  return context;
 800d200:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800d204:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800d208:	00820074 	movhi	r2,2049
 800d20c:	10879e04 	addi	r2,r2,7800
 800d210:	e0fff817 	ldw	r3,-32(fp)
 800d214:	180690fa 	slli	r3,r3,3
 800d218:	10c5883a 	add	r2,r2,r3
 800d21c:	e0fffe17 	ldw	r3,-8(fp)
 800d220:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800d224:	00820074 	movhi	r2,2049
 800d228:	10879e04 	addi	r2,r2,7800
 800d22c:	e0fff817 	ldw	r3,-32(fp)
 800d230:	180690fa 	slli	r3,r3,3
 800d234:	10c5883a 	add	r2,r2,r3
 800d238:	10800104 	addi	r2,r2,4
 800d23c:	e0ffff17 	ldw	r3,-4(fp)
 800d240:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800d244:	e0bffe17 	ldw	r2,-8(fp)
 800d248:	10000526 	beq	r2,zero,800d260 <alt_iic_isr_register+0xb4>
 800d24c:	e0bff817 	ldw	r2,-32(fp)
 800d250:	100b883a 	mov	r5,r2
 800d254:	e13ffc17 	ldw	r4,-16(fp)
 800d258:	800d04c0 	call	800d04c <alt_ic_irq_enable>
 800d25c:	00000406 	br	800d270 <alt_iic_isr_register+0xc4>
 800d260:	e0bff817 	ldw	r2,-32(fp)
 800d264:	100b883a 	mov	r5,r2
 800d268:	e13ffc17 	ldw	r4,-16(fp)
 800d26c:	800d0d40 	call	800d0d4 <alt_ic_irq_disable>
 800d270:	e0bff715 	stw	r2,-36(fp)
 800d274:	e0bffa17 	ldw	r2,-24(fp)
 800d278:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d27c:	e0bff917 	ldw	r2,-28(fp)
 800d280:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800d284:	e0bff717 	ldw	r2,-36(fp)
}
 800d288:	e037883a 	mov	sp,fp
 800d28c:	dfc00117 	ldw	ra,4(sp)
 800d290:	df000017 	ldw	fp,0(sp)
 800d294:	dec00204 	addi	sp,sp,8
 800d298:	f800283a 	ret

0800d29c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800d29c:	defff804 	addi	sp,sp,-32
 800d2a0:	dfc00715 	stw	ra,28(sp)
 800d2a4:	df000615 	stw	fp,24(sp)
 800d2a8:	dc000515 	stw	r16,20(sp)
 800d2ac:	df000604 	addi	fp,sp,24
 800d2b0:	e13ffb15 	stw	r4,-20(fp)
 800d2b4:	e17ffc15 	stw	r5,-16(fp)
 800d2b8:	e1bffd15 	stw	r6,-12(fp)
 800d2bc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800d2c0:	e1bffe17 	ldw	r6,-8(fp)
 800d2c4:	e17ffd17 	ldw	r5,-12(fp)
 800d2c8:	e13ffc17 	ldw	r4,-16(fp)
 800d2cc:	800d5240 	call	800d524 <open>
 800d2d0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800d2d4:	e0bffa17 	ldw	r2,-24(fp)
 800d2d8:	10002216 	blt	r2,zero,800d364 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800d2dc:	04020074 	movhi	r16,2049
 800d2e0:	843fa104 	addi	r16,r16,-380
 800d2e4:	e0bffa17 	ldw	r2,-24(fp)
 800d2e8:	01400304 	movi	r5,12
 800d2ec:	1009883a 	mov	r4,r2
 800d2f0:	80008e80 	call	80008e8 <__mulsi3>
 800d2f4:	8085883a 	add	r2,r16,r2
 800d2f8:	10c00017 	ldw	r3,0(r2)
 800d2fc:	e0bffb17 	ldw	r2,-20(fp)
 800d300:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800d304:	04020074 	movhi	r16,2049
 800d308:	843fa104 	addi	r16,r16,-380
 800d30c:	e0bffa17 	ldw	r2,-24(fp)
 800d310:	01400304 	movi	r5,12
 800d314:	1009883a 	mov	r4,r2
 800d318:	80008e80 	call	80008e8 <__mulsi3>
 800d31c:	8085883a 	add	r2,r16,r2
 800d320:	10800104 	addi	r2,r2,4
 800d324:	10c00017 	ldw	r3,0(r2)
 800d328:	e0bffb17 	ldw	r2,-20(fp)
 800d32c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800d330:	04020074 	movhi	r16,2049
 800d334:	843fa104 	addi	r16,r16,-380
 800d338:	e0bffa17 	ldw	r2,-24(fp)
 800d33c:	01400304 	movi	r5,12
 800d340:	1009883a 	mov	r4,r2
 800d344:	80008e80 	call	80008e8 <__mulsi3>
 800d348:	8085883a 	add	r2,r16,r2
 800d34c:	10800204 	addi	r2,r2,8
 800d350:	10c00017 	ldw	r3,0(r2)
 800d354:	e0bffb17 	ldw	r2,-20(fp)
 800d358:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800d35c:	e13ffa17 	ldw	r4,-24(fp)
 800d360:	800d6800 	call	800d680 <alt_release_fd>
  }
} 
 800d364:	0001883a 	nop
 800d368:	e6ffff04 	addi	sp,fp,-4
 800d36c:	dfc00217 	ldw	ra,8(sp)
 800d370:	df000117 	ldw	fp,4(sp)
 800d374:	dc000017 	ldw	r16,0(sp)
 800d378:	dec00304 	addi	sp,sp,12
 800d37c:	f800283a 	ret

0800d380 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800d380:	defffb04 	addi	sp,sp,-20
 800d384:	dfc00415 	stw	ra,16(sp)
 800d388:	df000315 	stw	fp,12(sp)
 800d38c:	df000304 	addi	fp,sp,12
 800d390:	e13ffd15 	stw	r4,-12(fp)
 800d394:	e17ffe15 	stw	r5,-8(fp)
 800d398:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800d39c:	01c07fc4 	movi	r7,511
 800d3a0:	01800044 	movi	r6,1
 800d3a4:	e17ffd17 	ldw	r5,-12(fp)
 800d3a8:	01020074 	movhi	r4,2049
 800d3ac:	213fa404 	addi	r4,r4,-368
 800d3b0:	800d29c0 	call	800d29c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800d3b4:	01c07fc4 	movi	r7,511
 800d3b8:	000d883a 	mov	r6,zero
 800d3bc:	e17ffe17 	ldw	r5,-8(fp)
 800d3c0:	01020074 	movhi	r4,2049
 800d3c4:	213fa104 	addi	r4,r4,-380
 800d3c8:	800d29c0 	call	800d29c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800d3cc:	01c07fc4 	movi	r7,511
 800d3d0:	01800044 	movi	r6,1
 800d3d4:	e17fff17 	ldw	r5,-4(fp)
 800d3d8:	01020074 	movhi	r4,2049
 800d3dc:	213fa704 	addi	r4,r4,-356
 800d3e0:	800d29c0 	call	800d29c <alt_open_fd>
}  
 800d3e4:	0001883a 	nop
 800d3e8:	e037883a 	mov	sp,fp
 800d3ec:	dfc00117 	ldw	ra,4(sp)
 800d3f0:	df000017 	ldw	fp,0(sp)
 800d3f4:	dec00204 	addi	sp,sp,8
 800d3f8:	f800283a 	ret

0800d3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d3fc:	defffe04 	addi	sp,sp,-8
 800d400:	dfc00115 	stw	ra,4(sp)
 800d404:	df000015 	stw	fp,0(sp)
 800d408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d40c:	d0a00d17 	ldw	r2,-32716(gp)
 800d410:	10000326 	beq	r2,zero,800d420 <alt_get_errno+0x24>
 800d414:	d0a00d17 	ldw	r2,-32716(gp)
 800d418:	103ee83a 	callr	r2
 800d41c:	00000106 	br	800d424 <alt_get_errno+0x28>
 800d420:	d0a78b04 	addi	r2,gp,-25044
}
 800d424:	e037883a 	mov	sp,fp
 800d428:	dfc00117 	ldw	ra,4(sp)
 800d42c:	df000017 	ldw	fp,0(sp)
 800d430:	dec00204 	addi	sp,sp,8
 800d434:	f800283a 	ret

0800d438 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800d438:	defffb04 	addi	sp,sp,-20
 800d43c:	dfc00415 	stw	ra,16(sp)
 800d440:	df000315 	stw	fp,12(sp)
 800d444:	dc000215 	stw	r16,8(sp)
 800d448:	df000304 	addi	fp,sp,12
 800d44c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800d450:	e0bffe17 	ldw	r2,-8(fp)
 800d454:	10800217 	ldw	r2,8(r2)
 800d458:	10d00034 	orhi	r3,r2,16384
 800d45c:	e0bffe17 	ldw	r2,-8(fp)
 800d460:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d464:	e03ffd15 	stw	zero,-12(fp)
 800d468:	00002306 	br	800d4f8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d46c:	04020074 	movhi	r16,2049
 800d470:	843fa104 	addi	r16,r16,-380
 800d474:	e0bffd17 	ldw	r2,-12(fp)
 800d478:	01400304 	movi	r5,12
 800d47c:	1009883a 	mov	r4,r2
 800d480:	80008e80 	call	80008e8 <__mulsi3>
 800d484:	8085883a 	add	r2,r16,r2
 800d488:	10c00017 	ldw	r3,0(r2)
 800d48c:	e0bffe17 	ldw	r2,-8(fp)
 800d490:	10800017 	ldw	r2,0(r2)
 800d494:	1880151e 	bne	r3,r2,800d4ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d498:	04020074 	movhi	r16,2049
 800d49c:	843fa104 	addi	r16,r16,-380
 800d4a0:	e0bffd17 	ldw	r2,-12(fp)
 800d4a4:	01400304 	movi	r5,12
 800d4a8:	1009883a 	mov	r4,r2
 800d4ac:	80008e80 	call	80008e8 <__mulsi3>
 800d4b0:	8085883a 	add	r2,r16,r2
 800d4b4:	10800204 	addi	r2,r2,8
 800d4b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d4bc:	10000b0e 	bge	r2,zero,800d4ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800d4c0:	01400304 	movi	r5,12
 800d4c4:	e13ffd17 	ldw	r4,-12(fp)
 800d4c8:	80008e80 	call	80008e8 <__mulsi3>
 800d4cc:	1007883a 	mov	r3,r2
 800d4d0:	00820074 	movhi	r2,2049
 800d4d4:	10bfa104 	addi	r2,r2,-380
 800d4d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d4dc:	e0bffe17 	ldw	r2,-8(fp)
 800d4e0:	18800226 	beq	r3,r2,800d4ec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800d4e4:	00bffcc4 	movi	r2,-13
 800d4e8:	00000806 	br	800d50c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d4ec:	e0bffd17 	ldw	r2,-12(fp)
 800d4f0:	10800044 	addi	r2,r2,1
 800d4f4:	e0bffd15 	stw	r2,-12(fp)
 800d4f8:	d0a00c17 	ldw	r2,-32720(gp)
 800d4fc:	1007883a 	mov	r3,r2
 800d500:	e0bffd17 	ldw	r2,-12(fp)
 800d504:	18bfd92e 	bgeu	r3,r2,800d46c <__alt_data_end+0xfc00d46c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800d508:	0005883a 	mov	r2,zero
}
 800d50c:	e6ffff04 	addi	sp,fp,-4
 800d510:	dfc00217 	ldw	ra,8(sp)
 800d514:	df000117 	ldw	fp,4(sp)
 800d518:	dc000017 	ldw	r16,0(sp)
 800d51c:	dec00304 	addi	sp,sp,12
 800d520:	f800283a 	ret

0800d524 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800d524:	defff604 	addi	sp,sp,-40
 800d528:	dfc00915 	stw	ra,36(sp)
 800d52c:	df000815 	stw	fp,32(sp)
 800d530:	df000804 	addi	fp,sp,32
 800d534:	e13ffd15 	stw	r4,-12(fp)
 800d538:	e17ffe15 	stw	r5,-8(fp)
 800d53c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800d540:	00bfffc4 	movi	r2,-1
 800d544:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800d548:	00bffb44 	movi	r2,-19
 800d54c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800d550:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800d554:	d1600a04 	addi	r5,gp,-32728
 800d558:	e13ffd17 	ldw	r4,-12(fp)
 800d55c:	800d8cc0 	call	800d8cc <alt_find_dev>
 800d560:	e0bff815 	stw	r2,-32(fp)
 800d564:	e0bff817 	ldw	r2,-32(fp)
 800d568:	1000051e 	bne	r2,zero,800d580 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800d56c:	e13ffd17 	ldw	r4,-12(fp)
 800d570:	800d95c0 	call	800d95c <alt_find_file>
 800d574:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800d578:	00800044 	movi	r2,1
 800d57c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800d580:	e0bff817 	ldw	r2,-32(fp)
 800d584:	10002b26 	beq	r2,zero,800d634 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800d588:	e13ff817 	ldw	r4,-32(fp)
 800d58c:	800da640 	call	800da64 <alt_get_fd>
 800d590:	e0bff915 	stw	r2,-28(fp)
 800d594:	e0bff917 	ldw	r2,-28(fp)
 800d598:	1000030e 	bge	r2,zero,800d5a8 <open+0x84>
    {
      status = index;
 800d59c:	e0bff917 	ldw	r2,-28(fp)
 800d5a0:	e0bffa15 	stw	r2,-24(fp)
 800d5a4:	00002506 	br	800d63c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800d5a8:	01400304 	movi	r5,12
 800d5ac:	e13ff917 	ldw	r4,-28(fp)
 800d5b0:	80008e80 	call	80008e8 <__mulsi3>
 800d5b4:	1007883a 	mov	r3,r2
 800d5b8:	00820074 	movhi	r2,2049
 800d5bc:	10bfa104 	addi	r2,r2,-380
 800d5c0:	1885883a 	add	r2,r3,r2
 800d5c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800d5c8:	e0fffe17 	ldw	r3,-8(fp)
 800d5cc:	00900034 	movhi	r2,16384
 800d5d0:	10bfffc4 	addi	r2,r2,-1
 800d5d4:	1886703a 	and	r3,r3,r2
 800d5d8:	e0bffc17 	ldw	r2,-16(fp)
 800d5dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800d5e0:	e0bffb17 	ldw	r2,-20(fp)
 800d5e4:	1000051e 	bne	r2,zero,800d5fc <open+0xd8>
 800d5e8:	e13ffc17 	ldw	r4,-16(fp)
 800d5ec:	800d4380 	call	800d438 <alt_file_locked>
 800d5f0:	e0bffa15 	stw	r2,-24(fp)
 800d5f4:	e0bffa17 	ldw	r2,-24(fp)
 800d5f8:	10001016 	blt	r2,zero,800d63c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800d5fc:	e0bff817 	ldw	r2,-32(fp)
 800d600:	10800317 	ldw	r2,12(r2)
 800d604:	10000826 	beq	r2,zero,800d628 <open+0x104>
 800d608:	e0bff817 	ldw	r2,-32(fp)
 800d60c:	10800317 	ldw	r2,12(r2)
 800d610:	e1ffff17 	ldw	r7,-4(fp)
 800d614:	e1bffe17 	ldw	r6,-8(fp)
 800d618:	e17ffd17 	ldw	r5,-12(fp)
 800d61c:	e13ffc17 	ldw	r4,-16(fp)
 800d620:	103ee83a 	callr	r2
 800d624:	00000106 	br	800d62c <open+0x108>
 800d628:	0005883a 	mov	r2,zero
 800d62c:	e0bffa15 	stw	r2,-24(fp)
 800d630:	00000206 	br	800d63c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800d634:	00bffb44 	movi	r2,-19
 800d638:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800d63c:	e0bffa17 	ldw	r2,-24(fp)
 800d640:	1000090e 	bge	r2,zero,800d668 <open+0x144>
  {
    alt_release_fd (index);  
 800d644:	e13ff917 	ldw	r4,-28(fp)
 800d648:	800d6800 	call	800d680 <alt_release_fd>
    ALT_ERRNO = -status;
 800d64c:	800d3fc0 	call	800d3fc <alt_get_errno>
 800d650:	1007883a 	mov	r3,r2
 800d654:	e0bffa17 	ldw	r2,-24(fp)
 800d658:	0085c83a 	sub	r2,zero,r2
 800d65c:	18800015 	stw	r2,0(r3)
    return -1;
 800d660:	00bfffc4 	movi	r2,-1
 800d664:	00000106 	br	800d66c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800d668:	e0bff917 	ldw	r2,-28(fp)
}
 800d66c:	e037883a 	mov	sp,fp
 800d670:	dfc00117 	ldw	ra,4(sp)
 800d674:	df000017 	ldw	fp,0(sp)
 800d678:	dec00204 	addi	sp,sp,8
 800d67c:	f800283a 	ret

0800d680 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d680:	defffc04 	addi	sp,sp,-16
 800d684:	dfc00315 	stw	ra,12(sp)
 800d688:	df000215 	stw	fp,8(sp)
 800d68c:	dc000115 	stw	r16,4(sp)
 800d690:	df000204 	addi	fp,sp,8
 800d694:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800d698:	e0bffe17 	ldw	r2,-8(fp)
 800d69c:	108000d0 	cmplti	r2,r2,3
 800d6a0:	1000111e 	bne	r2,zero,800d6e8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d6a4:	04020074 	movhi	r16,2049
 800d6a8:	843fa104 	addi	r16,r16,-380
 800d6ac:	e0bffe17 	ldw	r2,-8(fp)
 800d6b0:	01400304 	movi	r5,12
 800d6b4:	1009883a 	mov	r4,r2
 800d6b8:	80008e80 	call	80008e8 <__mulsi3>
 800d6bc:	8085883a 	add	r2,r16,r2
 800d6c0:	10800204 	addi	r2,r2,8
 800d6c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d6c8:	04020074 	movhi	r16,2049
 800d6cc:	843fa104 	addi	r16,r16,-380
 800d6d0:	e0bffe17 	ldw	r2,-8(fp)
 800d6d4:	01400304 	movi	r5,12
 800d6d8:	1009883a 	mov	r4,r2
 800d6dc:	80008e80 	call	80008e8 <__mulsi3>
 800d6e0:	8085883a 	add	r2,r16,r2
 800d6e4:	10000015 	stw	zero,0(r2)
  }
}
 800d6e8:	0001883a 	nop
 800d6ec:	e6ffff04 	addi	sp,fp,-4
 800d6f0:	dfc00217 	ldw	ra,8(sp)
 800d6f4:	df000117 	ldw	fp,4(sp)
 800d6f8:	dc000017 	ldw	r16,0(sp)
 800d6fc:	dec00304 	addi	sp,sp,12
 800d700:	f800283a 	ret

0800d704 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800d704:	defffa04 	addi	sp,sp,-24
 800d708:	df000515 	stw	fp,20(sp)
 800d70c:	df000504 	addi	fp,sp,20
 800d710:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d714:	0005303a 	rdctl	r2,status
 800d718:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d71c:	e0fffc17 	ldw	r3,-16(fp)
 800d720:	00bfff84 	movi	r2,-2
 800d724:	1884703a 	and	r2,r3,r2
 800d728:	1001703a 	wrctl	status,r2
  
  return context;
 800d72c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800d730:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800d734:	e0bfff17 	ldw	r2,-4(fp)
 800d738:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800d73c:	e0bffd17 	ldw	r2,-12(fp)
 800d740:	10800017 	ldw	r2,0(r2)
 800d744:	e0fffd17 	ldw	r3,-12(fp)
 800d748:	18c00117 	ldw	r3,4(r3)
 800d74c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800d750:	e0bffd17 	ldw	r2,-12(fp)
 800d754:	10800117 	ldw	r2,4(r2)
 800d758:	e0fffd17 	ldw	r3,-12(fp)
 800d75c:	18c00017 	ldw	r3,0(r3)
 800d760:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800d764:	e0bffd17 	ldw	r2,-12(fp)
 800d768:	e0fffd17 	ldw	r3,-12(fp)
 800d76c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800d770:	e0bffd17 	ldw	r2,-12(fp)
 800d774:	e0fffd17 	ldw	r3,-12(fp)
 800d778:	10c00015 	stw	r3,0(r2)
 800d77c:	e0bffb17 	ldw	r2,-20(fp)
 800d780:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d784:	e0bffe17 	ldw	r2,-8(fp)
 800d788:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800d78c:	0001883a 	nop
 800d790:	e037883a 	mov	sp,fp
 800d794:	df000017 	ldw	fp,0(sp)
 800d798:	dec00104 	addi	sp,sp,4
 800d79c:	f800283a 	ret

0800d7a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800d7a0:	defffb04 	addi	sp,sp,-20
 800d7a4:	dfc00415 	stw	ra,16(sp)
 800d7a8:	df000315 	stw	fp,12(sp)
 800d7ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800d7b0:	d0a00f17 	ldw	r2,-32708(gp)
 800d7b4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800d7b8:	d0a79117 	ldw	r2,-25020(gp)
 800d7bc:	10800044 	addi	r2,r2,1
 800d7c0:	d0a79115 	stw	r2,-25020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d7c4:	00002e06 	br	800d880 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800d7c8:	e0bffd17 	ldw	r2,-12(fp)
 800d7cc:	10800017 	ldw	r2,0(r2)
 800d7d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800d7d4:	e0bffd17 	ldw	r2,-12(fp)
 800d7d8:	10800403 	ldbu	r2,16(r2)
 800d7dc:	10803fcc 	andi	r2,r2,255
 800d7e0:	10000426 	beq	r2,zero,800d7f4 <alt_tick+0x54>
 800d7e4:	d0a79117 	ldw	r2,-25020(gp)
 800d7e8:	1000021e 	bne	r2,zero,800d7f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800d7ec:	e0bffd17 	ldw	r2,-12(fp)
 800d7f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800d7f4:	e0bffd17 	ldw	r2,-12(fp)
 800d7f8:	10800217 	ldw	r2,8(r2)
 800d7fc:	d0e79117 	ldw	r3,-25020(gp)
 800d800:	18801d36 	bltu	r3,r2,800d878 <alt_tick+0xd8>
 800d804:	e0bffd17 	ldw	r2,-12(fp)
 800d808:	10800403 	ldbu	r2,16(r2)
 800d80c:	10803fcc 	andi	r2,r2,255
 800d810:	1000191e 	bne	r2,zero,800d878 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800d814:	e0bffd17 	ldw	r2,-12(fp)
 800d818:	10800317 	ldw	r2,12(r2)
 800d81c:	e0fffd17 	ldw	r3,-12(fp)
 800d820:	18c00517 	ldw	r3,20(r3)
 800d824:	1809883a 	mov	r4,r3
 800d828:	103ee83a 	callr	r2
 800d82c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800d830:	e0bfff17 	ldw	r2,-4(fp)
 800d834:	1000031e 	bne	r2,zero,800d844 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800d838:	e13ffd17 	ldw	r4,-12(fp)
 800d83c:	800d7040 	call	800d704 <alt_alarm_stop>
 800d840:	00000d06 	br	800d878 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800d844:	e0bffd17 	ldw	r2,-12(fp)
 800d848:	10c00217 	ldw	r3,8(r2)
 800d84c:	e0bfff17 	ldw	r2,-4(fp)
 800d850:	1887883a 	add	r3,r3,r2
 800d854:	e0bffd17 	ldw	r2,-12(fp)
 800d858:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800d85c:	e0bffd17 	ldw	r2,-12(fp)
 800d860:	10c00217 	ldw	r3,8(r2)
 800d864:	d0a79117 	ldw	r2,-25020(gp)
 800d868:	1880032e 	bgeu	r3,r2,800d878 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800d86c:	e0bffd17 	ldw	r2,-12(fp)
 800d870:	00c00044 	movi	r3,1
 800d874:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800d878:	e0bffe17 	ldw	r2,-8(fp)
 800d87c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d880:	e0fffd17 	ldw	r3,-12(fp)
 800d884:	d0a00f04 	addi	r2,gp,-32708
 800d888:	18bfcf1e 	bne	r3,r2,800d7c8 <__alt_data_end+0xfc00d7c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800d88c:	0001883a 	nop
}
 800d890:	0001883a 	nop
 800d894:	e037883a 	mov	sp,fp
 800d898:	dfc00117 	ldw	ra,4(sp)
 800d89c:	df000017 	ldw	fp,0(sp)
 800d8a0:	dec00204 	addi	sp,sp,8
 800d8a4:	f800283a 	ret

0800d8a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800d8a8:	deffff04 	addi	sp,sp,-4
 800d8ac:	df000015 	stw	fp,0(sp)
 800d8b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800d8b4:	000170fa 	wrctl	ienable,zero
}
 800d8b8:	0001883a 	nop
 800d8bc:	e037883a 	mov	sp,fp
 800d8c0:	df000017 	ldw	fp,0(sp)
 800d8c4:	dec00104 	addi	sp,sp,4
 800d8c8:	f800283a 	ret

0800d8cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800d8cc:	defffa04 	addi	sp,sp,-24
 800d8d0:	dfc00515 	stw	ra,20(sp)
 800d8d4:	df000415 	stw	fp,16(sp)
 800d8d8:	df000404 	addi	fp,sp,16
 800d8dc:	e13ffe15 	stw	r4,-8(fp)
 800d8e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800d8e4:	e0bfff17 	ldw	r2,-4(fp)
 800d8e8:	10800017 	ldw	r2,0(r2)
 800d8ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800d8f0:	e13ffe17 	ldw	r4,-8(fp)
 800d8f4:	8000a500 	call	8000a50 <strlen>
 800d8f8:	10800044 	addi	r2,r2,1
 800d8fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800d900:	00000d06 	br	800d938 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800d904:	e0bffc17 	ldw	r2,-16(fp)
 800d908:	10800217 	ldw	r2,8(r2)
 800d90c:	e0fffd17 	ldw	r3,-12(fp)
 800d910:	180d883a 	mov	r6,r3
 800d914:	e17ffe17 	ldw	r5,-8(fp)
 800d918:	1009883a 	mov	r4,r2
 800d91c:	800dc100 	call	800dc10 <memcmp>
 800d920:	1000021e 	bne	r2,zero,800d92c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800d924:	e0bffc17 	ldw	r2,-16(fp)
 800d928:	00000706 	br	800d948 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800d92c:	e0bffc17 	ldw	r2,-16(fp)
 800d930:	10800017 	ldw	r2,0(r2)
 800d934:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800d938:	e0fffc17 	ldw	r3,-16(fp)
 800d93c:	e0bfff17 	ldw	r2,-4(fp)
 800d940:	18bff01e 	bne	r3,r2,800d904 <__alt_data_end+0xfc00d904>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800d944:	0005883a 	mov	r2,zero
}
 800d948:	e037883a 	mov	sp,fp
 800d94c:	dfc00117 	ldw	ra,4(sp)
 800d950:	df000017 	ldw	fp,0(sp)
 800d954:	dec00204 	addi	sp,sp,8
 800d958:	f800283a 	ret

0800d95c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800d95c:	defffb04 	addi	sp,sp,-20
 800d960:	dfc00415 	stw	ra,16(sp)
 800d964:	df000315 	stw	fp,12(sp)
 800d968:	df000304 	addi	fp,sp,12
 800d96c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800d970:	d0a00817 	ldw	r2,-32736(gp)
 800d974:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800d978:	00003106 	br	800da40 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800d97c:	e0bffd17 	ldw	r2,-12(fp)
 800d980:	10800217 	ldw	r2,8(r2)
 800d984:	1009883a 	mov	r4,r2
 800d988:	8000a500 	call	8000a50 <strlen>
 800d98c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800d990:	e0bffd17 	ldw	r2,-12(fp)
 800d994:	10c00217 	ldw	r3,8(r2)
 800d998:	e0bffe17 	ldw	r2,-8(fp)
 800d99c:	10bfffc4 	addi	r2,r2,-1
 800d9a0:	1885883a 	add	r2,r3,r2
 800d9a4:	10800003 	ldbu	r2,0(r2)
 800d9a8:	10803fcc 	andi	r2,r2,255
 800d9ac:	1080201c 	xori	r2,r2,128
 800d9b0:	10bfe004 	addi	r2,r2,-128
 800d9b4:	10800bd8 	cmpnei	r2,r2,47
 800d9b8:	1000031e 	bne	r2,zero,800d9c8 <alt_find_file+0x6c>
    {
      len -= 1;
 800d9bc:	e0bffe17 	ldw	r2,-8(fp)
 800d9c0:	10bfffc4 	addi	r2,r2,-1
 800d9c4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800d9c8:	e0bffe17 	ldw	r2,-8(fp)
 800d9cc:	e0ffff17 	ldw	r3,-4(fp)
 800d9d0:	1885883a 	add	r2,r3,r2
 800d9d4:	10800003 	ldbu	r2,0(r2)
 800d9d8:	10803fcc 	andi	r2,r2,255
 800d9dc:	1080201c 	xori	r2,r2,128
 800d9e0:	10bfe004 	addi	r2,r2,-128
 800d9e4:	10800be0 	cmpeqi	r2,r2,47
 800d9e8:	1000081e 	bne	r2,zero,800da0c <alt_find_file+0xb0>
 800d9ec:	e0bffe17 	ldw	r2,-8(fp)
 800d9f0:	e0ffff17 	ldw	r3,-4(fp)
 800d9f4:	1885883a 	add	r2,r3,r2
 800d9f8:	10800003 	ldbu	r2,0(r2)
 800d9fc:	10803fcc 	andi	r2,r2,255
 800da00:	1080201c 	xori	r2,r2,128
 800da04:	10bfe004 	addi	r2,r2,-128
 800da08:	10000a1e 	bne	r2,zero,800da34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800da0c:	e0bffd17 	ldw	r2,-12(fp)
 800da10:	10800217 	ldw	r2,8(r2)
 800da14:	e0fffe17 	ldw	r3,-8(fp)
 800da18:	180d883a 	mov	r6,r3
 800da1c:	e17fff17 	ldw	r5,-4(fp)
 800da20:	1009883a 	mov	r4,r2
 800da24:	800dc100 	call	800dc10 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800da28:	1000021e 	bne	r2,zero,800da34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800da2c:	e0bffd17 	ldw	r2,-12(fp)
 800da30:	00000706 	br	800da50 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800da34:	e0bffd17 	ldw	r2,-12(fp)
 800da38:	10800017 	ldw	r2,0(r2)
 800da3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800da40:	e0fffd17 	ldw	r3,-12(fp)
 800da44:	d0a00804 	addi	r2,gp,-32736
 800da48:	18bfcc1e 	bne	r3,r2,800d97c <__alt_data_end+0xfc00d97c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800da4c:	0005883a 	mov	r2,zero
}
 800da50:	e037883a 	mov	sp,fp
 800da54:	dfc00117 	ldw	ra,4(sp)
 800da58:	df000017 	ldw	fp,0(sp)
 800da5c:	dec00204 	addi	sp,sp,8
 800da60:	f800283a 	ret

0800da64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800da64:	defffa04 	addi	sp,sp,-24
 800da68:	dfc00515 	stw	ra,20(sp)
 800da6c:	df000415 	stw	fp,16(sp)
 800da70:	dc000315 	stw	r16,12(sp)
 800da74:	df000404 	addi	fp,sp,16
 800da78:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800da7c:	00bffa04 	movi	r2,-24
 800da80:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800da84:	e03ffc15 	stw	zero,-16(fp)
 800da88:	00001d06 	br	800db00 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800da8c:	04020074 	movhi	r16,2049
 800da90:	843fa104 	addi	r16,r16,-380
 800da94:	e0bffc17 	ldw	r2,-16(fp)
 800da98:	01400304 	movi	r5,12
 800da9c:	1009883a 	mov	r4,r2
 800daa0:	80008e80 	call	80008e8 <__mulsi3>
 800daa4:	8085883a 	add	r2,r16,r2
 800daa8:	10800017 	ldw	r2,0(r2)
 800daac:	1000111e 	bne	r2,zero,800daf4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800dab0:	04020074 	movhi	r16,2049
 800dab4:	843fa104 	addi	r16,r16,-380
 800dab8:	e0bffc17 	ldw	r2,-16(fp)
 800dabc:	01400304 	movi	r5,12
 800dac0:	1009883a 	mov	r4,r2
 800dac4:	80008e80 	call	80008e8 <__mulsi3>
 800dac8:	8085883a 	add	r2,r16,r2
 800dacc:	e0fffe17 	ldw	r3,-8(fp)
 800dad0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800dad4:	d0e00c17 	ldw	r3,-32720(gp)
 800dad8:	e0bffc17 	ldw	r2,-16(fp)
 800dadc:	1880020e 	bge	r3,r2,800dae8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800dae0:	e0bffc17 	ldw	r2,-16(fp)
 800dae4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 800dae8:	e0bffc17 	ldw	r2,-16(fp)
 800daec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800daf0:	00000606 	br	800db0c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800daf4:	e0bffc17 	ldw	r2,-16(fp)
 800daf8:	10800044 	addi	r2,r2,1
 800dafc:	e0bffc15 	stw	r2,-16(fp)
 800db00:	e0bffc17 	ldw	r2,-16(fp)
 800db04:	10800810 	cmplti	r2,r2,32
 800db08:	103fe01e 	bne	r2,zero,800da8c <__alt_data_end+0xfc00da8c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800db0c:	e0bffd17 	ldw	r2,-12(fp)
}
 800db10:	e6ffff04 	addi	sp,fp,-4
 800db14:	dfc00217 	ldw	ra,8(sp)
 800db18:	df000117 	ldw	fp,4(sp)
 800db1c:	dc000017 	ldw	r16,0(sp)
 800db20:	dec00304 	addi	sp,sp,12
 800db24:	f800283a 	ret

0800db28 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800db28:	defffe04 	addi	sp,sp,-8
 800db2c:	df000115 	stw	fp,4(sp)
 800db30:	df000104 	addi	fp,sp,4
 800db34:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800db38:	e0bfff17 	ldw	r2,-4(fp)
 800db3c:	10bffe84 	addi	r2,r2,-6
 800db40:	10c00428 	cmpgeui	r3,r2,16
 800db44:	18001a1e 	bne	r3,zero,800dbb0 <alt_exception_cause_generated_bad_addr+0x88>
 800db48:	100690ba 	slli	r3,r2,2
 800db4c:	00820074 	movhi	r2,2049
 800db50:	10b6d804 	addi	r2,r2,-9376
 800db54:	1885883a 	add	r2,r3,r2
 800db58:	10800017 	ldw	r2,0(r2)
 800db5c:	1000683a 	jmp	r2
 800db60:	0800dba0 	cmpeqi	zero,at,878
 800db64:	0800dba0 	cmpeqi	zero,at,878
 800db68:	0800dbb0 	cmpltui	zero,at,878
 800db6c:	0800dbb0 	cmpltui	zero,at,878
 800db70:	0800dbb0 	cmpltui	zero,at,878
 800db74:	0800dba0 	cmpeqi	zero,at,878
 800db78:	0800dba8 	cmpgeui	zero,at,878
 800db7c:	0800dbb0 	cmpltui	zero,at,878
 800db80:	0800dba0 	cmpeqi	zero,at,878
 800db84:	0800dba0 	cmpeqi	zero,at,878
 800db88:	0800dbb0 	cmpltui	zero,at,878
 800db8c:	0800dba0 	cmpeqi	zero,at,878
 800db90:	0800dba8 	cmpgeui	zero,at,878
 800db94:	0800dbb0 	cmpltui	zero,at,878
 800db98:	0800dbb0 	cmpltui	zero,at,878
 800db9c:	0800dba0 	cmpeqi	zero,at,878
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800dba0:	00800044 	movi	r2,1
 800dba4:	00000306 	br	800dbb4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800dba8:	0005883a 	mov	r2,zero
 800dbac:	00000106 	br	800dbb4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800dbb0:	0005883a 	mov	r2,zero
  }
}
 800dbb4:	e037883a 	mov	sp,fp
 800dbb8:	df000017 	ldw	fp,0(sp)
 800dbbc:	dec00104 	addi	sp,sp,4
 800dbc0:	f800283a 	ret

0800dbc4 <atexit>:
 800dbc4:	200b883a 	mov	r5,r4
 800dbc8:	000f883a 	mov	r7,zero
 800dbcc:	000d883a 	mov	r6,zero
 800dbd0:	0009883a 	mov	r4,zero
 800dbd4:	800dc8c1 	jmpi	800dc8c <__register_exitproc>

0800dbd8 <exit>:
 800dbd8:	defffe04 	addi	sp,sp,-8
 800dbdc:	000b883a 	mov	r5,zero
 800dbe0:	dc000015 	stw	r16,0(sp)
 800dbe4:	dfc00115 	stw	ra,4(sp)
 800dbe8:	2021883a 	mov	r16,r4
 800dbec:	800dda40 	call	800dda4 <__call_exitprocs>
 800dbf0:	00820074 	movhi	r2,2049
 800dbf4:	10800304 	addi	r2,r2,12
 800dbf8:	11000017 	ldw	r4,0(r2)
 800dbfc:	20800f17 	ldw	r2,60(r4)
 800dc00:	10000126 	beq	r2,zero,800dc08 <exit+0x30>
 800dc04:	103ee83a 	callr	r2
 800dc08:	8009883a 	mov	r4,r16
 800dc0c:	800df240 	call	800df24 <_exit>

0800dc10 <memcmp>:
 800dc10:	01c000c4 	movi	r7,3
 800dc14:	3980192e 	bgeu	r7,r6,800dc7c <memcmp+0x6c>
 800dc18:	2144b03a 	or	r2,r4,r5
 800dc1c:	11c4703a 	and	r2,r2,r7
 800dc20:	10000f26 	beq	r2,zero,800dc60 <memcmp+0x50>
 800dc24:	20800003 	ldbu	r2,0(r4)
 800dc28:	28c00003 	ldbu	r3,0(r5)
 800dc2c:	10c0151e 	bne	r2,r3,800dc84 <memcmp+0x74>
 800dc30:	31bfff84 	addi	r6,r6,-2
 800dc34:	01ffffc4 	movi	r7,-1
 800dc38:	00000406 	br	800dc4c <memcmp+0x3c>
 800dc3c:	20800003 	ldbu	r2,0(r4)
 800dc40:	28c00003 	ldbu	r3,0(r5)
 800dc44:	31bfffc4 	addi	r6,r6,-1
 800dc48:	10c00e1e 	bne	r2,r3,800dc84 <memcmp+0x74>
 800dc4c:	21000044 	addi	r4,r4,1
 800dc50:	29400044 	addi	r5,r5,1
 800dc54:	31fff91e 	bne	r6,r7,800dc3c <__alt_data_end+0xfc00dc3c>
 800dc58:	0005883a 	mov	r2,zero
 800dc5c:	f800283a 	ret
 800dc60:	20c00017 	ldw	r3,0(r4)
 800dc64:	28800017 	ldw	r2,0(r5)
 800dc68:	18bfee1e 	bne	r3,r2,800dc24 <__alt_data_end+0xfc00dc24>
 800dc6c:	31bfff04 	addi	r6,r6,-4
 800dc70:	21000104 	addi	r4,r4,4
 800dc74:	29400104 	addi	r5,r5,4
 800dc78:	39bff936 	bltu	r7,r6,800dc60 <__alt_data_end+0xfc00dc60>
 800dc7c:	303fe91e 	bne	r6,zero,800dc24 <__alt_data_end+0xfc00dc24>
 800dc80:	003ff506 	br	800dc58 <__alt_data_end+0xfc00dc58>
 800dc84:	10c5c83a 	sub	r2,r2,r3
 800dc88:	f800283a 	ret

0800dc8c <__register_exitproc>:
 800dc8c:	defffa04 	addi	sp,sp,-24
 800dc90:	dc000315 	stw	r16,12(sp)
 800dc94:	04020074 	movhi	r16,2049
 800dc98:	84000304 	addi	r16,r16,12
 800dc9c:	80c00017 	ldw	r3,0(r16)
 800dca0:	dc400415 	stw	r17,16(sp)
 800dca4:	dfc00515 	stw	ra,20(sp)
 800dca8:	18805217 	ldw	r2,328(r3)
 800dcac:	2023883a 	mov	r17,r4
 800dcb0:	10003726 	beq	r2,zero,800dd90 <__register_exitproc+0x104>
 800dcb4:	10c00117 	ldw	r3,4(r2)
 800dcb8:	010007c4 	movi	r4,31
 800dcbc:	20c00e16 	blt	r4,r3,800dcf8 <__register_exitproc+0x6c>
 800dcc0:	1a000044 	addi	r8,r3,1
 800dcc4:	8800221e 	bne	r17,zero,800dd50 <__register_exitproc+0xc4>
 800dcc8:	18c00084 	addi	r3,r3,2
 800dccc:	18c7883a 	add	r3,r3,r3
 800dcd0:	18c7883a 	add	r3,r3,r3
 800dcd4:	12000115 	stw	r8,4(r2)
 800dcd8:	10c7883a 	add	r3,r2,r3
 800dcdc:	19400015 	stw	r5,0(r3)
 800dce0:	0005883a 	mov	r2,zero
 800dce4:	dfc00517 	ldw	ra,20(sp)
 800dce8:	dc400417 	ldw	r17,16(sp)
 800dcec:	dc000317 	ldw	r16,12(sp)
 800dcf0:	dec00604 	addi	sp,sp,24
 800dcf4:	f800283a 	ret
 800dcf8:	00800034 	movhi	r2,0
 800dcfc:	10800004 	addi	r2,r2,0
 800dd00:	10002626 	beq	r2,zero,800dd9c <__register_exitproc+0x110>
 800dd04:	01006404 	movi	r4,400
 800dd08:	d9400015 	stw	r5,0(sp)
 800dd0c:	d9800115 	stw	r6,4(sp)
 800dd10:	d9c00215 	stw	r7,8(sp)
 800dd14:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800dd18:	d9400017 	ldw	r5,0(sp)
 800dd1c:	d9800117 	ldw	r6,4(sp)
 800dd20:	d9c00217 	ldw	r7,8(sp)
 800dd24:	10001d26 	beq	r2,zero,800dd9c <__register_exitproc+0x110>
 800dd28:	81000017 	ldw	r4,0(r16)
 800dd2c:	10000115 	stw	zero,4(r2)
 800dd30:	02000044 	movi	r8,1
 800dd34:	22405217 	ldw	r9,328(r4)
 800dd38:	0007883a 	mov	r3,zero
 800dd3c:	12400015 	stw	r9,0(r2)
 800dd40:	20805215 	stw	r2,328(r4)
 800dd44:	10006215 	stw	zero,392(r2)
 800dd48:	10006315 	stw	zero,396(r2)
 800dd4c:	883fde26 	beq	r17,zero,800dcc8 <__alt_data_end+0xfc00dcc8>
 800dd50:	18c9883a 	add	r4,r3,r3
 800dd54:	2109883a 	add	r4,r4,r4
 800dd58:	1109883a 	add	r4,r2,r4
 800dd5c:	21802215 	stw	r6,136(r4)
 800dd60:	01800044 	movi	r6,1
 800dd64:	12406217 	ldw	r9,392(r2)
 800dd68:	30cc983a 	sll	r6,r6,r3
 800dd6c:	4992b03a 	or	r9,r9,r6
 800dd70:	12406215 	stw	r9,392(r2)
 800dd74:	21c04215 	stw	r7,264(r4)
 800dd78:	01000084 	movi	r4,2
 800dd7c:	893fd21e 	bne	r17,r4,800dcc8 <__alt_data_end+0xfc00dcc8>
 800dd80:	11006317 	ldw	r4,396(r2)
 800dd84:	218cb03a 	or	r6,r4,r6
 800dd88:	11806315 	stw	r6,396(r2)
 800dd8c:	003fce06 	br	800dcc8 <__alt_data_end+0xfc00dcc8>
 800dd90:	18805304 	addi	r2,r3,332
 800dd94:	18805215 	stw	r2,328(r3)
 800dd98:	003fc606 	br	800dcb4 <__alt_data_end+0xfc00dcb4>
 800dd9c:	00bfffc4 	movi	r2,-1
 800dda0:	003fd006 	br	800dce4 <__alt_data_end+0xfc00dce4>

0800dda4 <__call_exitprocs>:
 800dda4:	defff504 	addi	sp,sp,-44
 800dda8:	df000915 	stw	fp,36(sp)
 800ddac:	dd400615 	stw	r21,24(sp)
 800ddb0:	dc800315 	stw	r18,12(sp)
 800ddb4:	dfc00a15 	stw	ra,40(sp)
 800ddb8:	ddc00815 	stw	r23,32(sp)
 800ddbc:	dd800715 	stw	r22,28(sp)
 800ddc0:	dd000515 	stw	r20,20(sp)
 800ddc4:	dcc00415 	stw	r19,16(sp)
 800ddc8:	dc400215 	stw	r17,8(sp)
 800ddcc:	dc000115 	stw	r16,4(sp)
 800ddd0:	d9000015 	stw	r4,0(sp)
 800ddd4:	2839883a 	mov	fp,r5
 800ddd8:	04800044 	movi	r18,1
 800dddc:	057fffc4 	movi	r21,-1
 800dde0:	00820074 	movhi	r2,2049
 800dde4:	10800304 	addi	r2,r2,12
 800dde8:	12000017 	ldw	r8,0(r2)
 800ddec:	45005217 	ldw	r20,328(r8)
 800ddf0:	44c05204 	addi	r19,r8,328
 800ddf4:	a0001c26 	beq	r20,zero,800de68 <__call_exitprocs+0xc4>
 800ddf8:	a0800117 	ldw	r2,4(r20)
 800ddfc:	15ffffc4 	addi	r23,r2,-1
 800de00:	b8000d16 	blt	r23,zero,800de38 <__call_exitprocs+0x94>
 800de04:	14000044 	addi	r16,r2,1
 800de08:	8421883a 	add	r16,r16,r16
 800de0c:	8421883a 	add	r16,r16,r16
 800de10:	84402004 	addi	r17,r16,128
 800de14:	a463883a 	add	r17,r20,r17
 800de18:	a421883a 	add	r16,r20,r16
 800de1c:	e0001e26 	beq	fp,zero,800de98 <__call_exitprocs+0xf4>
 800de20:	80804017 	ldw	r2,256(r16)
 800de24:	e0801c26 	beq	fp,r2,800de98 <__call_exitprocs+0xf4>
 800de28:	bdffffc4 	addi	r23,r23,-1
 800de2c:	843fff04 	addi	r16,r16,-4
 800de30:	8c7fff04 	addi	r17,r17,-4
 800de34:	bd7ff91e 	bne	r23,r21,800de1c <__alt_data_end+0xfc00de1c>
 800de38:	00800034 	movhi	r2,0
 800de3c:	10800004 	addi	r2,r2,0
 800de40:	10000926 	beq	r2,zero,800de68 <__call_exitprocs+0xc4>
 800de44:	a0800117 	ldw	r2,4(r20)
 800de48:	1000301e 	bne	r2,zero,800df0c <__call_exitprocs+0x168>
 800de4c:	a0800017 	ldw	r2,0(r20)
 800de50:	10003226 	beq	r2,zero,800df1c <__call_exitprocs+0x178>
 800de54:	a009883a 	mov	r4,r20
 800de58:	98800015 	stw	r2,0(r19)
 800de5c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800de60:	9d000017 	ldw	r20,0(r19)
 800de64:	a03fe41e 	bne	r20,zero,800ddf8 <__alt_data_end+0xfc00ddf8>
 800de68:	dfc00a17 	ldw	ra,40(sp)
 800de6c:	df000917 	ldw	fp,36(sp)
 800de70:	ddc00817 	ldw	r23,32(sp)
 800de74:	dd800717 	ldw	r22,28(sp)
 800de78:	dd400617 	ldw	r21,24(sp)
 800de7c:	dd000517 	ldw	r20,20(sp)
 800de80:	dcc00417 	ldw	r19,16(sp)
 800de84:	dc800317 	ldw	r18,12(sp)
 800de88:	dc400217 	ldw	r17,8(sp)
 800de8c:	dc000117 	ldw	r16,4(sp)
 800de90:	dec00b04 	addi	sp,sp,44
 800de94:	f800283a 	ret
 800de98:	a0800117 	ldw	r2,4(r20)
 800de9c:	80c00017 	ldw	r3,0(r16)
 800dea0:	10bfffc4 	addi	r2,r2,-1
 800dea4:	15c01426 	beq	r2,r23,800def8 <__call_exitprocs+0x154>
 800dea8:	80000015 	stw	zero,0(r16)
 800deac:	183fde26 	beq	r3,zero,800de28 <__alt_data_end+0xfc00de28>
 800deb0:	95c8983a 	sll	r4,r18,r23
 800deb4:	a0806217 	ldw	r2,392(r20)
 800deb8:	a5800117 	ldw	r22,4(r20)
 800debc:	2084703a 	and	r2,r4,r2
 800dec0:	10000b26 	beq	r2,zero,800def0 <__call_exitprocs+0x14c>
 800dec4:	a0806317 	ldw	r2,396(r20)
 800dec8:	2088703a 	and	r4,r4,r2
 800decc:	20000c1e 	bne	r4,zero,800df00 <__call_exitprocs+0x15c>
 800ded0:	89400017 	ldw	r5,0(r17)
 800ded4:	d9000017 	ldw	r4,0(sp)
 800ded8:	183ee83a 	callr	r3
 800dedc:	a0800117 	ldw	r2,4(r20)
 800dee0:	15bfbf1e 	bne	r2,r22,800dde0 <__alt_data_end+0xfc00dde0>
 800dee4:	98800017 	ldw	r2,0(r19)
 800dee8:	153fcf26 	beq	r2,r20,800de28 <__alt_data_end+0xfc00de28>
 800deec:	003fbc06 	br	800dde0 <__alt_data_end+0xfc00dde0>
 800def0:	183ee83a 	callr	r3
 800def4:	003ff906 	br	800dedc <__alt_data_end+0xfc00dedc>
 800def8:	a5c00115 	stw	r23,4(r20)
 800defc:	003feb06 	br	800deac <__alt_data_end+0xfc00deac>
 800df00:	89000017 	ldw	r4,0(r17)
 800df04:	183ee83a 	callr	r3
 800df08:	003ff406 	br	800dedc <__alt_data_end+0xfc00dedc>
 800df0c:	a0800017 	ldw	r2,0(r20)
 800df10:	a027883a 	mov	r19,r20
 800df14:	1029883a 	mov	r20,r2
 800df18:	003fb606 	br	800ddf4 <__alt_data_end+0xfc00ddf4>
 800df1c:	0005883a 	mov	r2,zero
 800df20:	003ffb06 	br	800df10 <__alt_data_end+0xfc00df10>

0800df24 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800df24:	defffd04 	addi	sp,sp,-12
 800df28:	df000215 	stw	fp,8(sp)
 800df2c:	df000204 	addi	fp,sp,8
 800df30:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800df34:	0001883a 	nop
 800df38:	e0bfff17 	ldw	r2,-4(fp)
 800df3c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800df40:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800df44:	10000226 	beq	r2,zero,800df50 <_exit+0x2c>
    ALT_SIM_FAIL();
 800df48:	002af070 	cmpltui	zero,zero,43969
 800df4c:	00000106 	br	800df54 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800df50:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800df54:	003fff06 	br	800df54 <__alt_data_end+0xfc00df54>
